declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class BackpressureKind {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.BackpressureKind>;
                    public static PASS_THROUGH: io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static FULL: io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static SPECIAL: io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static UNBOUNDED_IN: io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static ERROR: io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static NONE: io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static valueOf(name: string): io.reactivex.rxjava3.annotations.BackpressureKind;
                    public static values(): androidNative.Array<io.reactivex.rxjava3.annotations.BackpressureKind>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class BackpressureSupport {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.BackpressureSupport>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.BackpressureSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        value(): io.reactivex.rxjava3.annotations.BackpressureKind;
                    });
                    public constructor();
                    public value(): io.reactivex.rxjava3.annotations.BackpressureKind;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class Beta {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.Beta>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.Beta interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                    });
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class CheckReturnValue {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.CheckReturnValue>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.CheckReturnValue interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                    });
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class Experimental {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.Experimental>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.Experimental interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                    });
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class NonNull {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.NonNull>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.NonNull interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                    });
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class Nullable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.Nullable>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.Nullable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                    });
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module annotations {
                export class SchedulerSupport {
                    public static class: java.lang.Class<io.reactivex.rxjava3.annotations.SchedulerSupport>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.annotations.SchedulerSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        value(): string;
                    });
                    public constructor();
                    public static CUSTOM: string = "custom";
                    public static COMPUTATION: string = "io.reactivex:computation";
                    public static SINGLE: string = "io.reactivex:single";
                    public static TRAMPOLINE: string = "io.reactivex:trampoline";
                    public static NONE: string = "none";
                    public static IO: string = "io.reactivex:io";
                    public static NEW_THREAD: string = "io.reactivex:new-thread";
                    public value(): string;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class BackpressureOverflowStrategy {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.BackpressureOverflowStrategy>;
                    public static ERROR: io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
                    public static DROP_OLDEST: io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
                    public static DROP_LATEST: io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
                    public static values(): androidNative.Array<io.reactivex.rxjava3.core.BackpressureOverflowStrategy>;
                    public static valueOf(name: string): io.reactivex.rxjava3.core.BackpressureOverflowStrategy;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class BackpressureStrategy {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.BackpressureStrategy>;
                    public static MISSING: io.reactivex.rxjava3.core.BackpressureStrategy;
                    public static ERROR: io.reactivex.rxjava3.core.BackpressureStrategy;
                    public static BUFFER: io.reactivex.rxjava3.core.BackpressureStrategy;
                    public static DROP: io.reactivex.rxjava3.core.BackpressureStrategy;
                    public static LATEST: io.reactivex.rxjava3.core.BackpressureStrategy;
                    public static valueOf(name: string): io.reactivex.rxjava3.core.BackpressureStrategy;
                    public static values(): androidNative.Array<io.reactivex.rxjava3.core.BackpressureStrategy>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export abstract class Completable extends io.reactivex.rxjava3.core.CompletableSource {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Completable>;
                    public blockingSubscribe(): void;
                    public static unsafeCreate(onSubscribe: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public blockingAwait(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Completable;
                    public static never(): io.reactivex.rxjava3.core.Completable;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public static wrap(source: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public static concatDelayError(sources: org.reactivestreams.Publisher<any>, prefetch: number): io.reactivex.rxjava3.core.Completable;
                    public toCompletionStage(defaultItem: any): java.util.concurrent.CompletionStage;
                    public retry(times: number): io.reactivex.rxjava3.core.Completable;
                    public startWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public toFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
                    public doOnLifecycle(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public constructor();
                    public blockingSubscribe(onComplete: io.reactivex.rxjava3.functions.Action): void;
                    public onTerminateDetach(): io.reactivex.rxjava3.core.Completable;
                    public repeatWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public takeUntil(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public toSingleDefault(completionValue: any): io.reactivex.rxjava3.core.Single<any>;
                    public static concat(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
                    public static merge(sources: org.reactivestreams.Publisher<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Completable;
                    public static switchOnNextDelayError(sources: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
                    public static concatArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
                    public static switchOnNext(sources: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
                    public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public retry(times: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Completable;
                    public repeatUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Completable;
                    public static fromObservable(observable: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Completable;
                    public onErrorResumeWith(fallback: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public retry(): io.reactivex.rxjava3.core.Completable;
                    public static concatDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
                    public static mergeDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
                    public doOnEvent(onEvent: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
                    public static fromSupplier(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Completable;
                    public andThen(next: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public to(converter: io.reactivex.rxjava3.core.CompletableConverter<any>): any;
                    public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public toSingle(completionValueSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public hide(): io.reactivex.rxjava3.core.Completable;
                    public doOnError(onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
                    public doOnComplete(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public static concatArray(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
                    public retry(predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Completable;
                    public toMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public onErrorReturnItem(item: any): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribe(ex: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public static create(source: io.reactivex.rxjava3.core.CompletableOnSubscribe): io.reactivex.rxjava3.core.Completable;
                    public andThen(next: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public doFinally(onFinally: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public retryUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Completable;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, fallback: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public materialize(): io.reactivex.rxjava3.core.Single<any>;
                    public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public onErrorResumeNext(fallbackSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public safeSubscribe(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public retryWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public toFuture(): java.util.concurrent.Future<java.lang.Void>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, fallback: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public andThen(next: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public subscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public lift(onLift: io.reactivex.rxjava3.core.CompletableOperator): io.reactivex.rxjava3.core.Completable;
                    public static mergeArray(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
                    public andThen(next: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromCompletionStage(stage: java.util.concurrent.CompletionStage<any>): io.reactivex.rxjava3.core.Completable;
                    public startWith(other: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeWith(observer: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
                    public static concat(sources: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
                    public repeat(times: number): io.reactivex.rxjava3.core.Completable;
                    public retry(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Completable;
                    public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public onErrorReturn(itemSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public test(): io.reactivex.rxjava3.observers.TestObserver<java.lang.Void>;
                    public static error(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Completable;
                    public startWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromPublisher(publisher: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Completable;
                    public compose(transformer: io.reactivex.rxjava3.core.CompletableTransformer): io.reactivex.rxjava3.core.Completable;
                    public startWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static amb(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
                    public static merge(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Completable;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean): io.reactivex.rxjava3.core.Completable;
                    public static error(throwable: java.lang.Throwable): io.reactivex.rxjava3.core.Completable;
                    public static defer(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Completable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.core.Completable;
                    public static concatDelayError(sources: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
                    public doOnDispose(onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public blockingAwait(): void;
                    public doOnTerminate(onTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public static concat(sources: org.reactivestreams.Publisher<any>, prefetch: number): io.reactivex.rxjava3.core.Completable;
                    public onErrorComplete(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Completable;
                    public static fromMaybe(maybe: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Completable;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.CompletableSource, source2: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public andThen(next: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
                    public doOnSubscribe(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Completable;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
                    public onErrorComplete(): io.reactivex.rxjava3.core.Completable;
                    public static complete(): io.reactivex.rxjava3.core.Completable;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Completable;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public static fromCallable(callable: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Completable;
                    public startWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeActual(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public static ambArray(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
                    public blockingSubscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public unsubscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public test(dispose: boolean): io.reactivex.rxjava3.observers.TestObserver<java.lang.Void>;
                    public static mergeArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>): io.reactivex.rxjava3.core.Completable;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public blockingSubscribe(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public doAfterTerminate(onAfterTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Completable;
                    public repeat(): io.reactivex.rxjava3.core.Completable;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Completable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Completable;
                    public ambWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Completable;
                    public static fromSingle(single: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Completable;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Completable;
                    public static merge(sources: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Completable;
                    public cache(): io.reactivex.rxjava3.core.Completable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableConverter<R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableConverter<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableConverter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Completable): R;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Completable): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableEmitter {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableEmitter>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableEmitter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onComplete(): void;
                        onError(param0: java.lang.Throwable): void;
                        setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                        isDisposed(): boolean;
                        tryOnError(param0: java.lang.Throwable): boolean;
                    });
                    public constructor();
                    public isDisposed(): boolean;
                    public tryOnError(param0: java.lang.Throwable): boolean;
                    public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onComplete(): void;
                    public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                    public onError(param0: java.lang.Throwable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableObserver {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableObserver>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableObserver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        onComplete(): void;
                        onError(param0: java.lang.Throwable): void;
                    });
                    public constructor();
                    public onComplete(): void;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableOnSubscribe {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableOnSubscribe>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableOnSubscribe interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.CompletableEmitter): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.CompletableEmitter): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableOperator {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableOperator>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableOperator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableSource {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableSource>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class CompletableTransformer {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.CompletableTransformer>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.CompletableTransformer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Completable): io.reactivex.rxjava3.core.CompletableSource;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Completable): io.reactivex.rxjava3.core.CompletableSource;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class Emitter<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Emitter<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.Emitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onNext(param0: T): void;
                        onError(param0: java.lang.Throwable): void;
                        onComplete(): void;
                    });
                    public constructor();
                    public onComplete(): void;
                    public onNext(param0: T): void;
                    public onError(param0: java.lang.Throwable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export abstract class Flowable<T> extends org.reactivestreams.Publisher<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Flowable<any>>;
                    public retryWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(): void;
                    public toSortedList(capacityHint: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatest(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static bufferSize(): number;
                    public distinct(): io.reactivex.rxjava3.core.Flowable<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public constructor();
                    public timeInterval(): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public concatMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(count: number, skip: number, bufferSize: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number, evictingMapFactory: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public first(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public withLatestFrom(others: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, mapSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static concat(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromObservable(source: io.reactivex.rxjava3.core.ObservableSource<any>, strategy: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleWithTimeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeWith(subscriber: org.reactivestreams.Subscriber): org.reactivestreams.Subscriber;
                    public static sequenceEqual(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, bufferSize: number): io.reactivex.rxjava3.core.Single<any>;
                    public timestamp(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static merge(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Completable;
                    public doAfterNext(onAfterNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>, fallback: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureDrop(onDrop: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(count: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public forEachWhile(onNext: io.reactivex.rxjava3.functions.Predicate<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(firstTimeoutIndicator: org.reactivestreams.Publisher, itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSingle(): any;
                    public window(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public static fromPublisher(publisher: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromSingle(source: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public forEachWhile(onNext: io.reactivex.rxjava3.functions.Predicate<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(sources: java.lang.Iterable<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromArray(items: androidNative.Array<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingFirst(): any;
                    public onBackpressureBuffer(capacity: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public withLatestFrom(others: androidNative.Array<org.reactivestreams.Publisher>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, source7: org.reactivestreams.Publisher, source8: org.reactivestreams.Publisher, source9: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEagerDelayError(sources: org.reactivestreams.Publisher, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public publish(bufferSize: number): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static intervalRange(start: number, count: number, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public scan(accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, count: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public static concat(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleFirst(skipDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureDrop(): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                    public share(): io.reactivex.rxjava3.core.Flowable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, mapSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collectionFactory: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEager(sources: java.lang.Iterable<any>, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnEach(onNotification: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toSortedList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public cache(): io.reactivex.rxjava3.core.Flowable<any>;
                    public elementAt(index: number): io.reactivex.rxjava3.core.Maybe<any>;
                    public static interval(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public serialize(): io.reactivex.rxjava3.core.Flowable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public unsubscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public firstOrError(): io.reactivex.rxjava3.core.Single<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, fallback: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public buffer(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArrayEagerDelayError(maxConcurrency: number, prefetch: number, sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleLast(intervalDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public mergeWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(openingIndicator: org.reactivestreams.Publisher, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(count: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public static range(start: number, count: number): io.reactivex.rxjava3.core.Flowable<java.lang.Integer>;
                    public static error(throwable: java.lang.Throwable): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromCallable(callable: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public takeWhile(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public cacheWithInitialCapacity(initialCapacity: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public lift(lifter: io.reactivex.rxjava3.core.FlowableOperator<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static amb(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(count: number, skip: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArrayDelayError(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeInterval(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static concatEager(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public delay(itemDelayIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public buffer(boundaryIndicator: org.reactivestreams.Publisher, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArrayDelayError(maxConcurrency: number, bufferSize: number, sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeat(): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEager(sources: org.reactivestreams.Publisher, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public toList(collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public buffer(openingIndicator: org.reactivestreams.Publisher, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public scanWith(seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toSortedList(comparator: java.util.Comparator<any>, capacityHint: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public collectInto(initialItem: any, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public all(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public toMap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnEach(subscriber: org.reactivestreams.Subscriber<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public compose(composer: io.reactivex.rxjava3.core.FlowableTransformer<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(openingIndicator: org.reactivestreams.Publisher, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toFuture(): java.util.concurrent.Future<any>;
                    public concatMapEager(mapper: io.reactivex.rxjava3.functions.Function<any, any>, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public subscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                    public startWithIterable(items: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(sources: org.reactivestreams.Publisher, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public retry(times: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number, restart: boolean): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public throttleWithTimeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onErrorResumeWith(fallback: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingLatest(): java.lang.Iterable<any>;
                    public last(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public skip(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>, restartTimerOnMaxSize: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public static merge(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingForEach(this_: io.reactivex.rxjava3.functions.Consumer<any>, onNext: number): void;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingStream(): java.util.stream.Stream<any>;
                    public concatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Completable;
                    public flatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public materialize(): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Notification<any>>;
                    public onBackpressureBuffer(capacity: number, delayError: boolean, unbounded: boolean, onOverflow: io.reactivex.rxjava3.functions.Action, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, emitLast: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public any(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public doOnRequest(onRequest: io.reactivex.rxjava3.functions.LongConsumer): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public parallel(): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public concatMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeatWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static switchOnNextDelayError(sources: org.reactivestreams.Publisher, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static just(item: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, item8: any, item9: any, item10: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public distinctUntilChanged(comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromOptional(optional: java.util.Optional): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, bufferSize: number): void;
                    public skipLast(count: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMap(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromStream(stream: java.util.stream.Stream): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleWithTimeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWithItem(item: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public toMap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public skipWhile(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public groupJoin(other: org.reactivestreams.Publisher, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public static ambArray(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public lastElement(): io.reactivex.rxjava3.core.Maybe<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, count: number, restart: boolean): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public withLatestFrom(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatestArray(sources: androidNative.Array<org.reactivestreams.Publisher>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public forEachWhile(onNext: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public firstOrErrorStage(): java.util.concurrent.CompletionStage<any>;
                    public elementAtOrError(index: number): io.reactivex.rxjava3.core.Single<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureBuffer(capacity: number, delayError: boolean, unbounded: boolean, onOverflow: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public static sequenceEqual(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, isEqual: io.reactivex.rxjava3.functions.BiPredicate<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Single<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public contains(item: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public sorted(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public timestamp(): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public sorted(): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doAfterTerminate(onAfterTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public static sequenceEqual(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, isEqual: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromFuture(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, source7: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number, restart: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public replay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureBuffer(delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public static rangeLong(start: number, count: number): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public flatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingIterable(bufferSize: number): java.lang.Iterable<any>;
                    public onBackpressureLatest(): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatestDelayError(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static defer(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureBuffer(): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSingle(defaultItem: any): any;
                    public toList(capacityHint: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public window(boundaryIndicator: org.reactivestreams.Publisher, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public onErrorComplete(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public singleOrErrorStage(): java.util.concurrent.CompletionStage<any>;
                    public doOnCancel(onCancel: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEagerDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public takeLast(count: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public to(converter: io.reactivex.rxjava3.core.FlowableConverter<any, any>): any;
                    public scan(initialValue: any, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public take(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public static empty(): io.reactivex.rxjava3.core.Flowable<any>;
                    public reduceWith(seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public switchMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static interval(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public safeSubscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                    public parallel(parallelism: number, prefetch: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public onErrorReturn(itemSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, bufferSize: number): void;
                    public static concatEager(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler, requestOn: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArrayEager(maxConcurrency: number, prefetch: number, sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatestArray(sources: androidNative.Array<org.reactivestreams.Publisher>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public timeout(firstTimeoutIndicator: org.reactivestreams.Publisher, itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>, fallback: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public publish(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, fallback: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureBuffer(capacity: number, delayError: boolean, unbounded: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(e: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
                    public static just(item1: any, item2: any, item3: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toMap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, mapSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public retry(): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doFinally(onFinally: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(boundaryIndicator: org.reactivestreams.Publisher, initialCapacity: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureBuffer(capacity: number, onOverflow: io.reactivex.rxjava3.functions.Action, overflowStrategy: io.reactivex.rxjava3.core.BackpressureOverflowStrategy, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(count: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public static combineLatestArrayDelayError(sources: androidNative.Array<org.reactivestreams.Publisher>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureLatest(onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public distinctUntilChanged(): io.reactivex.rxjava3.core.Flowable<any>;
                    public test(): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public ambWith(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(onNextMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeatUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(count: number, skip: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public onBackpressureBuffer(capacity: number, onOverflow: io.reactivex.rxjava3.functions.Action, overflowStrategy: io.reactivex.rxjava3.core.BackpressureOverflowStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public static interval(period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public skip(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, emitLast: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureBuffer(capacity: number, onOverflow: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): void;
                    public firstStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArray(maxConcurrency: number, bufferSize: number, sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public singleElement(): io.reactivex.rxjava3.core.Maybe<any>;
                    public concatMapDelayError(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: boolean, tillTheEnd: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeInterval(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, item8: any, item9: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public distinctUntilChanged(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingFirst(defaultItem: any): any;
                    public switchMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public delaySubscription(subscriptionIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public singleOrError(): io.reactivex.rxjava3.core.Single<any>;
                    public window(openingIndicator: org.reactivestreams.Publisher, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArray(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static never(): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingStream(prefetch: number): java.util.stream.Stream<any>;
                    public onBackpressureReduce(reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static sequenceEqual(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapEagerDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnError(onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public doOnLifecycle(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onRequest: io.reactivex.rxjava3.functions.LongConsumer, onCancel: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public static intervalRange(start: number, count: number, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public takeLast(count: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiConsumer<any, any>, disposeState: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public test(initialRequest: number, cancel: boolean): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, source7: org.reactivestreams.Publisher, source8: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delay(subscriptionIndicator: org.reactivestreams.Publisher, itemDelayIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromSupplier(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatDelayError(sources: org.reactivestreams.Publisher, prefetch: number, tillTheEnd: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public onBackpressureReduce(supplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public withLatestFrom(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public withLatestFrom(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public collect(collector: java.util.stream.Collector): io.reactivex.rxjava3.core.Single<any>;
                    public static error(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public publish(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public replay(bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public repeat(times: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatestArrayDelayError(sources: androidNative.Array<org.reactivestreams.Publisher>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingLast(defaultItem: any): any;
                    public throttleLast(intervalDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public mergeWith(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public takeLast(count: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public join(other: org.reactivestreams.Publisher, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public zipWith(other: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromMaybe(maybe: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onTerminateDetach(): io.reactivex.rxjava3.core.Flowable<any>;
                    public cast(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingLast(): any;
                    public blockingIterable(): java.lang.Iterable<any>;
                    public debounce(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleLast(intervalDuration: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public zipWith(other: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public timeout(itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(onNextMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static switchOnNext(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, bufferSize: number): void;
                    public concatWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
                    public static switchOnNext(sources: org.reactivestreams.Publisher, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public publish(selector: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeActual(param0: org.reactivestreams.Subscriber<any>): void;
                    public toSortedList(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public elementAt(index: number, defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public takeUntil(other: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArrayEagerDelayError(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static switchOnNextDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Completable;
                    public concatMapEager(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public debounce(debounceIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public forEach(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public static mergeDelayError(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapEagerDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public sample(sampler: org.reactivestreams.Publisher, emitLast: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public concatMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, prefetch: number): io.reactivex.rxjava3.core.Completable;
                    public replay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public takeUntil(stopPredicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public switchIfEmpty(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, prefetch: number, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromCompletable(completableSource: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
                    public toList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public static concatArray(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatWith(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnSubscribe(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingMostRecent(initialItem: any): java.lang.Iterable<any>;
                    public static zipArray(zipper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number, sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public window(boundaryIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public lastOrError(): io.reactivex.rxjava3.core.Single<any>;
                    public switchMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleFirst(skipDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<any>>;
                    public dematerialize(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public zipWith(other: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public collect(initialItemSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public retryUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onErrorReturnItem(item: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public throttleFirst(windowDuration: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public take(count: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromIterable(source: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public retry(times: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatestDelayError(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public skipUntil(other: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, disposeState: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static unsafeCreate(onSubscribe: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingForEach(onNext: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, source7: org.reactivestreams.Publisher, source8: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, source7: org.reactivestreams.Publisher, source8: org.reactivestreams.Publisher, source9: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public defaultIfEmpty(defaultItem: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public skip(count: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public count(): io.reactivex.rxjava3.core.Single<java.lang.Long>;
                    public onErrorResumeNext(fallbackSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public firstElement(): io.reactivex.rxjava3.core.Maybe<any>;
                    public onErrorComplete(): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static generate(generator: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public sample(sampler: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArrayDelayError(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public reduce(reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public onBackpressureBuffer(capacity: number, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingNext(): java.lang.Iterable<any>;
                    public doOnNext(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public zipWith(other: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public timestamp(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public startWithArray(items: androidNative.Array<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, source5: org.reactivestreams.Publisher, source6: org.reactivestreams.Publisher, source7: org.reactivestreams.Publisher, zipper: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnComplete(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArrayEager(sources: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, count: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public flatMap(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: boolean, delayErrors: number, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public hide(): io.reactivex.rxjava3.core.Flowable<any>;
                    public ofType(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public single(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public static combineLatest(source1: org.reactivestreams.Publisher, source2: org.reactivestreams.Publisher, source3: org.reactivestreams.Publisher, source4: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromCompletionStage(stage: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeInterval(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public timestamp(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static just(item1: any, item2: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, item8: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public ignoreElements(): io.reactivex.rxjava3.core.Completable;
                    public test(initialRequest: number): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static combineLatest(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public singleStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public lastOrErrorStage(): java.util.concurrent.CompletionStage<any>;
                    public concatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public isEmpty(): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public buffer(boundaryIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public debounce(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public reduce(seed: any, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public takeLast(count: number, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public lastStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public rebatchRequests(n: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public parallel(parallelism: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public take(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.core.Flowable<any>;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public withLatestFrom(other: org.reactivestreams.Publisher, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public distinct(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public buffer(count: number, skip: number): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public doOnTerminate(onTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                    public static interval(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayErrors: boolean, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public debounce(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public replay(bufferSize: number): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public buffer(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<java.util.List<any>>;
                    public distinct(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class FlowableConverter<T, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableConverter<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Flowable<T>): R;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Flowable<T>): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class FlowableEmitter<T> extends io.reactivex.rxjava3.core.Emitter<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableEmitter<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                        requested(): number;
                        isCancelled(): boolean;
                        serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                        tryOnError(param0: java.lang.Throwable): boolean;
                        onNext(param0: any): void;
                        onError(param0: java.lang.Throwable): void;
                        onComplete(): void;
                    });
                    public constructor();
                    public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                    public isCancelled(): boolean;
                    public tryOnError(param0: java.lang.Throwable): boolean;
                    public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                    public onComplete(): void;
                    public onError(param0: java.lang.Throwable): void;
                    public requested(): number;
                    public onNext(param0: any): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class FlowableOnSubscribe<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableOnSubscribe<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.FlowableEmitter<T>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.FlowableEmitter<T>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class FlowableOperator<Downstream, Upstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableOperator<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: org.reactivestreams.Subscriber<any>): org.reactivestreams.Subscriber<any>;
                    });
                    public constructor();
                    public apply(param0: org.reactivestreams.Subscriber<any>): org.reactivestreams.Subscriber<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class FlowableSubscriber<T> extends org.reactivestreams.Subscriber<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableSubscriber<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableSubscriber<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSubscribe(param0: org.reactivestreams.Subscription): void;
                    });
                    public constructor();
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class FlowableTransformer<Upstream, Downstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.FlowableTransformer<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.FlowableTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Flowable<Upstream>): org.reactivestreams.Publisher<Downstream>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Flowable<Upstream>): org.reactivestreams.Publisher<Downstream>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export abstract class Maybe<T> extends io.reactivex.rxjava3.core.MaybeSource<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Maybe<any>>;
                    public blockingSubscribe(): void;
                    public retry(times: number): io.reactivex.rxjava3.core.Maybe<any>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public doOnLifecycle(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public retry(): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatEager(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static just(item: any): io.reactivex.rxjava3.core.Maybe<any>;
                    public compose(transformer: io.reactivex.rxjava3.core.MaybeTransformer<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public constructor();
                    public doOnDispose(onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static never(): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>, source5: io.reactivex.rxjava3.core.MaybeSource<any>, source6: io.reactivex.rxjava3.core.MaybeSource<any>, source7: io.reactivex.rxjava3.core.MaybeSource<any>, source8: io.reactivex.rxjava3.core.MaybeSource<any>, source9: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public startWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
                    public toCompletionStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static merge(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public timestamp(): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public timeout(timeoutIndicator: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromCompletionStage(stage: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Maybe<any>;
                    public blockingSubscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): void;
                    public static unsafeCreate(onSubscribe: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public flatMapObservable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromSupplier(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, fallback: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public flattenAsObservable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public ambWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public safeSubscribe(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public switchIfEmpty(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Maybe<any>;
                    public repeatUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
                    public retryWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>, source5: io.reactivex.rxjava3.core.MaybeSource<any>, source6: io.reactivex.rxjava3.core.MaybeSource<any>, source7: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public ignoreElement(): io.reactivex.rxjava3.core.Completable;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnSuccess(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static merge(source: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeInterval(): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public blockingSubscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public static concatEager(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnEvent(onEvent: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromObservable(source: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onErrorComplete(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
                    public static error(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
                    public static amb(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public concatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public onErrorReturn(itemSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribeWith(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public cast(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromCompletable(completableSource: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Maybe<any>;
                    public static empty(): io.reactivex.rxjava3.core.Maybe<any>;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public flatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public retry(predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public timestamp(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static fromFuture(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
                    public doOnTerminate(onTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public repeat(times: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public static zip(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static defer(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, fallback: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static create(onSubscribe: io.reactivex.rxjava3.core.MaybeOnSubscribe<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribeActual(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public onErrorComplete(): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public static concatEager(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeat(): io.reactivex.rxjava3.core.Flowable<any>;
                    public takeUntil(other: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatArrayDelayError(source: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public retryUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Maybe<any>;
                    public switchIfEmpty(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public to(converter: io.reactivex.rxjava3.core.MaybeConverter<any, any>): any;
                    public delay(delayIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
                    public cache(): io.reactivex.rxjava3.core.Maybe<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
                    public static switchOnNext(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnSubscribe(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public onErrorReturnItem(item: any): io.reactivex.rxjava3.core.Maybe<any>;
                    public toFuture(): java.util.concurrent.Future<any>;
                    public static concatEagerDelayError(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public onErrorResumeNext(fallbackSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public test(dispose: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromCallable(callable: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>, source5: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static switchOnNextDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concat(sources: org.reactivestreams.Publisher, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(timeoutIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
                    public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(timeoutIndicator: org.reactivestreams.Publisher, fallback: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public lift(lift: io.reactivex.rxjava3.core.MaybeOperator<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, isEqual: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public dematerialize(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static merge(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public toSingle(): io.reactivex.rxjava3.core.Single<any>;
                    public static fromOptional(optional: java.util.Optional): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeInterval(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static ambArray(source: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static wrap(source: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public flatMap(onSuccessMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public onTerminateDetach(): io.reactivex.rxjava3.core.Maybe<any>;
                    public unsubscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
                    public materialize(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<java.lang.Long>;
                    public toCompletionStage(): java.util.concurrent.CompletionStage<any>;
                    public static fromPublisher(source: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatDelayError(sources: org.reactivestreams.Publisher, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public timestamp(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public onErrorResumeWith(fallback: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public repeatWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flattenStreamAsFlowable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public static concatArray(source: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(subscriptionIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>, source5: io.reactivex.rxjava3.core.MaybeSource<any>, source6: io.reactivex.rxjava3.core.MaybeSource<any>, source7: io.reactivex.rxjava3.core.MaybeSource<any>, source8: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public blockingSubscribe(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public flattenStreamAsObservable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public timeInterval(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public retry(times: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public count(): io.reactivex.rxjava3.core.Single<java.lang.Long>;
                    public static concatEager(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnError(onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean): io.reactivex.rxjava3.core.Maybe<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
                    public ofType(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public contains(item: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public static fromSingle(single: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public defaultIfEmpty(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public static zipArray(zipper: io.reactivex.rxjava3.functions.Function<any, any>, sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Maybe<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public subscribe(npe: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public startWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingGet(defaultValue: any): any;
                    public blockingGet(): any;
                    public static concatArrayEager(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doAfterTerminate(onAfterTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public flattenAsFlowable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public hide(): io.reactivex.rxjava3.core.Maybe<any>;
                    public doOnComplete(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public toFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public flatMapPublisher(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<java.lang.Long>;
                    public isEmpty(): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public timestamp(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public doFinally(onFinally: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Maybe<any>;
                    public takeUntil(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeInterval(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public doAfterSuccess(onAfterSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatArrayEagerDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static error(throwable: java.lang.Throwable): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Maybe<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>, source5: io.reactivex.rxjava3.core.MaybeSource<any>, source6: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatEagerDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(timeoutIndicator: io.reactivex.rxjava3.core.MaybeSource<any>, fallback: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public zipWith(other: io.reactivex.rxjava3.core.MaybeSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, source3: io.reactivex.rxjava3.core.MaybeSource<any>, source4: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArray(source: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.core.Maybe<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeConverter<T, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeConverter<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Maybe<T>): R;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Maybe<T>): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeEmitter<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeEmitter<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSuccess(param0: T): void;
                        onError(param0: java.lang.Throwable): void;
                        onComplete(): void;
                        setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                        isDisposed(): boolean;
                        tryOnError(param0: java.lang.Throwable): boolean;
                    });
                    public constructor();
                    public isDisposed(): boolean;
                    public tryOnError(param0: java.lang.Throwable): boolean;
                    public onSuccess(param0: T): void;
                    public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onComplete(): void;
                    public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                    public onError(param0: java.lang.Throwable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeObserver<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeObserver<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        onSuccess(param0: T): void;
                        onError(param0: java.lang.Throwable): void;
                        onComplete(): void;
                    });
                    public constructor();
                    public onSuccess(param0: T): void;
                    public onComplete(): void;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeOnSubscribe<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeOnSubscribe<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.MaybeEmitter<T>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.MaybeEmitter<T>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeOperator<Downstream, Upstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeOperator<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeSource<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeSource<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class MaybeTransformer<Upstream, Downstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.MaybeTransformer<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.MaybeTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Maybe<Upstream>): io.reactivex.rxjava3.core.MaybeSource<Downstream>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Maybe<Upstream>): io.reactivex.rxjava3.core.MaybeSource<Downstream>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class Notification<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Notification<any>>;
                    public isOnNext(): boolean;
                    public static createOnComplete(): io.reactivex.rxjava3.core.Notification<any>;
                    public toString(): string;
                    public equals(this_: any): boolean;
                    public isOnComplete(): boolean;
                    public getValue(): T;
                    public isOnError(): boolean;
                    public static createOnNext(value: any): io.reactivex.rxjava3.core.Notification<any>;
                    public static createOnError(error: java.lang.Throwable): io.reactivex.rxjava3.core.Notification<any>;
                    public hashCode(): number;
                    public getError(): java.lang.Throwable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export abstract class Observable<T> extends io.reactivex.rxjava3.core.ObservableSource<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Observable<any>>;
                    public blockingSubscribe(): void;
                    public toSortedList(capacityHint: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public window(openingIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromStream(stream: java.util.stream.Stream): io.reactivex.rxjava3.core.Observable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public skipLast(count: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static bufferSize(): number;
                    public concatMapEagerDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public materialize(): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Notification<any>>;
                    public constructor();
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static just(item: any): io.reactivex.rxjava3.core.Observable<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, item8: any): io.reactivex.rxjava3.core.Observable<any>;
                    public first(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, mapSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public window(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public flatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static merge(sources: io.reactivex.rxjava3.core.ObservableSource<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public timestamp(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public concatMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Completable;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public static interval(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public takeLast(count: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public window(openingIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public debounce(debounceIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public forEachWhile(onNext: io.reactivex.rxjava3.functions.Predicate<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public repeatUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Observable<any>;
                    public static unsafeCreate(onSubscribe: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatArrayEager(maxConcurrency: number, bufferSize: number, sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingSingle(): any;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, source7: io.reactivex.rxjava3.core.ObservableSource<any>, source8: io.reactivex.rxjava3.core.ObservableSource<any>, source9: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public forEachWhile(onNext: io.reactivex.rxjava3.functions.Predicate<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public distinct(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleLast(intervalDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromArray(items: androidNative.Array<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public onErrorReturnItem(item: any): io.reactivex.rxjava3.core.Observable<any>;
                    public static intervalRange(start: number, count: number, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any): io.reactivex.rxjava3.core.Observable<any>;
                    public onErrorReturn(itemSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromCallable(callable: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeArray(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, source7: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatArrayEagerDelayError(maxConcurrency: number, bufferSize: number, sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingFirst(): any;
                    public concatMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public sorted(): io.reactivex.rxjava3.core.Observable<any>;
                    public static interval(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public static combineLatestDelayError(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribeActual(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, isEqual: io.reactivex.rxjava3.functions.BiPredicate<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Single<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatestArray(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, mapSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collectionFactory: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public withLatestFrom(others: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toSortedList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number, restart: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public elementAt(index: number): io.reactivex.rxjava3.core.Maybe<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public switchIfEmpty(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(count: number, skip: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public concatMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public firstOrError(): io.reactivex.rxjava3.core.Single<any>;
                    public share(): io.reactivex.rxjava3.core.Observable<any>;
                    public zipWith(other: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public distinct(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public skipUntil(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, emitLast: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public throttleLast(intervalDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromCompletionStage(stage: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Observable<any>;
                    public ambWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayErrors: boolean, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public repeat(): io.reactivex.rxjava3.core.Observable<any>;
                    public takeUntil(stopPredicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public replay(bufferSize: number): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public onErrorResumeWith(fallback: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public onErrorResumeNext(fallbackSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, count: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public static concat(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeArray(maxConcurrency: number, bufferSize: number, sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public static range(start: number, count: number): io.reactivex.rxjava3.core.Observable<java.lang.Integer>;
                    public concatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public blockingSubscribe(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                    public delaySubscription(subscriptionIndicator: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public takeWhile(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, bufferSize: number): io.reactivex.rxjava3.core.Completable;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public delay(itemDelayIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toList(collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public skip(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public toSortedList(comparator: java.util.Comparator<any>, capacityHint: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public static concat(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatArrayEager(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public collectInto(initialItem: any, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
                    public all(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public toMap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, capacityHint: number): io.reactivex.rxjava3.core.Completable;
                    public withLatestFrom(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public toFuture(): java.util.concurrent.Future<any>;
                    public groupJoin(other: io.reactivex.rxjava3.core.ObservableSource<any>, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatArrayDelayError(source: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public test(dispose: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public static just(item1: any, item2: any): io.reactivex.rxjava3.core.Observable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number, restart: boolean): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public startWithItem(item: any): io.reactivex.rxjava3.core.Observable<any>;
                    public timeInterval(): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(firstTimeoutIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>, fallback: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromSingle(source: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingLatest(): java.lang.Iterable<any>;
                    public last(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public flatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public zipWith(other: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static concat(sources: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public blockingForEach(this_: io.reactivex.rxjava3.functions.Consumer<any>, onNext: number): void;
                    public blockingStream(): java.util.stream.Stream<any>;
                    public startWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(firstTimeoutIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concat(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public withLatestFrom(other: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public any(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromFuture(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public static zipArray(zipper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number, sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(count: number, skip: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doOnTerminate(onTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public window(count: number, skip: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public doOnDispose(onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public concatMapDelayError(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: boolean, tillTheEnd: number): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, fallback: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public retryWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleFirst(skipDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doAfterTerminate(onAfterTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public repeat(times: number): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(boundaryIndicator: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doOnSubscribe(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static intervalRange(start: number, count: number, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public replay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public to(converter: io.reactivex.rxjava3.core.ObservableConverter<any, any>): any;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, source7: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromPublisher(publisher: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doOnEach(onNotification: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toMap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static switchOnNext(sources: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public scan(initialValue: any, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatestDelayError(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public lastElement(): io.reactivex.rxjava3.core.Maybe<any>;
                    public static fromIterable(source: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number, tillTheEnd: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiConsumer<any, any>, disposeState: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public skip(count: number): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapEagerDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public forEachWhile(onNext: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public toFlowable(strategy: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public firstOrErrorStage(): java.util.concurrent.CompletionStage<any>;
                    public elementAtOrError(index: number): io.reactivex.rxjava3.core.Single<any>;
                    public switchMap(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: number): io.reactivex.rxjava3.core.Observable<any>;
                    public onErrorComplete(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(openingIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public contains(item: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public publish(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static switchOnNextDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public lift(lifter: io.reactivex.rxjava3.core.ObservableOperator<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static interval(period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public dematerialize(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public zipWith(other: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public static fromCompletable(completableSource: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEager(sources: io.reactivex.rxjava3.core.ObservableSource<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public take(count: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public onTerminateDetach(): io.reactivex.rxjava3.core.Observable<any>;
                    public distinctUntilChanged(comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatestArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleWithTimeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public debounce(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public doOnLifecycle(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, source7: io.reactivex.rxjava3.core.ObservableSource<any>, source8: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public withLatestFrom(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public takeLast(count: number): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingSingle(defaultItem: any): any;
                    public static concatEager(sources: java.lang.Iterable<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public toList(capacityHint: number): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public singleOrErrorStage(): java.util.concurrent.CompletionStage<any>;
                    public concatMapEager(mapper: io.reactivex.rxjava3.functions.Function<any, any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static merge(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public reduceWith(seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, source7: io.reactivex.rxjava3.core.ObservableSource<any>, source8: io.reactivex.rxjava3.core.ObservableSource<any>, source9: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public safeSubscribe(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                    public buffer(boundaryIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, initialCapacity: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static merge(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doOnEach(observer: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingStream(capacityHint: number): java.util.stream.Stream<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, count: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public static error(throwable: java.lang.Throwable): io.reactivex.rxjava3.core.Observable<any>;
                    public distinct(): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleWithTimeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatest(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromSupplier(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static generate(generator: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMap(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: number): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toMap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, mapSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public concatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public window(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public static merge(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, item8: any, item9: any): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(count: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public cache(): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public defaultIfEmpty(defaultItem: any): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingSubscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): void;
                    public static combineLatest(sources: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, disposeState: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public onErrorComplete(): io.reactivex.rxjava3.core.Observable<any>;
                    public firstStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>, restartTimerOnMaxSize: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public retry(times: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Completable;
                    public unsubscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public join(other: io.reactivex.rxjava3.core.ObservableSource<any>, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public static concatEagerDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public singleElement(): io.reactivex.rxjava3.core.Maybe<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMapSingle(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingFirst(defaultItem: any): any;
                    public switchMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public cacheWithInitialCapacity(initialCapacity: number): io.reactivex.rxjava3.core.Observable<any>;
                    public singleOrError(): io.reactivex.rxjava3.core.Single<any>;
                    public throttleLatest(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public takeLast(count: number, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, fallback: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleLast(intervalDuration: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any): io.reactivex.rxjava3.core.Observable<any>;
                    public doOnError(onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static ambArray(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public takeUntil(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static just(item1: any, item2: any, item3: any): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public static generate(initialState: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public cast(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public window(boundaryIndicator: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingIterable(capacityHint: number): java.lang.Iterable<any>;
                    public collect(collector: java.util.stream.Collector): io.reactivex.rxjava3.core.Single<any>;
                    public subscribeWith(observer: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public flatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingLast(defaultItem: any): any;
                    public static combineLatestArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static rangeLong(start: number, count: number): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static empty(): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public startWithArray(items: androidNative.Array<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static interval(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                    public scanWith(seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingLast(): any;
                    public blockingIterable(): java.lang.Iterable<any>;
                    public buffer(timespan: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public retry(times: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, source7: io.reactivex.rxjava3.core.ObservableSource<any>, source8: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, source6: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleFirst(windowDuration: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public timestamp(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public serialize(): io.reactivex.rxjava3.core.Observable<any>;
                    public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public withLatestFrom(others: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatestArray(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public sample(sampler: io.reactivex.rxjava3.core.ObservableSource<any>, emitLast: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public sorted(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toSortedList(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public buffer(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public take(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public elementAt(index: number, defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public static fromMaybe(maybe: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapEager(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doFinally(onFinally: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, source5: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static zip(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayErrors: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, count: number, restart: boolean): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public compose(composer: io.reactivex.rxjava3.core.ObservableTransformer<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public toMultimap(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public window(timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public doOnComplete(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(onNextMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public startWithIterable(items: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public debounce(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Observable<any>;
                    public forEach(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public switchMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public timestamp(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public zipWith(other: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static switchOnNextDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(openingIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public timeInterval(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public delay(subscriptionIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, itemDelayIndicator: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public ofType(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public hide(): io.reactivex.rxjava3.core.Observable<any>;
                    public toList(): io.reactivex.rxjava3.core.Single<java.util.List<any>>;
                    public blockingMostRecent(initialItem: any): java.lang.Iterable<any>;
                    public sample(sampler: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static error(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public lastOrError(): io.reactivex.rxjava3.core.Single<any>;
                    public static concatArray(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapCompletableDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEagerDelayError(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public collect(initialItemSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public replay(bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>, fallback: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, zipper: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMapSingleDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(count: number): io.reactivex.rxjava3.core.Observable<java.util.List<any>>;
                    public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public retryUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Observable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: boolean, delayErrors: number, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public debounce(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeArrayDelayError(maxConcurrency: number, bufferSize: number, sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public take(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingForEach(onNext: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public timeInterval(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static wrap(source: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public window(count: number, skip: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, isEqual: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public window(timespan: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, count: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doAfterNext(onAfterNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static combineLatest(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, source4: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatArrayEagerDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public count(): io.reactivex.rxjava3.core.Single<java.lang.Long>;
                    public skipLast(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public static switchOnNext(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public firstElement(): io.reactivex.rxjava3.core.Maybe<any>;
                    public timeInterval(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public window(count: number): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.core.Observable<any>>;
                    public static merge(sources: java.lang.Iterable<any>, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number): io.reactivex.rxjava3.core.Single<any>;
                    public retry(): io.reactivex.rxjava3.core.Observable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, delayErrors: boolean, maxConcurrency: number): io.reactivex.rxjava3.core.Observable<any>;
                    public reduce(reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public groupBy(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public doOnNext(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public blockingNext(): java.lang.Iterable<any>;
                    public static just(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, item8: any, item9: any, item10: any): io.reactivex.rxjava3.core.Observable<any>;
                    public scan(accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static fromOptional(optional: java.util.Optional): io.reactivex.rxjava3.core.Observable<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public repeatWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleWithTimeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public replay(selector: io.reactivex.rxjava3.functions.Function<any, any>, time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(npe: io.reactivex.rxjava3.core.Observer<any>): void;
                    public takeLast(count: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public single(defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public static defer(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMapDelayError(this_: io.reactivex.rxjava3.functions.Function<any, any>, mapper: number): io.reactivex.rxjava3.core.Observable<any>;
                    public publish(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public static concatEager(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public throttleFirst(skipDuration: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public takeLast(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public ignoreElements(): io.reactivex.rxjava3.core.Completable;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit, emitLast: boolean): io.reactivex.rxjava3.core.Observable<any>;
                    public skipWhile(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public skip(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public timestamp(): io.reactivex.rxjava3.core.Observable<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public singleStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public lastOrErrorStage(): java.util.concurrent.CompletionStage<any>;
                    public static never(): io.reactivex.rxjava3.core.Observable<any>;
                    public isEmpty(): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public flatMap(onNextMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public reduce(seed: any, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public lastStage(defaultItem: any): java.util.concurrent.CompletionStage<any>;
                    public withLatestFrom(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static amb(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public sample(period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public switchMapMaybeDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEager(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public distinctUntilChanged(): io.reactivex.rxjava3.core.Observable<any>;
                    public buffer(boundaryIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.ObservableSource<any>, source2: io.reactivex.rxjava3.core.ObservableSource<any>, source3: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public concatMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean, bufferSize: number, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public distinctUntilChanged(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public window(boundaryIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number): io.reactivex.rxjava3.core.Observable<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class ObservableConverter<T, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableConverter<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Observable<T>): R;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Observable<T>): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class ObservableEmitter<T> extends io.reactivex.rxjava3.core.Emitter<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableEmitter<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                        isDisposed(): boolean;
                        serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
                        tryOnError(param0: java.lang.Throwable): boolean;
                        onNext(param0: any): void;
                        onError(param0: java.lang.Throwable): void;
                        onComplete(): void;
                    });
                    public constructor();
                    public serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
                    public isDisposed(): boolean;
                    public tryOnError(param0: java.lang.Throwable): boolean;
                    public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                    public onComplete(): void;
                    public onError(param0: java.lang.Throwable): void;
                    public onNext(param0: any): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class ObservableOnSubscribe<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableOnSubscribe<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.ObservableEmitter<T>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.ObservableEmitter<T>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class ObservableOperator<Downstream, Upstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableOperator<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class ObservableSource<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableSource<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class ObservableTransformer<Upstream, Downstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.ObservableTransformer<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.ObservableTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Observable<Upstream>): io.reactivex.rxjava3.core.ObservableSource<Downstream>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Observable<Upstream>): io.reactivex.rxjava3.core.ObservableSource<Downstream>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class Observer<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Observer<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.Observer<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        onNext(param0: T): void;
                        onError(param0: java.lang.Throwable): void;
                        onComplete(): void;
                    });
                    public constructor();
                    public onComplete(): void;
                    public onNext(param0: T): void;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export abstract class Scheduler {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler>;
                    public now(unit: java.util.concurrent.TimeUnit): number;
                    public shutdown(): void;
                    public when(combine: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Scheduler;
                    public constructor();
                    public schedulePeriodicallyDirect(run: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                    public static clockDriftTolerance(): number;
                    public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                    public start(): void;
                    public scheduleDirect(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                    public scheduleDirect(run: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                }
                export module Scheduler {
                    export class DisposeTask implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection {
                        public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.DisposeTask>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public run(): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public getWrappedRunnable(): java.lang.Runnable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export class PeriodicDirectTask implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection {
                        public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.PeriodicDirectTask>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public run(): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public getWrappedRunnable(): java.lang.Runnable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export abstract class Worker extends io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.Worker>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public now(unit: java.util.concurrent.TimeUnit): number;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public schedulePeriodically(run: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module Worker {
                        export class PeriodicTask extends io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection {
                            public static class: java.lang.Class<io.reactivex.rxjava3.core.Scheduler.Worker.PeriodicTask>;
                            public getWrappedRunnable(): java.lang.Runnable;
                            public run(): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export abstract class Single<T> extends io.reactivex.rxjava3.core.SingleSource<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.Single<any>>;
                    public static just(item: any): io.reactivex.rxjava3.core.Single<any>;
                    public toFuture(): java.util.concurrent.Future<any>;
                    public static fromSupplier(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
                    public static concatEagerDelayError(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public static never(): io.reactivex.rxjava3.core.Single<any>;
                    public blockingSubscribe(): void;
                    public retry(times: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<any>;
                    public test(dispose: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
                    public retryWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static concatEager(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static mergeArray(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static switchOnNextDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromCompletionStage(stage: java.util.concurrent.CompletionStage): io.reactivex.rxjava3.core.Single<any>;
                    public static concat(sources: org.reactivestreams.Publisher, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
                    public startWith(other: org.reactivestreams.Publisher<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public hide(): io.reactivex.rxjava3.core.Single<any>;
                    public static concatDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doAfterTerminate(onAfterTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
                    public toObservable(): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>, source5: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public retry(times: number): io.reactivex.rxjava3.core.Single<any>;
                    public startWith(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Flowable<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>, source5: io.reactivex.rxjava3.core.SingleSource<any>, source6: io.reactivex.rxjava3.core.SingleSource<any>, source7: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public doOnSuccess(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
                    public timeInterval(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public dematerialize(selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatArrayEagerDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, delayError: boolean): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public to(converter: io.reactivex.rxjava3.core.SingleConverter<any, any>): any;
                    public static merge(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public startWith(other: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, fallback: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
                    public zipWith(other: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public lift(lift: io.reactivex.rxjava3.core.SingleOperator<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public flatMap(onSuccessMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromPublisher(publisher: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
                    public flatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concat(sources: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnError(onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flatMapObservable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public flattenAsObservable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public materialize(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>>;
                    public static concat(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
                    public cache(): io.reactivex.rxjava3.core.Single<any>;
                    public timestamp(unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public toCompletionStage(): java.util.concurrent.CompletionStage<any>;
                    public timeInterval(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public delaySubscription(subscriptionIndicator: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static concatDelayError(sources: org.reactivestreams.Publisher, prefetch: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeatUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatArray(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeatWhen(handler: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public flattenStreamAsFlowable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromCallable(callable: java.util.concurrent.Callable<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromObservable(observable: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static create(source: io.reactivex.rxjava3.core.SingleOnSubscribe<any>): io.reactivex.rxjava3.core.Single<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public ignoreElement(): io.reactivex.rxjava3.core.Completable;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concatDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public safeSubscribe(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public startWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
                    public cast(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static mergeArrayDelayError(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public doOnTerminate(onTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<java.lang.Long>;
                    public static sequenceEqual(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public blockingSubscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public flattenStreamAsObservable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                    public takeUntil(other: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
                    public static mergeDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static error(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public delay(time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean): io.reactivex.rxjava3.core.Single<any>;
                    public takeUntil(other: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Single<any>;
                    public static concatEager(sources: java.lang.Iterable<any>, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(subscriptionIndicator: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Single<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public timestamp(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static error(throwable: java.lang.Throwable): io.reactivex.rxjava3.core.Single<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public subscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
                    public static concatArrayEager(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(subscriptionIndicator: io.reactivex.rxjava3.core.CompletableSource): io.reactivex.rxjava3.core.Single<any>;
                    public delaySubscription(subscriptionIndicator: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public onErrorComplete(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public doOnSubscribe(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                    public ambWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static concatEager(sources: org.reactivestreams.Publisher, maxConcurrency: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public doAfterSuccess(onAfterSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static zipArray(zipper: io.reactivex.rxjava3.functions.Function<any, any>, sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Single<any>;
                    public timeInterval(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public observeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
                    public onErrorResumeWith(fallback: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public contains(item: any, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public ofType(clazz: java.lang.Class<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static unsafeCreate(onSubscribe: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public contains(item: any): io.reactivex.rxjava3.core.Single<java.lang.Boolean>;
                    public timeInterval(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public static wrap(source: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public timestamp(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, fallback: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public mergeWith(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeWith(observer: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
                    public timestamp(): io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public onErrorReturnItem(item: any): io.reactivex.rxjava3.core.Single<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public retryUntil(stop: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.core.Single<any>;
                    public unsubscribeOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<any>;
                    public startWith(other: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public delaySubscription(time: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
                    public static merge(source: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public flatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public doOnEvent(onEvent: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>, source5: io.reactivex.rxjava3.core.SingleSource<any>, source6: io.reactivex.rxjava3.core.SingleSource<any>, source7: io.reactivex.rxjava3.core.SingleSource<any>, source8: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public blockingGet(): any;
                    public static ambArray(source: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>): io.reactivex.rxjava3.core.Single<any>;
                    public static fromMaybe(maybe: io.reactivex.rxjava3.core.MaybeSource<any>, defaultItem: any): io.reactivex.rxjava3.core.Single<any>;
                    public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public repeat(times: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public concatMapCompletable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Completable;
                    public static zip(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public flattenAsFlowable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public subscribeActual(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public static fromMaybe(maybe: io.reactivex.rxjava3.core.MaybeSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public blockingSubscribe(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public static using(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceCleanup: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean): io.reactivex.rxjava3.core.Single<any>;
                    public static mergeDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public toFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                    public onTerminateDetach(): io.reactivex.rxjava3.core.Single<any>;
                    public blockingSubscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public onErrorComplete(): io.reactivex.rxjava3.core.Maybe<any>;
                    public concatMapMaybe(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public flatMapPublisher(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEager(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static timer(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Single<java.lang.Long>;
                    public doOnDispose(onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
                    public static concat(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public compose(transformer: io.reactivex.rxjava3.core.SingleTransformer<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public toMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
                    public static concat(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public repeat(): io.reactivex.rxjava3.core.Flowable<any>;
                    public static amb(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static mergeDelayError(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concatEagerDelayError(sources: java.lang.Iterable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public onErrorResumeNext(fallbackSupplier: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public doFinally(onFinally: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
                    public doOnLifecycle(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Single<any>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public takeUntil(other: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static concatEagerDelayError(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public static concat(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static defer(supplier: io.reactivex.rxjava3.functions.Supplier<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static switchOnNext(sources: org.reactivestreams.Publisher): io.reactivex.rxjava3.core.Flowable<any>;
                    public retry(): io.reactivex.rxjava3.core.Single<any>;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>, source5: io.reactivex.rxjava3.core.SingleSource<any>, source6: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public retry(predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>): io.reactivex.rxjava3.core.Single<any>;
                    public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public timeout(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Single<any>;
                    public onErrorReturn(itemSupplier: io.reactivex.rxjava3.functions.Function<java.lang.Throwable, any>): io.reactivex.rxjava3.core.Single<any>;
                    public subscribe(npe: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public static zip(source1: io.reactivex.rxjava3.core.SingleSource<any>, source2: io.reactivex.rxjava3.core.SingleSource<any>, source3: io.reactivex.rxjava3.core.SingleSource<any>, source4: io.reactivex.rxjava3.core.SingleSource<any>, source5: io.reactivex.rxjava3.core.SingleSource<any>, source6: io.reactivex.rxjava3.core.SingleSource<any>, source7: io.reactivex.rxjava3.core.SingleSource<any>, source8: io.reactivex.rxjava3.core.SingleSource<any>, source9: io.reactivex.rxjava3.core.SingleSource<any>, zipper: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.core.Single<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleConverter<T, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleConverter<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Single<T>): R;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Single<T>): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleEmitter<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleEmitter<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleEmitter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSuccess(param0: T): void;
                        onError(param0: java.lang.Throwable): void;
                        setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                        isDisposed(): boolean;
                        tryOnError(param0: java.lang.Throwable): boolean;
                    });
                    public constructor();
                    public isDisposed(): boolean;
                    public tryOnError(param0: java.lang.Throwable): boolean;
                    public onSuccess(param0: T): void;
                    public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                    public onError(param0: java.lang.Throwable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleObserver<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleObserver<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        onSuccess(param0: T): void;
                        onError(param0: java.lang.Throwable): void;
                    });
                    public constructor();
                    public onSuccess(param0: T): void;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleOnSubscribe<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleOnSubscribe<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleOnSubscribe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.SingleEmitter<T>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.SingleEmitter<T>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleOperator<Downstream, Upstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleOperator<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleOperator<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleSource<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleSource<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    });
                    public constructor();
                    public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module core {
                export class SingleTransformer<Upstream, Downstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.core.SingleTransformer<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.core.SingleTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.core.Single<Upstream>): io.reactivex.rxjava3.core.SingleSource<Downstream>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.core.Single<Upstream>): io.reactivex.rxjava3.core.SingleSource<Downstream>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class ActionDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<io.reactivex.rxjava3.functions.Action> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.ActionDisposable>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public toString(): string;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public onDisposed(param0: any): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onDisposed(this_: io.reactivex.rxjava3.functions.Action): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class AutoCloseableDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<java.lang.AutoCloseable> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.AutoCloseableDisposable>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onDisposed(this_: java.lang.AutoCloseable): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public toString(): string;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public onDisposed(param0: any): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class CompositeDisposable implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.disposables.DisposableContainer {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.CompositeDisposable>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public remove(disposable: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public delete(this_: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public dispose(): void;
                    public constructor(this_: java.lang.Iterable<any>);
                    public size(): number;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public add(this_: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public isDisposed(): boolean;
                    public constructor(this_: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>);
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public clear(): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public addAll(set: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>): boolean;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class Disposable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.Disposable>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.disposables.Disposable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        dispose(): void;
                        isDisposed(): boolean;
                        fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        empty(): io.reactivex.rxjava3.disposables.Disposable;
                        disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    });
                    public constructor();
                    public isDisposed(): boolean;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class DisposableContainer {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.DisposableContainer>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.disposables.DisposableContainer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    });
                    public constructor();
                    public delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class FutureDisposable extends java.util.concurrent.atomic.AtomicReference<java.util.concurrent.Future<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.FutureDisposable>;
                    public isDisposed(): boolean;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export abstract class ReferenceDisposable<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.disposables.Disposable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.ReferenceDisposable<any>>;
                    public isDisposed(): boolean;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onDisposed(param0: any): void;
                    public dispose(): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class RunnableDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<java.lang.Runnable> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.RunnableDisposable>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onDisposed(value: java.lang.Runnable): void;
                    public dispose(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public toString(): string;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public onDisposed(param0: any): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class SerialDisposable extends io.reactivex.rxjava3.disposables.Disposable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.SerialDisposable>;
                    public replace(next: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public get(): io.reactivex.rxjava3.disposables.Disposable;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public constructor(initialDisposable: io.reactivex.rxjava3.disposables.Disposable);
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public set(next: io.reactivex.rxjava3.disposables.Disposable): boolean;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module disposables {
                export class SubscriptionDisposable extends io.reactivex.rxjava3.disposables.ReferenceDisposable<org.reactivestreams.Subscription> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.disposables.SubscriptionDisposable>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onDisposed(value: org.reactivestreams.Subscription): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public onDisposed(param0: any): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class CompositeException {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException>;
                    public getExceptions(): java.util.List<java.lang.Throwable>;
                    public constructor(this_: java.lang.Iterable<any>);
                    public getMessage(): string;
                    public printStackTrace(s: java.io.PrintWriter): void;
                    public size(): number;
                    public constructor(exceptions: androidNative.Array<java.lang.Throwable>);
                    public getCause(): java.lang.Throwable;
                    public printStackTrace(s: java.io.PrintStream): void;
                    public printStackTrace(): void;
                }
                export module CompositeException {
                    export class ExceptionOverview {
                        public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.ExceptionOverview>;
                        public fillInStackTrace(): java.lang.Throwable;
                    }
                    export abstract class PrintStreamOrWriter {
                        public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.PrintStreamOrWriter>;
                    }
                    export class WrappedPrintStream extends io.reactivex.rxjava3.exceptions.CompositeException.PrintStreamOrWriter {
                        public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream>;
                    }
                    export class WrappedPrintWriter extends io.reactivex.rxjava3.exceptions.CompositeException.PrintStreamOrWriter {
                        public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintWriter>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class Exceptions {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.Exceptions>;
                    public static throwIfFatal(t: java.lang.Throwable): void;
                    public static propagate(t: java.lang.Throwable): java.lang.RuntimeException;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class MissingBackpressureException {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.MissingBackpressureException>;
                    public static DEFAULT_MESSAGE: string = "Could not emit value due to lack of requests";
                    public constructor(message: string);
                    public static createDefault(): io.reactivex.rxjava3.exceptions.MissingBackpressureException;
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class OnErrorNotImplementedException {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.OnErrorNotImplementedException>;
                    public constructor(message: string, e: java.lang.Throwable);
                    public constructor(e: java.lang.Throwable);
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class ProtocolViolationException {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.ProtocolViolationException>;
                    public constructor(message: string);
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class QueueOverflowException {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.QueueOverflowException>;
                    public constructor(message: string);
                    public constructor();
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module exceptions {
                export class UndeliverableException {
                    public static class: java.lang.Class<io.reactivex.rxjava3.exceptions.UndeliverableException>;
                    public constructor(cause: java.lang.Throwable);
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module flowables {
                export abstract class ConnectableFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>>;
                    public reset(): void;
                    public refCount(subscriberCount: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public refCount(): io.reactivex.rxjava3.core.Flowable<any>;
                    public autoConnect(numberOfSubscribers: number, connection: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public refCount(subscriberCount: number, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public autoConnect(): io.reactivex.rxjava3.core.Flowable<any>;
                    public refCount(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                    public constructor();
                    public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public refCount(subscriberCount: number, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public autoConnect(numberOfSubscribers: number): io.reactivex.rxjava3.core.Flowable<any>;
                    public refCount(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Flowable<any>;
                    public connect(): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module flowables {
                export abstract class GroupedFlowable<K, T> extends io.reactivex.rxjava3.core.Flowable<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.flowables.GroupedFlowable<any, any>>;
                    public constructor();
                    public constructor(key: any);
                    public getKey(): any;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Action {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Action>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Action interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        run(): void;
                    });
                    public constructor();
                    public run(): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class BiConsumer<T1, T2> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.BiConsumer<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.BiConsumer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        accept(param0: T1, param1: T2): void;
                    });
                    public constructor();
                    public accept(param0: T1, param1: T2): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class BiFunction<T1, T2, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.BiFunction<any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.BiFunction<any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class BiPredicate<T1, T2> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.BiPredicate<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.BiPredicate<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        test(param0: T1, param1: T2): boolean;
                    });
                    public constructor();
                    public test(param0: T1, param1: T2): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class BooleanSupplier {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.BooleanSupplier>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.BooleanSupplier interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        getAsBoolean(): boolean;
                    });
                    public constructor();
                    public getAsBoolean(): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Cancellable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Cancellable>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Cancellable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        cancel(): void;
                    });
                    public constructor();
                    public cancel(): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Consumer<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Consumer<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Consumer<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        accept(param0: T): void;
                    });
                    public constructor();
                    public accept(param0: T): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function<T, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T): R;
                    });
                    public constructor();
                    public apply(param0: T): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function3<T1, T2, T3, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function3<any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function3<any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function4<T1, T2, T3, T4, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function4<any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3, param3: T4): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3, param3: T4): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function5<T1, T2, T3, T4, T5, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function5<any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function6<T1, T2, T3, T4, T5, T6, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function6<any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function7<T1, T2, T3, T4, T5, T6, T7, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function7<any,any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function8<any,any,any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Function9<any,any,any,any,any,any,any,any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8, param8: T9): R;
                    });
                    public constructor();
                    public apply(param0: T1, param1: T2, param2: T3, param3: T4, param4: T5, param5: T6, param6: T7, param7: T8, param8: T9): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class IntFunction<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.IntFunction<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.IntFunction<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: number): T;
                    });
                    public constructor();
                    public apply(param0: number): T;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class LongConsumer {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.LongConsumer>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.LongConsumer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        accept(param0: number): void;
                    });
                    public constructor();
                    public accept(param0: number): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Predicate<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Predicate<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Predicate<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        test(param0: T): boolean;
                    });
                    public constructor();
                    public test(param0: T): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module functions {
                export class Supplier<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.functions.Supplier<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.functions.Supplier<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        get(): T;
                    });
                    public constructor();
                    public get(): T;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module disposables {
                    export class ArrayCompositeDisposable extends java.util.concurrent.atomic.AtomicReferenceArray<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(capacity: number);
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public setResource(this_: number, index: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public replaceResource(this_: number, index: io.reactivex.rxjava3.disposables.Disposable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module disposables {
                    export class CancellableDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.functions.Cancellable> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.CancellableDisposable>;
                        public constructor(cancellable: io.reactivex.rxjava3.functions.Cancellable);
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module disposables {
                    export class DisposableHelper extends io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.DisposableHelper>;
                        public static DISPOSED: io.reactivex.rxjava3.internal.disposables.DisposableHelper;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static isDisposed(d: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static setOnce(field: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, d: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static dispose(field: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>): boolean;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.disposables.DisposableHelper>;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public static validate(current: io.reactivex.rxjava3.disposables.Disposable, next: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public dispose(): void;
                        public static replace(current: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, field: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static set(current: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, field: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static trySet(field: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, d: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.disposables.DisposableHelper;
                        public static reportDisposableSet(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module disposables {
                    export class EmptyDisposable extends io.reactivex.rxjava3.operators.QueueDisposable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.EmptyDisposable>;
                        public static INSTANCE: io.reactivex.rxjava3.internal.disposables.EmptyDisposable;
                        public static NEVER: io.reactivex.rxjava3.internal.disposables.EmptyDisposable;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public static error(e: java.lang.Throwable, observer: io.reactivex.rxjava3.core.Observer<any>): void;
                        public poll(): any;
                        public offer(value: any): boolean;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public offer(param0: any, param1: any): boolean;
                        public isEmpty(): boolean;
                        public static complete(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.disposables.EmptyDisposable>;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static complete(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.disposables.EmptyDisposable;
                        public static error(e: java.lang.Throwable, observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public static error(e: java.lang.Throwable, observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                        public requestFusion(mode: number): number;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public offer(param0: any): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public clear(): void;
                        public static error(e: java.lang.Throwable, observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public static complete(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module disposables {
                    export class ListCompositeDisposable implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.disposables.DisposableContainer {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public constructor(this_: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>);
                        public remove(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public constructor(this_: java.lang.Iterable<any>);
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public delete(this_: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public add(this_: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public delete(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public add(param0: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public addAll(set: androidNative.Array<io.reactivex.rxjava3.disposables.Disposable>): boolean;
                        public clear(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public remove(d: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module disposables {
                    export class SequentialDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.disposables.SequentialDisposable>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(initial: io.reactivex.rxjava3.disposables.Disposable);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public update(next: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public replace(next: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module functions {
                    export class Functions {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions>;
                        public static EMPTY_RUNNABLE: java.lang.Runnable;
                        public static EMPTY_ACTION: io.reactivex.rxjava3.functions.Action;
                        public static ERROR_CONSUMER: io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable>;
                        public static ON_ERROR_MISSING: io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable>;
                        public static EMPTY_LONG_CONSUMER: io.reactivex.rxjava3.functions.LongConsumer;
                        public static REQUEST_MAX: io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription>;
                        public static toMultimapKeyValueSelector(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, collectionFactory: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.BiConsumer<any, any>;
                        public static notificationOnNext(onNotification: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
                        public static identity(): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static actionConsumer(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.functions.Consumer<any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function7<any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static alwaysTrue(): io.reactivex.rxjava3.functions.Predicate<any>;
                        public static justSupplier(value: any): io.reactivex.rxjava3.functions.Supplier<any>;
                        public static isInstanceOf(clazz: java.lang.Class<any>): io.reactivex.rxjava3.functions.Predicate<any>;
                        public static predicateReverseFor(supplier: io.reactivex.rxjava3.functions.BooleanSupplier): io.reactivex.rxjava3.functions.Predicate<any>;
                        public static boundedConsumer(bufferSize: number): io.reactivex.rxjava3.functions.Consumer<any>;
                        public static createArrayList(capacity: number): io.reactivex.rxjava3.functions.Supplier<any>;
                        public static justCallable(value: any): java.util.concurrent.Callable<any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function8<any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function9<any, any, any, any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static justFunction(value: any): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function3<any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static nullSupplier(): io.reactivex.rxjava3.functions.Supplier<any>;
                        public static notificationOnComplete(onNotification: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.Action;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function4<any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static equalsWith(value: any): io.reactivex.rxjava3.functions.Predicate<any>;
                        public static futureAction(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.functions.Action;
                        public static notificationOnError(onNotification: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
                        public static naturalComparator(): java.util.Comparator<any>;
                        public static listSorter(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static createHashSet(): io.reactivex.rxjava3.functions.Supplier<any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function5<any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static toMapKeyValueSelector(keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.BiConsumer<any, any>;
                        public static alwaysFalse(): io.reactivex.rxjava3.functions.Predicate<any>;
                        public static castFunction(target: java.lang.Class<any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static timestampWith(unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static emptyConsumer(): io.reactivex.rxjava3.functions.Consumer<any>;
                        public static toMapKeySelector(keySelector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.BiConsumer<any, any>;
                        public static toFunction(f: io.reactivex.rxjava3.functions.Function6<any, any, any, any, any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                    }
                    export module Functions {
                        export class ActionConsumer<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ActionConsumer<any>>;
                            public accept(t: any): void;
                            public accept(param0: any): void;
                        }
                        export class Array2Func<T1, T2, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array2Func<any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array3Func<T1, T2, T3, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array3Func<any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array4Func<T1, T2, T3, T4, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array4Func<any, any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array5Func<T1, T2, T3, T4, T5, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array5Func<any, any, any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array6Func<T1, T2, T3, T4, T5, T6, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array6Func<any, any, any, any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array7Func<T1, T2, T3, T4, T5, T6, T7, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array7Func<any, any, any, any, any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array8Func<T1, T2, T3, T4, T5, T6, T7, T8, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array8Func<any, any, any, any, any, any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class Array9Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> extends io.reactivex.rxjava3.functions.Function<androidNative.Array<any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Array9Func<any, any, any, any, any, any, any, any, any, any>>;
                            public apply(a: androidNative.Array<any>): any;
                            public apply(param0: any): any;
                        }
                        export class ArrayListCapacityCallable<T> extends io.reactivex.rxjava3.functions.Supplier<java.util.List<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ArrayListCapacityCallable<any>>;
                            public get(): any;
                            public get(): java.util.List<any>;
                        }
                        export class BooleanSupplierPredicateReverse<T> extends io.reactivex.rxjava3.functions.Predicate<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.BooleanSupplierPredicateReverse<any>>;
                            public test(param0: any): boolean;
                            public test(t: any): boolean;
                        }
                        export class BoundedConsumer extends io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.BoundedConsumer>;
                            public accept(s: org.reactivestreams.Subscription): void;
                            public accept(param0: any): void;
                        }
                        export class CastToClass<T, U> extends io.reactivex.rxjava3.functions.Function<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.CastToClass<any, any>>;
                            public apply(t: any): any;
                            public apply(param0: any): any;
                        }
                        export class ClassFilter<T, U> extends io.reactivex.rxjava3.functions.Predicate<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ClassFilter<any, any>>;
                            public test(param0: any): boolean;
                            public test(t: any): boolean;
                        }
                        export class EmptyAction extends io.reactivex.rxjava3.functions.Action {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyAction>;
                            public toString(): string;
                            public run(): void;
                        }
                        export class EmptyConsumer extends io.reactivex.rxjava3.functions.Consumer<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer>;
                            public accept(param0: any): void;
                            public toString(): string;
                            public accept(v: any): void;
                        }
                        export class EmptyLongConsumer extends io.reactivex.rxjava3.functions.LongConsumer {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer>;
                            public accept(v: number): void;
                            public accept(param0: number): void;
                        }
                        export class EmptyRunnable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EmptyRunnable>;
                            public toString(): string;
                            public run(): void;
                        }
                        export class EqualsPredicate<T> extends io.reactivex.rxjava3.functions.Predicate<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.EqualsPredicate<any>>;
                            public test(param0: any): boolean;
                            public test(t: any): boolean;
                        }
                        export class ErrorConsumer extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ErrorConsumer>;
                            public accept(error: java.lang.Throwable): void;
                            public accept(param0: any): void;
                        }
                        export class FalsePredicate extends io.reactivex.rxjava3.functions.Predicate<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.FalsePredicate>;
                            public test(o: any): boolean;
                            public test(param0: any): boolean;
                        }
                        export class FutureAction extends io.reactivex.rxjava3.functions.Action {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.FutureAction>;
                            public run(): void;
                        }
                        export class HashSetSupplier extends io.reactivex.rxjava3.functions.Supplier<java.util.Set<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier>;
                            public static INSTANCE: io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier;
                            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier>;
                            public get(): any;
                            public static valueOf(name: string): io.reactivex.rxjava3.internal.functions.Functions.HashSetSupplier;
                            public get(): java.util.Set<any>;
                        }
                        export class Identity extends io.reactivex.rxjava3.functions.Function<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.Identity>;
                            public toString(): string;
                            public apply(param0: any): any;
                            public apply(v: any): any;
                        }
                        export class JustValue<T, U> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.JustValue<any, any>>;
                            public get(): U;
                            public apply(t: T): U;
                            public get(): T;
                            public call(): U;
                            public apply(param0: T): any;
                        }
                        export class ListSorter<T> extends io.reactivex.rxjava3.functions.Function<java.util.List<any>, java.util.List<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ListSorter<any>>;
                            public apply(param0: any): any;
                            public apply(v: java.util.List<any>): java.util.List<any>;
                        }
                        export class MaxRequestSubscription extends io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.MaxRequestSubscription>;
                            public accept(t: org.reactivestreams.Subscription): void;
                            public accept(param0: any): void;
                        }
                        export class NaturalComparator extends java.util.Comparator<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator>;
                            public static INSTANCE: io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator;
                            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator>;
                            public static valueOf(name: string): io.reactivex.rxjava3.internal.functions.Functions.NaturalComparator;
                            public compare(o1: any, o2: any): number;
                        }
                        export class NotificationOnComplete<T> extends io.reactivex.rxjava3.functions.Action {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NotificationOnComplete<any>>;
                            public run(): void;
                        }
                        export class NotificationOnError<T> extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError<any>>;
                            public accept(v: java.lang.Throwable): void;
                            public accept(param0: any): void;
                        }
                        export class NotificationOnNext<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NotificationOnNext<any>>;
                            public accept(param0: any): void;
                            public accept(v: any): void;
                        }
                        export class NullProvider extends io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.NullProvider>;
                            public get(): any;
                        }
                        export class OnErrorMissingConsumer extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer>;
                            public accept(error: java.lang.Throwable): void;
                            public accept(param0: any): void;
                        }
                        export class TimestampFunction<T> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.schedulers.Timed<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.TimestampFunction<any>>;
                            public apply(t: any): io.reactivex.rxjava3.schedulers.Timed<any>;
                            public apply(param0: any): any;
                        }
                        export class ToMapKeySelector<K, T> extends io.reactivex.rxjava3.functions.BiConsumer<java.util.Map<any, any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector<any, any>>;
                            public accept(m: java.util.Map<any, any>, t: any): void;
                            public accept(param0: any, param1: any): void;
                        }
                        export class ToMapKeyValueSelector<K, V, T> extends io.reactivex.rxjava3.functions.BiConsumer<java.util.Map<any, any>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector<any, any, any>>;
                            public accept(m: java.util.Map<any, any>, t: any): void;
                            public accept(param0: any, param1: any): void;
                        }
                        export class ToMultimapKeyValueSelector<K, V, T> extends io.reactivex.rxjava3.functions.BiConsumer<java.util.Map<any, java.util.Collection<any>>, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.ToMultimapKeyValueSelector<any, any, any>>;
                            public accept(m: java.util.Map<any, java.util.Collection<any>>, t: any): void;
                            public accept(param0: any, param1: any): void;
                        }
                        export class TruePredicate extends io.reactivex.rxjava3.functions.Predicate<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.Functions.TruePredicate>;
                            public test(o: any): boolean;
                            public test(param0: any): boolean;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module functions {
                    export class ObjectHelper {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.ObjectHelper>;
                        public static verifyPositive(value: number, paramName: string): number;
                        public static equalsPredicate(): io.reactivex.rxjava3.functions.BiPredicate<any, any>;
                    }
                    export module ObjectHelper {
                        export class BiObjectPredicate extends io.reactivex.rxjava3.functions.BiPredicate<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.functions.ObjectHelper.BiObjectPredicate>;
                            public test(o1: any, o2: any): boolean;
                            public test(param0: any, param1: any): boolean;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export abstract class AbstractEmptyQueueFuseable<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any>>;
                        public request(n: number): void;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public requestFusion(mode: number): number;
                        public isDisposed(): boolean;
                        public offer(value: T): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(): void;
                        public requestFusion(param0: number): number;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public offer(param0: T, param1: T): boolean;
                        public dispose(): void;
                        public offer(param0: T): boolean;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public poll(): T;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public offer(v1: T, v2: T): boolean;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class CancellableQueueFuseable<T> extends io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable<any>>;
                        public constructor();
                        public isDisposed(): boolean;
                        public cancel(): void;
                        public dispose(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class FuseToFlowable<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<T>;
                        });
                        public constructor();
                        public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class FuseToMaybe<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.FuseToMaybe<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.FuseToMaybe<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<T>;
                        });
                        public constructor();
                        public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class FuseToObservable<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            fuseToObservable(): io.reactivex.rxjava3.core.Observable<T>;
                        });
                        public constructor();
                        public fuseToObservable(): io.reactivex.rxjava3.core.Observable<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class HasUpstreamCompletableSource {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            source(): io.reactivex.rxjava3.core.CompletableSource;
                        });
                        public constructor();
                        public source(): io.reactivex.rxjava3.core.CompletableSource;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class HasUpstreamMaybeSource<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            source(): io.reactivex.rxjava3.core.MaybeSource<T>;
                        });
                        public constructor();
                        public source(): io.reactivex.rxjava3.core.MaybeSource<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class HasUpstreamObservableSource<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            source(): io.reactivex.rxjava3.core.ObservableSource<T>;
                        });
                        public constructor();
                        public source(): io.reactivex.rxjava3.core.ObservableSource<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class HasUpstreamPublisher<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            source(): org.reactivestreams.Publisher<T>;
                        });
                        public constructor();
                        public source(): org.reactivestreams.Publisher<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module fuseable {
                    export class HasUpstreamSingleSource<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            source(): io.reactivex.rxjava3.core.SingleSource<T>;
                        });
                        public constructor();
                        public source(): io.reactivex.rxjava3.core.SingleSource<T>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class CompletableFromCompletionStage<T> extends io.reactivex.rxjava3.core.Completable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage<any>>;
                        public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                        public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                        public constructor(stage: java.util.concurrent.CompletionStage<any>);
                        public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module CompletableFromCompletionStage {
                        export class CompletionStageHandler<T> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage.CompletionStageHandler<any>>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public accept(item: T, error: java.lang.Throwable): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class CompletionStageConsumer<T> extends java.util.concurrent.CompletableFuture<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.CompletionStageConsumer<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public cancel(mayInterruptIfRunning: boolean): boolean;
                        public complete(value: any): boolean;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSuccess(param0: any): void;
                        public completeExceptionally(ex: java.lang.Throwable): boolean;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSuccess(t: any): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableCollectWithCollector<T, A, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector<any, any, any>>;
                        public constructor();
                        public subscribeActual(accumulator: org.reactivestreams.Subscriber<any>): void;
                        public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, collector: java.util.stream.Collector<any, any, any>);
                    }
                    export module FlowableCollectWithCollector {
                        export class CollectorSubscriber<T, A, R> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector.CollectorSubscriber<any, any, any>>;
                            public cancel(): void;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public onNext(this_: any): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableCollectWithCollectorSingle<T, A, R> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle<any, any, any>>;
                        public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                        public constructor();
                        public subscribeActual(accumulator: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, collector: java.util.stream.Collector<any, any, any>);
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module FlowableCollectWithCollectorSingle {
                        export class CollectorSingleObserver<T, A, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver<any, any, any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public onNext(this_: T): void;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableFirstStageSubscriber<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFirstStageSubscriber<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public onComplete(): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public afterSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableFlatMapStream<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream<any, any>>;
                        public constructor();
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(e: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number);
                        public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public static subscribe(downstream: org.reactivestreams.Subscriber, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): org.reactivestreams.Subscriber;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                    }
                    export module FlowableFlatMapStream {
                        export class FlatMapStreamSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream.FlatMapStreamSubscriber<any, any>>;
                            public cancel(): void;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public request(n: number): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public onSubscribe(m: org.reactivestreams.Subscription): void;
                            public onNext(t: any): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableFromCompletionStage<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage<any>>;
                        public constructor();
                        public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                        public constructor(stage: java.util.concurrent.CompletionStage<any>);
                    }
                    export module FlowableFromCompletionStage {
                        export class BiConsumerAtomicReference<T> extends java.util.concurrent.atomic.AtomicReference<any> implements any /* any<any,java.lang.Throwable>*/  {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.BiConsumerAtomicReference<any>>;
							public accept(t: any, u: java.lang.Throwable): void;
                        }
                        export class CompletionStageHandler<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements any /* any<any,java.lang.Throwable>*/ {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.CompletionStageHandler<any>>;
                            public cancel(): void;
                            public accept(item: any, error: java.lang.Throwable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableFromStream<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream<any>>;
                        public constructor();
                        public constructor(stream: java.util.stream.Stream<any>);
                        public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                        public static subscribeStream(iterator: org.reactivestreams.Subscriber, ex: java.util.stream.Stream): void;
                    }
                    export module FlowableFromStream {
                        export abstract class AbstractStreamSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements io.reactivex.rxjava3.operators.QueueSubscription<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription<any>>;
                            public cancel(): void;
                            public requestFusion(mode: number): number;
                            public request(n: number): void;
                            public offer(v1: any, v2: any): boolean;
                            public offer(value: any): boolean;
                            public offer(param0: any, param1: any): boolean;
                            public clear(): void;
                            public offer(param0: any): boolean;
                            public poll(): any;
                            public requestFusion(param0: number): number;
                            public isEmpty(): boolean;
                        }
                        export class StreamConditionalSubscription<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription<any>>;
                            public run(ex: number): void;
                        }
                        export class StreamSubscription<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamSubscription<any>>;
                            public run(ex: number): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableLastStageSubscriber<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableLastStageSubscriber<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public onComplete(): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public afterSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableMapOptional<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional<any, any>>;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
                        public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                    }
                    export module FlowableMapOptional {
                        export class MapOptionalConditionalSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber<any, any>>;
                            public requestFusion(mode: number): number;
                            public tryOnNext(ex: any): boolean;
                            public poll(): any;
                            public tryOnNext(param0: any): boolean;
                            public onNext(t: any): void;
                        }
                        export class MapOptionalSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> implements io.reactivex.rxjava3.operators.ConditionalSubscriber<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalSubscriber<any, any>>;
                            public requestFusion(mode: number): number;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public tryOnNext(ex: any): boolean;
                            public poll(): any;
                            public tryOnNext(param0: any): boolean;
                            public onNext(t: any): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class FlowableSingleStageSubscriber<T> extends io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableSingleStageSubscriber<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public onComplete(): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public afterSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export abstract class FlowableStageSubscriber<T> extends java.util.concurrent.CompletableFuture<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber<any>>;
                        public cancel(mayInterruptIfRunning: boolean): boolean;
                        public complete(value: any): boolean;
                        public completeExceptionally(ex: java.lang.Throwable): boolean;
                        public afterSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public clear(): void;
                        public cancelUpstream(): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class MaybeFlattenStreamAsFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable<any, any>>;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.core.Maybe<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                    }
                    export module MaybeFlattenStreamAsFlowable {
                        export class FlattenStreamMultiObserver<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable.FlattenStreamMultiObserver<any, any>>;
                            public cancel(): void;
                            public onSuccess(iterator: any): void;
                            public onComplete(): void;
                            public requestFusion(mode: number): number;
                            public request(n: number): void;
                            public clear(): void;
                            public poll(): any;
                            public onError(param0: java.lang.Throwable): void;
                            public onSuccess(param0: any): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public isEmpty(): boolean;
                            public onError(e: java.lang.Throwable): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class MaybeFlattenStreamAsObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable<any, any>>;
                        public subscribeActual(s: io.reactivex.rxjava3.core.Observer<any>): void;
                        public constructor();
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public constructor(source: io.reactivex.rxjava3.core.Maybe<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module MaybeFlattenStreamAsObservable {
                        export class FlattenStreamMultiObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver<any, any>>;
                            public onSuccess(iterator: any): void;
                            public onComplete(): void;
                            public requestFusion(mode: number): number;
                            public dispose(): void;
                            public clear(): void;
                            public isDisposed(): boolean;
                            public poll(): any;
                            public onError(param0: java.lang.Throwable): void;
                            public onSuccess(param0: any): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public isEmpty(): boolean;
                            public onError(e: java.lang.Throwable): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class MaybeFromCompletionStage<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage<any>>;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public constructor();
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(stage: java.util.concurrent.CompletionStage<any>);
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module MaybeFromCompletionStage {
                        export class CompletionStageHandler<T> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage.CompletionStageHandler<any>>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public accept(item: T, error: java.lang.Throwable): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class MaybeMapOptional<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional<any, any>>;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public constructor();
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(source: io.reactivex.rxjava3.core.Maybe<any>, mapper: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
                        public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module MaybeMapOptional {
                        export class MapOptionalMaybeObserver<T, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional.MapOptionalMaybeObserver<any, any>>;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSuccess(ex: T): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public onSuccess(param0: T): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(e: java.lang.Throwable): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableCollectWithCollector<T, A, R> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector<any, any, any>>;
                        public constructor();
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribeActual(accumulator: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(source: io.reactivex.rxjava3.core.Observable<any>, collector: java.util.stream.Collector<any, any, any>);
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ObservableCollectWithCollector {
                        export class CollectorObserver<T, A, R> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector.CollectorObserver<any, any, any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public onNext(param0: any): void;
                            public onError(param0: java.lang.Throwable): void;
                            public dispose(): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public onNext(this_: any): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableCollectWithCollectorSingle<T, A, R> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle<any, any, any>>;
                        public constructor();
                        public subscribeActual(accumulator: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(source: io.reactivex.rxjava3.core.Observable<any>, collector: java.util.stream.Collector<any, any, any>);
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ObservableCollectWithCollectorSingle {
                        export class CollectorSingleObserver<T, A, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver<any, any, any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public onNext(param0: T): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public onNext(this_: T): void;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableFirstStageObserver<T> extends io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFirstStageObserver<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableFlatMapStream<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream<any, any>>;
                        public constructor();
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                    }
                    export module ObservableFlatMapStream {
                        export class FlatMapStreamObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream.FlatMapStreamObserver<any, any>>;
                            public onNext(it: any): void;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onNext(param0: any): void;
                            public onError(param0: java.lang.Throwable): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(e: java.lang.Throwable): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableFromCompletionStage<T> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage<any>>;
                        public constructor();
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(stage: java.util.concurrent.CompletionStage<any>);
                    }
                    export module ObservableFromCompletionStage {
                        export class BiConsumerAtomicReference<T> extends java.util.concurrent.atomic.AtomicReference<any> implements any /* any<any,java.lang.Throwable>*/  {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference<any>>;
							public accept(t: any, u: java.lang.Throwable): void;
                        }
                        export class CompletionStageHandler<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements any /* any<any,java.lang.Throwable>*/ {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.CompletionStageHandler<any>>;
                            public accept(item: any, error: java.lang.Throwable): void;
                            public dispose(): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableFromStream<T> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromStream<any>>;
                        public static subscribeStream(iterator: io.reactivex.rxjava3.core.Observer<any>, ex: java.util.stream.Stream): void;
                        public constructor();
                        public constructor(stream: java.util.stream.Stream<any>);
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ObservableFromStream {
                        export class StreamDisposable<T> extends io.reactivex.rxjava3.operators.QueueDisposable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableFromStream.StreamDisposable<any>>;
                            public requestFusion(mode: number): number;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public offer(v1: any, v2: any): boolean;
                            public offer(param0: any, param1: any): boolean;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public clear(): void;
                            public isDisposed(): boolean;
                            public offer(param0: any): boolean;
                            public poll(): any;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public offer(value: any): boolean;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public requestFusion(param0: number): number;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public isEmpty(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public run(): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableLastStageObserver<T> extends io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableMapOptional<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional<any, any>>;
                        public constructor();
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ObservableMapOptional {
                        export class MapOptionalObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional.MapOptionalObserver<any, any>>;
                            public onNext(ex: any): void;
                            public requestFusion(mode: number): number;
                            public onNext(param0: any): void;
                            public onError(param0: java.lang.Throwable): void;
                            public onComplete(): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public poll(): any;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ObservableSingleStageObserver<T> extends io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver<any>>;
                        public constructor(hasDefault: boolean, defaultItem: any);
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export abstract class ObservableStageObserver<T> extends java.util.concurrent.CompletableFuture<any> implements io.reactivex.rxjava3.core.Observer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver<any>>;
                        public cancel(mayInterruptIfRunning: boolean): boolean;
                        public complete(value: any): boolean;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public completeExceptionally(ex: java.lang.Throwable): boolean;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onNext(param0: any): void;
                        public clear(): void;
                        public disposeUpstream(): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ParallelCollector<T, A, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector<any, any, any>>;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, collector: java.util.stream.Collector<any, any, any>);
                        public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                    }
                    export module ParallelCollector {
                        export class ParallelCollectorInnerSubscriber<T, A, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber<any, any, any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public onNext(this_: any): void;
                        }
                        export class ParallelCollectorSubscriber<T, A, R> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorSubscriber<any, any, any>>;
                            public cancel(): void;
                        }
                        export class SlotPair<T> extends java.util.concurrent.atomic.AtomicInteger {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelCollector.SlotPair<any>>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ParallelFlatMapStream<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream<any, any>>;
                        public subscribe(this_: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number);
                        public parallelism(): number;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ParallelMapOptional<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional<any, any>>;
                        public constructor();
                        public parallelism(): number;
                        public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
                    }
                    export module ParallelMapOptional {
                        export class ParallelMapConditionalSubscriber<T, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapConditionalSubscriber<any, any>>;
                            public cancel(): void;
                            public tryOnNext(param0: T): boolean;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public request(n: number): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public tryOnNext(ex: T): boolean;
                            public onNext(t: T): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        }
                        export class ParallelMapSubscriber<T, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber<any, any>>;
                            public cancel(): void;
                            public tryOnNext(param0: T): boolean;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public request(n: number): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public tryOnNext(ex: T): boolean;
                            public onNext(t: T): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class ParallelMapTryOptional<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional<any, any>>;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
                        public parallelism(): number;
                        public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                    }
                    export module ParallelMapTryOptional {
                        export class ParallelMapTryConditionalSubscriber<T, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTryConditionalSubscriber<any, any>>;
                            public cancel(): void;
                            public tryOnNext(param0: T): boolean;
                            public tryOnNext(h: T): boolean;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public request(n: number): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public onNext(t: T): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        }
                        export class ParallelMapTrySubscriber<T, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber<any, any>>;
                            public cancel(): void;
                            public tryOnNext(param0: T): boolean;
                            public tryOnNext(h: T): boolean;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public request(n: number): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public onNext(t: T): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class SingleFlattenStreamAsFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowable<any, any>>;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.core.Single<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class SingleFlattenStreamAsObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservable<any, any>>;
                        public subscribeActual(s: io.reactivex.rxjava3.core.Observer<any>): void;
                        public constructor();
                        public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(source: io.reactivex.rxjava3.core.Single<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class SingleFromCompletionStage<T> extends io.reactivex.rxjava3.core.Single<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage<any>>;
                        public constructor();
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(stage: java.util.concurrent.CompletionStage<any>);
                    }
                    export module SingleFromCompletionStage {
                        export class CompletionStageHandler<T> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler<any>>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public accept(item: T, error: java.lang.Throwable): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module jdk8 {
                    export class SingleMapOptional<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleMapOptional<any, any>>;
                        public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public constructor();
                        public constructor(source: io.reactivex.rxjava3.core.Single<any>, mapper: io.reactivex.rxjava3.functions.Function<any, java.util.Optional<any>>);
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module SingleMapOptional {
                        export class MapOptionalSingleObserver<T, R> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.jdk8.SingleMapOptional.MapOptionalSingleObserver<any, any>>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSuccess(ex: T): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public onSuccess(param0: T): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(e: java.lang.Throwable): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class AbstractDisposableAutoRelease extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class BasicFuseableObserver<T, R> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any>>;
                        public downstream: io.reactivex.rxjava3.core.Observer<any>;
                        public upstream: io.reactivex.rxjava3.disposables.Disposable;
                        public qd: io.reactivex.rxjava3.operators.QueueDisposable<T>;
                        public done: boolean;
                        public sourceMode: number;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public offer(e: R): boolean;
                        public offer(v1: R, v2: R): boolean;
                        public requestFusion(param0: number): number;
                        public offer(param0: T, param1: T): boolean;
                        public onError(param0: java.lang.Throwable): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public onComplete(): void;
                        public isEmpty(): boolean;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public transitiveBoundaryFusion(this_: number): number;
                        public onNext(param0: T): void;
                        public afterDownstream(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public beforeDownstream(): boolean;
                        public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public offer(param0: T): boolean;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onError(t: java.lang.Throwable): void;
                        public clear(): void;
                        public poll(): T;
                        public fail(t: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class BasicIntQueueDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.operators.QueueDisposable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public offer(param0: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public poll(): any;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public offer(param0: any, param1: any): boolean;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public offer(e: any): boolean;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class BasicQueueDisposable<T> extends io.reactivex.rxjava3.operators.QueueDisposable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public offer(param0: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public poll(): any;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public offer(param0: any, param1: any): boolean;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public offer(e: any): boolean;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class BiConsumerSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public constructor(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public onSuccess(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onSuccess(this_: any): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class BlockingBaseObserver<T> extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingBaseObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public blockingGet(): any;
                        public onNext(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class BlockingDisposableMultiObserver<T> extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public blockingConsume(v: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public onSuccess(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(e: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onSuccess(t: any): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public blockingConsume(this_: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public blockingConsume(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class BlockingFirstObserver<T> extends io.reactivex.rxjava3.internal.observers.BlockingBaseObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingFirstObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class BlockingLastObserver<T> extends io.reactivex.rxjava3.internal.observers.BlockingBaseObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingLastObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class BlockingMultiObserver<T> extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingMultiObserver<any>>;
                        public blockingConsume(ex: io.reactivex.rxjava3.functions.Consumer<any>, v: io.reactivex.rxjava3.functions.Consumer<any>, t: io.reactivex.rxjava3.functions.Action): void;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public onSuccess(param0: any): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(e: java.lang.Throwable): void;
                        public blockingGet(this_: any): any;
                        public onComplete(): void;
                        public blockingGet(): any;
                        public onSuccess(value: any): void;
                        public blockingAwait(this_: number, timeout: java.util.concurrent.TimeUnit): boolean;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class BlockingObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.BlockingObserver<any>>;
                        public static TERMINATED: any;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(queue: java.util.Queue<any>);
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class CallbackCompletableObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class ConsumerSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public onSuccess(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onSuccess(this_: any): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class DeferredScalarDisposable<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any>>;
                        public downstream: io.reactivex.rxjava3.core.Observer<any>;
                        public value: any;
                        public constructor();
                        public requestFusion(mode: number): number;
                        public complete(): void;
                        public isDisposed(): boolean;
                        public complete(value: any): void;
                        public poll(): any;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public tryDispose(): boolean;
                        public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                        public error(t: java.lang.Throwable): void;
                        public dispose(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class DeferredScalarObserver<T, R> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DeferredScalarObserver<any, any>>;
                        public upstream: io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onNext(param0: any): void;
                        public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class DisposableAutoReleaseMultiObserver<T> extends io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DisposableAutoReleaseMultiObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(composite: io.reactivex.rxjava3.disposables.DisposableContainer, onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                        public onSuccess(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onSuccess(this_: any): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class DisposableAutoReleaseObserver<T> extends io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease implements io.reactivex.rxjava3.core.Observer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DisposableAutoReleaseObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public onNext(this_: any): void;
                        public dispose(): void;
                        public constructor(composite: io.reactivex.rxjava3.disposables.DisposableContainer, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class DisposableLambdaObserver<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(actual: io.reactivex.rxjava3.core.Observer<any>, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onNext(t: T): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: T): void;
                        public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class EmptyCompletableObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.EmptyCompletableObserver>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(e: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class ForEachWhileObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.ForEachWhileObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onNext(ex: any): void;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(onNext: io.reactivex.rxjava3.functions.Predicate<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class FutureMultiObserver<T> extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.FutureMultiObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public isDisposed(): boolean;
                        public isCancelled(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(this_: boolean): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public get(): any;
                        public onError(param0: java.lang.Throwable): void;
                        public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public isDone(): boolean;
                        public onSuccess(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onSuccess(t: any): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class FutureObserver<T> extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.FutureObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public constructor();
                        public isDisposed(): boolean;
                        public isCancelled(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(this_: boolean): boolean;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public get(): any;
                        public onError(param0: java.lang.Throwable): void;
                        public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public isDone(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class InnerQueuedObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public setDone(): void;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public isDone(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public queue(): io.reactivex.rxjava3.operators.SimpleQueue<any>;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public constructor(parent: io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport<any>, prefetch: number);
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class InnerQueuedObserverSupport<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            innerNext(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: T): void;
                            innerError(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: java.lang.Throwable): void;
                            innerComplete(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>): void;
                            drain(): void;
                        });
                        public constructor();
                        public innerComplete(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>): void;
                        public drain(): void;
                        public innerError(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: java.lang.Throwable): void;
                        public innerNext(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<T>, param1: T): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class LambdaObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.LambdaObserver<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(param0: any): void;
                        public constructor(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(param0: java.lang.Throwable): void;
                        public onNext(this_: any): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export abstract class QueueDrainObserver<T, U, V> extends io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad2 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any>>;
                        public downstream: io.reactivex.rxjava3.core.Observer<any>;
                        public queue: io.reactivex.rxjava3.operators.SimplePlainQueue<any>;
                        public enter(): boolean;
                        public fastPathEmit(value: any, delayError: boolean, dispose: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public done(): boolean;
                        public leave(m: number): number;
                        public constructor(actual: io.reactivex.rxjava3.core.Observer<any>, queue: io.reactivex.rxjava3.operators.SimplePlainQueue<any>);
                        public onNext(param0: any): void;
                        public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                        public cancelled(): boolean;
                        public onError(param0: java.lang.Throwable): void;
                        public fastPathOrderedEmit(value: any, delayError: boolean, disposable: io.reactivex.rxjava3.disposables.Disposable): void;
                        public leave(param0: number): number;
                        public onComplete(): void;
                        public error(): java.lang.Throwable;
                        public accept(a: io.reactivex.rxjava3.core.Observer<any>, v: any): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class QueueDrainSubscriberPad0 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad0>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class QueueDrainSubscriberPad2 extends io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberWip {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad2>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class QueueDrainSubscriberWip extends io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberPad0 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.QueueDrainSubscriberWip>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class ResumeSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.ResumeSingleObserver<any>>;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSuccess(param0: any): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(e: java.lang.Throwable): void;
                        public constructor(parent: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, downstream: io.reactivex.rxjava3.core.SingleObserver<any>);
                        public onSuccess(value: any): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class SafeCompletableObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.SafeCompletableObserver>;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(this_: java.lang.Throwable): void;
                        public onComplete(): void;
                        public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(param0: java.lang.Throwable): void;
                        public constructor(downstream: io.reactivex.rxjava3.core.CompletableObserver);
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class SafeMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.SafeMaybeObserver<any>>;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSuccess(param0: any): void;
                        public onError(this_: java.lang.Throwable): void;
                        public constructor(downstream: io.reactivex.rxjava3.core.MaybeObserver<any>);
                        public onComplete(): void;
                        public onSuccess(this_: any): void;
                        public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module observers {
                    export class SafeSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.observers.SafeSingleObserver<any>>;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSuccess(param0: any): void;
                        public onError(this_: java.lang.Throwable): void;
                        public onSuccess(this_: any): void;
                        public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onError(param0: java.lang.Throwable): void;
                        public constructor(downstream: io.reactivex.rxjava3.core.SingleObserver<any>);
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableAmb extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAmb>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>, sourcesIterable: java.lang.Iterable<any>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(element: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableAmb {
                            export class Amb extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAmb.Amb>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableAndThenCompletable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, next: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableAndThenCompletable {
                            export class NextObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable.NextObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                            export class SourceObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable.SourceObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableCache extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.core.CompletableObserver {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCache>;
                            public constructor();
                            public onComplete(): void;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public onError(this_: java.lang.Throwable): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                        export module CompletableCache {
                            export class InnerCompletableCache implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCache.InnerCompletableCache>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableConcat extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcat>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(sources: org.reactivestreams.Publisher<any>, prefetch: number);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableConcat {
                            export class CompletableConcatSubscriber extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: io.reactivex.rxjava3.core.CompletableSource): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module CompletableConcatSubscriber {
                                export class ConcatInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.ConcatInnerObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableConcatArray extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableConcatArray {
                            export class ConcatInnerObserver implements io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray.ConcatInnerObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableConcatIterable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(e: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(sources: java.lang.Iterable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableConcatIterable {
                            export class ConcatInnerObserver implements io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableCreate extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCreate>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableOnSubscribe);
                        }
                        export module CompletableCreate {
                            export class Emitter extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter>;
                                public dispose(): void;
                                public toString(): string;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public tryOnError(this_: java.lang.Throwable): boolean;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableDefer extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDefer>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(completableSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(e: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableDelay extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDelay>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableDelay {
                            export class Delay extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDelay.Delay>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableDetach extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDetach>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableDetach {
                            export class DetachCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDetach.DetachCompletableObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableDisposeOn extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableDisposeOn {
                            export class DisposeOnObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn.DisposeOnObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableDoFinally extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, onFinally: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableDoFinally {
                            export class DoFinallyObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally.DoFinallyObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableDoOnEvent extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, onEvent: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableDoOnEvent {
                            export class DoOnEvent extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(this_: java.lang.Throwable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableEmpty extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableEmpty>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Completable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableError extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableError>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(error: java.lang.Throwable);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableErrorSupplier extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(e: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(errorSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromAction extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction>;
                            public constructor();
                            public constructor(run: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromCallable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallable>;
                            public constructor();
                            public constructor(callable: java.util.concurrent.Callable<any>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromObservable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable<any>>;
                            public constructor();
                            public constructor(observable: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableFromObservable {
                            export class CompletableFromObservableObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(value: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromPublisher<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher<any>>;
                            public constructor();
                            public constructor(flowable: org.reactivestreams.Publisher<any>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(downstream: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableFromPublisher {
                            export class FromPublisherSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher.FromPublisherSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromRunnable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnable>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(runnable: java.lang.Runnable);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromSingle<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(single: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableFromSingle {
                            export class CompletableFromSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle.CompletableFromSingleObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromSupplier extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableFromUnsafeSource extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableFromUnsafeSource>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableHide extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableHide>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableHide {
                            export class HideCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableLift extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableLift>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, onLift: io.reactivex.rxjava3.core.CompletableOperator);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableMaterialize<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMaterialize<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Completable);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableMerge extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMerge>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, maxConcurrency: number, delayErrors: boolean);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableMerge {
                            export class CompletableMergeSubscriber extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: io.reactivex.rxjava3.core.CompletableSource): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module CompletableMergeSubscriber {
                                export class MergeInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.MergeInnerObserver>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableMergeArray extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(c: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableMergeArray {
                            export class InnerCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray.InnerCompletableObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableMergeArrayDelayError extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.CompletableSource>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(c: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableMergeArrayDelayError {
                            export class MergeInnerCompletableObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.MergeInnerCompletableObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                            export class TryTerminateAndReportDisposable extends io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableMergeDelayErrorIterable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorIterable>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(e: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(sources: java.lang.Iterable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableMergeIterable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(e: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(sources: java.lang.Iterable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableMergeIterable {
                            export class MergeCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableNever extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableNever>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Completable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableObserveOn extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableObserveOn {
                            export class ObserveOnCompletableObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableOnErrorComplete extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module CompletableOnErrorComplete {
                            export class OnError extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete.OnError>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onComplete(): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableOnErrorReturn<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, valueSupplier: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableOnErrorReturn {
                            export class OnErrorReturnMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn.OnErrorReturnMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletablePeek extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletablePeek>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onTerminate: io.reactivex.rxjava3.functions.Action, onAfterTerminate: io.reactivex.rxjava3.functions.Action, onDispose: io.reactivex.rxjava3.functions.Action);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletablePeek {
                            export class CompletableObserverImplementation implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletablePeek.CompletableObserverImplementation>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(this_: java.lang.Throwable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableResumeNext extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, errorMapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableResumeNext {
                            export class ResumeNextObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext.ResumeNextObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableSubscribeOn extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableSubscribeOn {
                            export class SubscribeOnObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn.SubscribeOnObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableTakeUntilCompletable extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Completable, other: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableTakeUntilCompletable {
                            export class TakeUntilMainObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module TakeUntilMainObserver {
                                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableTimeout extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, other: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableTimeout {
                            export class DisposeTask {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.DisposeTask>;
                                public run(): void;
                            }
                            export module DisposeTask {
                                export class DisposeObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.DisposeTask.DisposeObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                            export class TimeOutObserver extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableTimer extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimer>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableTimer {
                            export class TimerDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableTimer.TimerDisposable>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableToFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableToObservable<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableToSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, completionValueSupplier: io.reactivex.rxjava3.functions.Supplier<any>, completionValue: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableToSingle {
                            export class ToSingle extends io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle.ToSingle>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module completable {
                        export class CompletableUsing<R> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableUsing<any>>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, completableFunction: io.reactivex.rxjava3.functions.Function<any, any>, disposer: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean);
                        }
                        export module CompletableUsing {
                            export class UsingObserver<R> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.completable.CompletableUsing.UsingObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onError(resource: java.lang.Throwable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export abstract class AbstractBackpressureThrottlingSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any>>;
                            public cancel(): void;
                            public onNext(param0: any): void;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public request(n: number): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export abstract class AbstractFlowableWithUpstream<T, R> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any>>;
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class BlockingFlowableIterable<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable<any>>;
                            public iterator(): java.util.Iterator<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, bufferSize: number);
                        }
                        export module BlockingFlowableIterable {
                            export class BlockingFlowableIterator<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable.BlockingFlowableIterator<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public next(): any;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public hasNext(): boolean;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public remove(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class BlockingFlowableLatest<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest<any>>;
                            public iterator(): java.util.Iterator<any>;
                            public constructor(source: org.reactivestreams.Publisher<any>);
                        }
                        export module BlockingFlowableLatest {
                            export class LatestSubscriberIterator<T> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<io.reactivex.rxjava3.core.Notification<any>> implements java.util.Iterator<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest.LatestSubscriberIterator<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(args: io.reactivex.rxjava3.core.Notification<any>): void;
                                public next(): any;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public hasNext(): boolean;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public remove(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class BlockingFlowableMostRecent<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent<any>>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, initialValue: any);
                            public iterator(): java.util.Iterator<any>;
                        }
                        export module BlockingFlowableMostRecent {
                            export class MostRecentSubscriber<T> extends io.reactivex.rxjava3.subscribers.DefaultSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(e: java.lang.Throwable): void;
                                public onNext(args: any): void;
                                public onComplete(): void;
                                public getIterable(): io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber.Iterator;
                            }
                            export module MostRecentSubscriber {
                                export class Iterator extends java.util.Iterator<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber.Iterator>;
                                    public hasNext(): boolean;
                                    public remove(): void;
                                    public next(): any;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class BlockingFlowableNext<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext<any>>;
                            public iterator(): java.util.Iterator<any>;
                            public constructor(source: org.reactivestreams.Publisher<any>);
                        }
                        export module BlockingFlowableNext {
                            export class NextIterator<T> extends java.util.Iterator<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextIterator<any>>;
                                public next(): any;
                                public hasNext(): boolean;
                                public remove(): void;
                            }
                            export class NextSubscriber<T> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<io.reactivex.rxjava3.core.Notification<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(toOffer: io.reactivex.rxjava3.core.Notification<any>): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public takeNext(): io.reactivex.rxjava3.core.Notification<any>;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableAll<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAll<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableAll {
                            export class AllSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAll.AllSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableAllSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Boolean>;
                        }
                        export module FlowableAllSingle {
                            export class AllSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle.AllSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableAmb<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb<any>>;
                            public constructor();
                            public constructor(sources: androidNative.Array<org.reactivestreams.Publisher<any>>, sourcesIterable: java.lang.Iterable<any>);
                            public subscribeActual(p: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableAmb {
                            export class AmbCoordinator<T> extends org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbCoordinator<any>>;
                                public cancel(): void;
                                public win(a: number): boolean;
                                public subscribe(i: androidNative.Array<org.reactivestreams.Publisher<any>>): void;
                                public request(w: number): void;
                            }
                            export class AmbInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbInnerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableAny<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAny<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableAny {
                            export class AnySubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAny.AnySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableAnySingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Boolean>;
                        }
                        export module FlowableAnySingle {
                            export class AnySubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle.AnySubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableAutoConnect<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect<any>>;
                            public constructor();
                            public subscribeActual(child: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>, numberOfSubscribers: number, connection: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableBlockingSubscribe {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingSubscribe>;
                            public static subscribe(source: org.reactivestreams.Publisher): void;
                            public static subscribe(v: org.reactivestreams.Publisher, e: org.reactivestreams.Subscriber): void;
                            public static subscribe(o: org.reactivestreams.Publisher, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): void;
                            public static subscribe(o: org.reactivestreams.Publisher, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, bufferSize: number): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableBuffer<T, C> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, size: number, skip: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                        export module FlowableBuffer {
                            export class PublisherBufferExactSubscriber<T, C> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(this_: T): void;
                                public request(n: number): void;
                            }
                            export class PublisherBufferOverlappingSubscriber<T, C> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferOverlappingSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(r: number): void;
                                public getAsBoolean(): boolean;
                            }
                            export class PublisherBufferSkipSubscriber<T, C> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferSkipSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public request(v: number): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableBufferBoundary<T, U, Open, Close> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary<any, any, any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, bufferOpen: org.reactivestreams.Publisher<any>, bufferClose: io.reactivex.rxjava3.functions.Function<any, any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                        export module FlowableBufferBoundary {
                            export class BufferBoundarySubscriber<T, C, Open, Close> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber<any, any, any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onNext(bufs: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module BufferBoundarySubscriber {
                                export class BufferOpenSubscriber<Open> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber.BufferOpenSubscriber<any>>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                            export class BufferCloseSubscriber<T, C> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferCloseSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableBufferExactBoundary<T, U, B> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary<any, any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, boundary: org.reactivestreams.Publisher<any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                        export module FlowableBufferExactBoundary {
                            export class BufferBoundarySubscriber<T, U, B> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferBoundarySubscriber<any, any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class BufferExactBoundarySubscriber<T, U, B> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferExactBoundarySubscriber<any, any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public accept(a: org.reactivestreams.Subscriber<any>, v: any): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public requested(): number;
                                public produced(param0: number): number;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(e: org.reactivestreams.Subscription): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public cancelled(): boolean;
                                public requested(n: number): void;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public cancel(): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public request(n: number): void;
                                public error(): java.lang.Throwable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableBufferTimed<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>, maxSize: number, restartTimerOnMaxSize: boolean);
                        }
                        export module FlowableBufferTimed {
                            export class BufferExactBoundedSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactBoundedSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public accept(a: org.reactivestreams.Subscriber<any>, v: any): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public requested(): number;
                                public produced(param0: number): number;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public onSubscribe(e: org.reactivestreams.Subscription): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public cancelled(): boolean;
                                public requested(n: number): void;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public cancel(): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public request(n: number): void;
                                public error(): java.lang.Throwable;
                            }
                            export class BufferExactUnboundedSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public accept(a: org.reactivestreams.Subscriber<any>, v: any): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public requested(): number;
                                public produced(param0: number): number;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public onSubscribe(e: org.reactivestreams.Subscription): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public cancelled(): boolean;
                                public requested(n: number): void;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public cancel(): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public request(n: number): void;
                                public error(): java.lang.Throwable;
                            }
                            export class BufferSkipBoundedSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public accept(a: org.reactivestreams.Subscriber<any>, v: any): boolean;
                                public cancelled(): boolean;
                                public requested(n: number): void;
                                public leave(param0: number): number;
                                public done(): boolean;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public enter(): boolean;
                                public onComplete(): void;
                                public requested(): number;
                                public produced(param0: number): number;
                                public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                                public onNext(this_: any): void;
                                public run(): void;
                                public onSubscribe(e: org.reactivestreams.Subscription): void;
                                public request(n: number): void;
                                public error(): java.lang.Throwable;
                            }
                            export module BufferSkipBoundedSubscriber {
                                export class RemoveFromBuffer {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber.RemoveFromBuffer>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCache<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache<any>>;
                            public constructor();
                            public onComplete(): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public onError(this_: java.lang.Throwable): void;
                            public onSubscribe(s: org.reactivestreams.Subscription): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public subscribeActual(t: org.reactivestreams.Subscriber<any>): void;
                            public onNext(consumer: any): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, capacityHint: number);
                        }
                        export module FlowableCache {
                            export class CacheSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.CacheSubscription<any>>;
                                public cancel(): void;
                                public request(n: number): void;
                            }
                            export class Node<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.Node<any>>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCollect<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, initialSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableCollect {
                            export class CollectSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect.CollectSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCollectSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle<any, any>>;
                            public constructor();
                            public subscribeActual(e: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, initialSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableCollectSingle {
                            export class CollectSubscriber<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCombineLatest<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest<any, any>>;
                            public constructor();
                            public subscribeActual(p: org.reactivestreams.Subscriber<any>): void;
                            public constructor(array: androidNative.Array<org.reactivestreams.Publisher<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayErrors: boolean);
                            public constructor(iterable: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayErrors: boolean);
                        }
                        export module FlowableCombineLatest {
                            export class CombineLatestCoordinator<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestCoordinator<any, any>>;
                                public clear(): void;
                                public requestFusion(requestedMode: number): number;
                                public cancel(): void;
                                public isEmpty(): boolean;
                                public request(n: number): void;
                                public poll(): any;
                            }
                            export class CombineLatestInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestInnerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public requestOne(): void;
                            }
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(sources: androidNative.Array<org.reactivestreams.Publisher<any>>, delayError: boolean);
                        }
                        export module FlowableConcatArray {
                            export class ConcatArraySubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray.ConcatArraySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onComplete(): void;
                                public onError(this_: java.lang.Throwable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatMap<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode);
                            public static subscribe(s: org.reactivestreams.Subscriber, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode): org.reactivestreams.Subscriber;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(e: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableConcatMap {
                            export abstract class BaseConcatMapSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: any): void;
                                public onComplete(): void;
                            }
                            export class ConcatMapDelayed<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapDelayed<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public innerNext(value: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public innerError(e: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                            export class ConcatMapImmediate<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapImmediate<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public innerNext(value: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public innerError(e: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                            export class ConcatMapInner<R> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapInner<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export class ConcatMapSupport<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapSupport<any>>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    innerNext(param0: T): void;
                                    innerComplete(): void;
                                    innerError(param0: java.lang.Throwable): void;
                                });
                                public constructor();
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: T): void;
                            }
                            export class SimpleScalarSubscription<T> extends java.util.concurrent.atomic.AtomicBoolean implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription<any>>;
                                public cancel(): void;
                                public request(this_: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatMapEager<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, maxConcurrency: number, prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode);
                        }
                        export module FlowableConcatMapEager {
                            export class ConcatMapEagerDelayErrorSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager.ConcatMapEagerDelayErrorSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public innerError(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>, param1: java.lang.Throwable): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public innerComplete(inner: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>): void;
                                public onComplete(): void;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>): void;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public innerError(inner: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>, e: java.lang.Throwable): void;
                                public innerNext(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>, param1: any): void;
                                public onNext(ex: any): void;
                                public request(n: number): void;
                                public drain(): void;
                                public innerNext(inner: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>, value: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatMapEagerPublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEagerPublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, maxConcurrency: number, prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatMapScheduler<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, scheduler: io.reactivex.rxjava3.core.Scheduler);
                        }
                        export module FlowableConcatMapScheduler {
                            export abstract class BaseConcatMapSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: any): void;
                                public onComplete(): void;
                            }
                            export class ConcatMapDelayed<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapDelayed<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public innerNext(value: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public run(): void;
                                public innerError(e: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                            export class ConcatMapImmediate<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapImmediate<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public innerNext(value: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerComplete(): void;
                                public innerNext(param0: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public run(): void;
                                public innerError(e: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: io.reactivex.rxjava3.core.CompletableSource);
                        }
                        export module FlowableConcatWithCompletable {
                            export class ConcatWithSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>);
                        }
                        export module FlowableConcatWithMaybe {
                            export class ConcatWithSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe.ConcatWithSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSuccess(t: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableConcatWithSingle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: io.reactivex.rxjava3.core.SingleSource<any>);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableConcatWithSingle {
                            export class ConcatWithSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle.ConcatWithSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSuccess(t: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCount<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCount<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableCount {
                            export class CountSubscriber extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Long> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCount.CountSubscriber>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCountSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Long> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Long>;
                        }
                        export module FlowableCountSingle {
                            export class CountSubscriber extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle.CountSubscriber>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableCreate<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate<any>>;
                            public constructor();
                            public subscribeActual(emitter: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, backpressure: io.reactivex.rxjava3.core.BackpressureStrategy);
                        }
                        export module FlowableCreate {
                            export abstract class BaseEmitter<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any>>;
                                public toString(): string;
                                public cancel(): void;
                                public completeDownstream(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public errorDownstream(e: java.lang.Throwable): boolean;
                                public requested(): number;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public signalError(e: java.lang.Throwable): boolean;
                                public tryOnError(e: java.lang.Throwable): boolean;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public onNext(param0: any): void;
                            }
                            export class BufferAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BufferAsyncEmitter<any>>;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(t: any): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public onComplete(): void;
                                public signalError(e: java.lang.Throwable): boolean;
                                public requested(): number;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                            }
                            export class DropAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter<any>>;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public requested(): number;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                            }
                            export class ErrorAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.ErrorAsyncEmitter<any>>;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public requested(): number;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                            }
                            export class LatestAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.LatestAsyncEmitter<any>>;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(t: any): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public onComplete(): void;
                                public signalError(e: java.lang.Throwable): boolean;
                                public requested(): number;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                            }
                            export class MissingEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.MissingEmitter<any>>;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public onNext(this_: any): void;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public requested(): number;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                            }
                            export abstract class NoOverflowBaseAsyncEmitter<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter<any>>;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(t: any): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public requested(): number;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                            }
                            export class SerializedEmitter<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.SerializedEmitter<any>>;
                                public toString(): string;
                                public tryOnError(t: java.lang.Throwable): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public requested(): number;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public onNext(this_: any): void;
                                public isCancelled(): boolean;
                                public serialize(): io.reactivex.rxjava3.core.FlowableEmitter<any>;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDebounce<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, debounceSelector: io.reactivex.rxjava3.functions.Function<any, any>);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableDebounce {
                            export class DebounceSubscriber<T, U> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module DebounceSubscriber {
                                export class DebounceInnerSubscriber<T, U> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber.DebounceInnerSubscriber<any, any>>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDebounceTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableDebounceTimed {
                            export class DebounceEmitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class DebounceTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceTimedSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDefer<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer<any>>;
                            public constructor();
                            public subscribeActual(t: org.reactivestreams.Subscriber<any>): void;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDelay<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean);
                        }
                        export module FlowableDelay {
                            export class DelaySubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                            }
                            export module DelaySubscriber {
                                export class OnComplete {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnComplete>;
                                    public run(): void;
                                }
                                export class OnError {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError>;
                                    public run(): void;
                                }
                                export class OnNext {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnNext>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDelaySubscriptionOther<T, U> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther<any, any>>;
                            public constructor();
                            public subscribeActual(child: org.reactivestreams.Subscriber<any>): void;
                            public constructor(main: org.reactivestreams.Publisher<any>, other: org.reactivestreams.Publisher<any>);
                        }
                        export module FlowableDelaySubscriptionOther {
                            export class MainSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module MainSubscriber {
                                export class OtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber.OtherSubscriber>;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDematerialize<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, selector: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module FlowableDematerialize {
                            export class DematerializeSubscriber<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(notification: T): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDetach<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableDetach {
                            export class DetachSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach.DetachSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDistinct<T, K> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                        export module FlowableDistinct {
                            export class DistinctSubscriber<T, K> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct.DistinctSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public clear(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(b: any): void;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDistinctUntilChanged<T, K> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
                        }
                        export module FlowableDistinctUntilChanged {
                            export class DistinctUntilChangedConditionalSubscriber<T, K> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber<any, any>>;
                                public onNext(t: any): void;
                                public tryOnNext(key: any): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class DistinctUntilChangedSubscriber<T, K> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> implements io.reactivex.rxjava3.operators.ConditionalSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public tryOnNext(key: any): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDoAfterNext<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onAfterNext: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableDoAfterNext {
                            export class DoAfterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber<any>>;
                                public onNext(this_: any): void;
                                public tryOnNext(this_: any): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class DoAfterSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(this_: any): void;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDoFinally<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onFinally: io.reactivex.rxjava3.functions.Action);
                        }
                        export module FlowableDoFinally {
                            export class DoFinallyConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.operators.ConditionalSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallyConditionalSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public clear(): void;
                                public tryOnNext(t: any): boolean;
                                public isEmpty(): boolean;
                                public requestFusion(this_: number): number;
                                public request(n: number): void;
                            }
                            export class DoFinallySubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public clear(): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public onComplete(): void;
                                public requestFusion(this_: number): number;
                                public request(n: number): void;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDoOnEach<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onAfterTerminate: io.reactivex.rxjava3.functions.Action);
                        }
                        export module FlowableDoOnEach {
                            export class DoOnEachConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachConditionalSubscriber<any>>;
                                public onNext(this_: any): void;
                                public tryOnNext(this_: any): boolean;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class DoOnEachSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(this_: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableDoOnLifecycle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onRequest: io.reactivex.rxjava3.functions.LongConsumer, onCancel: io.reactivex.rxjava3.functions.Action);
                        }
                        export module FlowableDoOnLifecycle {
                            export class SubscriptionLambdaSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(this_: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableElementAt<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, index: number, defaultValue: any, errorOnFewer: boolean);
                        }
                        export module FlowableElementAt {
                            export class ElementAtSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableElementAtMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, index: number);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableElementAtMaybe {
                            export class ElementAtSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableElementAtMaybePublisher<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybePublisher<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, index: number);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableElementAtSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, index: number, defaultValue: any);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableElementAtSingle {
                            export class ElementAtSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableEmpty extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.operators.ScalarSupplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public get(): any;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableError<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableError<any>>;
                            public constructor();
                            public subscribeActual(t: org.reactivestreams.Subscriber<any>): void;
                            public constructor(errorSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFilter<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableFilter {
                            export class FilterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber<any>>;
                                public onNext(t: any): void;
                                public tryOnNext(e: any): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class FilterSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> implements io.reactivex.rxjava3.operators.ConditionalSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public tryOnNext(e: any): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMap<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static subscribe(s: org.reactivestreams.Subscriber, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number, bufferSize: number): io.reactivex.rxjava3.core.FlowableSubscriber<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number, bufferSize: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(e: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableFlatMap {
                            export class InnerSubscriber<T, U> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class MergeSubscriber<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.MergeSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public cancel(): void;
                                public onComplete(): void;
                                public onError(this_: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMapCompletable<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number);
                        }
                        export module FlowableFlatMapCompletable {
                            export class FlatMapCompletableMainSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable.FlatMapCompletableMainSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public clear(): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onNext(ex: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public request(n: number): void;
                                public poll(): any;
                            }
                            export module FlatMapCompletableMainSubscriber {
                                export class InnerConsumer extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable.FlatMapCompletableMainSubscriber.InnerConsumer>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMapCompletableCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number);
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableFlatMapCompletableCompletable {
                            export class FlatMapCompletableMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onNext(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module FlatMapCompletableMainSubscriber {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMapMaybe<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number);
                        }
                        export module FlowableFlatMapMaybe {
                            export class FlatMapMaybeSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module FlatMapMaybeSubscriber {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber.InnerObserver>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public onSuccess(value: any): void;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMapMaybePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybePublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMapSingle<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number);
                        }
                        export module FlowableFlatMapSingle {
                            export class FlatMapSingleSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle.FlatMapSingleSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module FlatMapSingleSubscriber {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle.FlatMapSingleSubscriber.InnerObserver>;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public onSuccess(value: any): void;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlatMapSinglePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSinglePublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFlattenIterable<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable<any, any>>;
                            public constructor();
                            public static subscribe(downstream: org.reactivestreams.Subscriber, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): org.reactivestreams.Subscriber;
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(e: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableFlattenIterable {
                            export class FlattenIterableSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable.FlattenIterableSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public clear(): void;
                                public requestFusion(requestedMode: number): number;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public onComplete(): void;
                                public request(n: number): void;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromAction<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromAction<any>>;
                            public constructor();
                            public get(): any;
                            public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                            public constructor(action: io.reactivex.rxjava3.functions.Action);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(array: androidNative.Array<any>);
                        }
                        export module FlowableFromArray {
                            export class ArrayConditionalSubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArrayConditionalSubscription<any>>;
                            }
                            export class ArraySubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription<any>>;
                            }
                            export abstract class BaseArraySubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription<any>>;
                                public clear(): void;
                                public cancel(): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromCallable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallable<any>>;
                            public constructor();
                            public get(): any;
                            public constructor(callable: java.util.concurrent.Callable<any>);
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromCompletable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(observer: org.reactivestreams.Subscriber<any>): void;
                            public source(): io.reactivex.rxjava3.core.CompletableSource;
                        }
                        export module FlowableFromCompletable {
                            export class FromCompletableObserver<T> extends io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any> implements io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public constructor(downstream: org.reactivestreams.Subscriber<any>);
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public constructor();
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromFuture<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture<any>>;
                            public constructor();
                            public constructor(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit);
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromIterable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static subscribe(hasNext: org.reactivestreams.Subscriber, e: java.util.Iterator<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(e: io.reactivex.rxjava3.core.FlowableSubscriber<any>): void;
                            public constructor(source: java.lang.Iterable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableFromIterable {
                            export abstract class BaseRangeSubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription<any>>;
                                public clear(): void;
                                public cancel(): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public request(n: number): void;
                            }
                            export class IteratorConditionalSubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription<any>>;
                            }
                            export class IteratorSubscription<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription<any>>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromObservable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(upstream: io.reactivex.rxjava3.core.ObservableSource<any>);
                        }
                        export module FlowableFromObservable {
                            export class SubscriberObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable.SubscriberObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(value: T): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: T): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromPublisher<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromPublisher<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(publisher: org.reactivestreams.Publisher<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromRunnable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable<any>>;
                            public constructor();
                            public get(): any;
                            public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                            public constructor(run: java.lang.Runnable);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableFromSupplier<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier<any>>;
                            public constructor();
                            public get(): any;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableGenerate<T, S> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate<any, any>>;
                            public constructor();
                            public constructor(stateSupplier: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any>, disposeState: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableGenerate {
                            export class GeneratorSubscription<T, S> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate.GeneratorSubscription<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(this_: number): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableGroupBy<T, K, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.flowables.GroupedFlowable<any, any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy<any, any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean, mapFactory: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(evictedGroups: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableGroupBy {
                            export class EvictionAction<K, V> extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.EvictionAction<any, any>>;
                                public accept(param0: any): void;
                                public accept(value: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>): void;
                            }
                            export class GroupBySubscriber<T, K, V> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupBySubscriber<any, any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public cancel(key: any): void;
                                public onNext(ex: any): void;
                                public constructor(actual: org.reactivestreams.Subscriber<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean, groups: java.util.Map<any, io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>>, evictedGroups: java.util.Queue<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>>);
                                public onComplete(): void;
                                public onError(this_: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                            export class GroupedUnicast<K, T> extends io.reactivex.rxjava3.flowables.GroupedFlowable<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>>;
                                public onNext(t: any): void;
                                public constructor(key: any);
                                public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                                public constructor(key: any, state: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.State<any, any>);
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public constructor();
                                public static createWith(key: any, bufferSize: number, parent: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupBySubscriber<any, any, any>, delayError: boolean): io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast<any, any>;
                            }
                            export class State<T, K> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements org.reactivestreams.Publisher<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.State<any, any>>;
                                public onNext(t: any): void;
                                public clear(): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public subscribe(u: org.reactivestreams.Subscriber<any>): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public request(n: number): void;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableGroupJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin<any, any, any, any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: org.reactivestreams.Publisher<any>, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableGroupJoin {
                            export class GroupJoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.GroupJoinSubscription<any, any, any, any, any>>;
                                public innerError(ex: java.lang.Throwable): void;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                                public innerValue(param0: boolean, param1: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerCloseError(param0: java.lang.Throwable): void;
                                public innerClose(isLeft: boolean, index: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                                public cancel(): void;
                                public innerComplete(sender: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                                public innerValue(isLeft: boolean, o: any): void;
                                public innerCloseError(ex: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                            export class JoinSupport {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.JoinSupport>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$JoinSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    innerError(param0: java.lang.Throwable): void;
                                    innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                                    innerValue(param0: boolean, param1: any): void;
                                    innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                                    innerCloseError(param0: java.lang.Throwable): void;
                                });
                                public constructor();
                                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                                public innerValue(param0: boolean, param1: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerCloseError(param0: java.lang.Throwable): void;
                                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                            }
                            export class LeftRightEndSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class LeftRightSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableHide<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableHide<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableHide {
                            export class HideSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableIgnoreElements<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(t: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableIgnoreElements {
                            export class IgnoreElementsSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public offer(e: T): boolean;
                                public offer(param0: T): boolean;
                                public poll(): T;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public offer(param0: T, param1: T): boolean;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public clear(): void;
                                public requestFusion(param0: number): number;
                                public offer(v1: T, v2: T): boolean;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableIgnoreElementsCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable<any>>;
                            public constructor();
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(t: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableIgnoreElementsCompletable {
                            export class IgnoreElementsSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable.IgnoreElementsSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableInternalHelper {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper>;
                            public static subscriberOnError(subscriber: org.reactivestreams.Subscriber): io.reactivex.rxjava3.functions.Consumer<any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Flowable<any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static simpleBiGenerator(consumer: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                            public static flatMapWithCombiner(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Flowable<any>): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static subscriberOnNext(subscriber: org.reactivestreams.Subscriber): io.reactivex.rxjava3.functions.Consumer<any>;
                            public static simpleGenerator(consumer: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                            public static flatMapIntoIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                            public static subscriberOnComplete(subscriber: org.reactivestreams.Subscriber): io.reactivex.rxjava3.functions.Action;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Flowable<any>, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Flowable<any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static itemDelay(itemDelay: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        }
                        export module FlowableInternalHelper {
                            export class BufferedReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier<any>>;
                                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                                public get(): any;
                            }
                            export class BufferedTimedReplay<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedTimedReplay<any>>;
                                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                                public get(): any;
                            }
                            export class FlatMapIntoIterable<T, U> extends io.reactivex.rxjava3.functions.Function<any, org.reactivestreams.Publisher<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapIntoIterable<any, any>>;
                                public apply(t: any): org.reactivestreams.Publisher<any>;
                                public apply(param0: any): any;
                            }
                            export class FlatMapWithCombinerInner<U, R, T> extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner<any, any, any>>;
                                public apply(w: any): any;
                                public apply(param0: any): any;
                            }
                            export class FlatMapWithCombinerOuter<T, R, U> extends io.reactivex.rxjava3.functions.Function<any, org.reactivestreams.Publisher<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerOuter<any, any, any>>;
                                public apply(t: any): org.reactivestreams.Publisher<any>;
                                public apply(param0: any): any;
                            }
                            export class ItemDelayFunction<T, U> extends io.reactivex.rxjava3.functions.Function<any, org.reactivestreams.Publisher<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction<any, any>>;
                                public apply(v: any): org.reactivestreams.Publisher<any>;
                                public apply(param0: any): any;
                            }
                            export class ReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ReplaySupplier<any>>;
                                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                                public get(): any;
                            }
                            export class RequestMax extends io.reactivex.rxjava3.functions.Consumer<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax>;
                                public static INSTANCE: io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax;
                                public static valueOf(name: string): io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax;
                                public accept(param0: any): void;
                                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.RequestMax>;
                                public accept(t: org.reactivestreams.Subscription): void;
                            }
                            export class SimpleBiGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator<any, any>>;
                                public apply(param0: any, param1: any): any;
                                public apply(t1: any, t2: io.reactivex.rxjava3.core.Emitter<any>): any;
                            }
                            export class SimpleGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleGenerator<any, any>>;
                                public apply(param0: any, param1: any): any;
                                public apply(t1: any, t2: io.reactivex.rxjava3.core.Emitter<any>): any;
                            }
                            export class SubscriberOnComplete<T> extends io.reactivex.rxjava3.functions.Action {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnComplete<any>>;
                                public run(): void;
                            }
                            export class SubscriberOnError<T> extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnError<any>>;
                                public accept(param0: any): void;
                                public accept(v: java.lang.Throwable): void;
                            }
                            export class SubscriberOnNext<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext<any>>;
                                public accept(param0: any): void;
                                public accept(v: any): void;
                            }
                            export class TimedReplay<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.flowables.ConnectableFlowable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.TimedReplay<any>>;
                                public get(): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                                public get(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableInterval extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval>;
                            public constructor();
                            public subscribeActual(d: org.reactivestreams.Subscriber<any>): void;
                            public constructor(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                        }
                        export module FlowableInterval {
                            export class IntervalSubscriber {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber>;
                                public cancel(): void;
                                public run(): void;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableIntervalRange extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange>;
                            public constructor();
                            public subscribeActual(d: org.reactivestreams.Subscriber<any>): void;
                            public constructor(start: number, end: number, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                        }
                        export module FlowableIntervalRange {
                            export class IntervalRangeSubscriber {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber>;
                                public cancel(): void;
                                public run(): void;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin<any, any, any, any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: org.reactivestreams.Publisher<any>, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableJoin {
                            export class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin.JoinSubscription<any, any, any, any, any>>;
                                public innerError(ex: java.lang.Throwable): void;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                                public innerValue(param0: boolean, param1: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerCloseError(param0: java.lang.Throwable): void;
                                public innerClose(isLeft: boolean, index: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                                public cancel(): void;
                                public innerComplete(sender: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightSubscriber): void;
                                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber): void;
                                public innerValue(isLeft: boolean, o: any): void;
                                public innerCloseError(ex: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableJust<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.operators.ScalarSupplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableJust<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public get(): any;
                            public constructor(value: any);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableLastMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: org.reactivestreams.Publisher<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableLastMaybe {
                            export class LastSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe.LastSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableLastSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, defaultItem: any);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableLastSingle {
                            export class LastSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableLift<R, T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableLift<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, operator: io.reactivex.rxjava3.core.FlowableOperator<any, any>);
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMap<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMap<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module FlowableMap {
                            export class MapConditionalSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapConditionalSubscriber<any, any>>;
                                public onNext(ex: any): void;
                                public tryOnNext(ex: any): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class MapSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(ex: any): void;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMapNotification<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onNextMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                        export module FlowableMapNotification {
                            export class MapNotificationSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification.MapNotificationSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMapPublisher<T, U> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMapPublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMaterialize<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Notification<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableMaterialize {
                            export class MaterializeSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, io.reactivex.rxjava3.core.Notification<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize.MaterializeSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onDrop(n: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onDrop(n: io.reactivex.rxjava3.core.Notification<any>): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMergeWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribeActual(subscriber: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableMergeWithCompletable {
                            export class MergeWithSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module MergeWithSubscriber {
                                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMergeWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribeActual(subscriber: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableMergeWithMaybe {
                            export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(q: any): void;
                                public cancel(): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module MergeWithObserver {
                                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver.OtherObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableMergeWithSingle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: io.reactivex.rxjava3.core.SingleSource<any>);
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(subscriber: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableMergeWithSingle {
                            export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(q: any): void;
                                public cancel(): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module MergeWithObserver {
                                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver.OtherObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableNever extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableNever>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableObserveOn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, prefetch: number);
                        }
                        export module FlowableObserveOn {
                            export abstract class BaseObserveOnSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public clear(): void;
                                public requestFusion(requestedMode: number): number;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public onComplete(): void;
                                public run(): void;
                                public request(n: number): void;
                            }
                            export class ObserveOnConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnConditionalSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public poll(): any;
                            }
                            export class ObserveOnSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureBuffer<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, bufferSize: number, unbounded: boolean, delayError: boolean, onOverflow: io.reactivex.rxjava3.functions.Action, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableOnBackpressureBuffer {
                            export class BackpressureBufferSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer.BackpressureBufferSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public clear(): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public request(n: number): void;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureBufferStrategy<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, bufferSize: number, onOverflow: io.reactivex.rxjava3.functions.Action, strategy: io.reactivex.rxjava3.core.BackpressureOverflowStrategy, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableOnBackpressureBufferStrategy {
                            export class OnBackpressureBufferStrategySubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy.OnBackpressureBufferStrategySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureDrop<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> implements io.reactivex.rxjava3.functions.Consumer<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public accept(t: any): void;
                            public accept(param0: any): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onDrop: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableOnBackpressureDrop {
                            export class BackpressureDropSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureError<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableOnBackpressureError {
                            export class BackpressureErrorSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError.BackpressureErrorSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureLatest<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableOnBackpressureLatest {
                            export class BackpressureLatestSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest.BackpressureLatestSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(this_: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureReduce<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableOnBackpressureReduce {
                            export class BackpressureReduceSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(this_: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnBackpressureReduceWith<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, supplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableOnBackpressureReduceWith {
                            export class BackpressureReduceWithSubscriber<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith.BackpressureReduceWithSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(this_: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnErrorComplete<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(observer: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableOnErrorComplete {
                            export class OnErrorCompleteSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete.OnErrorCompleteSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(value: T): void;
                                public cancel(): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                                public constructor(actual: org.reactivestreams.Subscriber<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnErrorNext<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, nextSupplier: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module FlowableOnErrorNext {
                            export class OnErrorNextSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableOnErrorReturn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, valueSupplier: io.reactivex.rxjava3.functions.Function<any, any>);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableOnErrorReturn {
                            export class OnErrorReturnSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn.OnErrorReturnSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowablePublish<T> extends io.reactivex.rxjava3.flowables.ConnectableFlowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish<any>>;
                            public constructor();
                            public connect(ex: io.reactivex.rxjava3.functions.Consumer<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, bufferSize: number);
                            public connect(): io.reactivex.rxjava3.disposables.Disposable;
                            public reset(): void;
                        }
                        export module FlowablePublish {
                            export class InnerSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.InnerSubscription<any>>;
                                public cancel(): void;
                                public isCancelled(): boolean;
                                public request(n: number): void;
                            }
                            export class PublishConnection<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.PublishConnection<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowablePublishMulticast<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, selector: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, delayError: boolean);
                        }
                        export module FlowablePublishMulticast {
                            export class MulticastProcessor<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                                public onComplete(): void;
                            }
                            export class MulticastSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription<any>>;
                                public cancel(): void;
                                public isCancelled(): boolean;
                                public request(n: number): void;
                            }
                            export class OutputCanceller<R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: R): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRange extends io.reactivex.rxjava3.core.Flowable<java.lang.Integer> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange>;
                            public constructor();
                            public constructor(start: number, count: number);
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableRange {
                            export abstract class BaseRangeSubscription extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<java.lang.Integer> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.BaseRangeSubscription>;
                                public clear(): void;
                                public cancel(): void;
                                public poll(): java.lang.Integer;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public request(n: number): void;
                            }
                            export class RangeConditionalSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.BaseRangeSubscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription>;
                            }
                            export class RangeSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.BaseRangeSubscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeSubscription>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRangeLong extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong>;
                            public constructor();
                            public constructor(start: number, count: number);
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableRangeLong {
                            export abstract class BaseRangeSubscription extends io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<java.lang.Long> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.BaseRangeSubscription>;
                                public clear(): void;
                                public cancel(): void;
                                public isEmpty(): boolean;
                                public poll(): java.lang.Long;
                                public requestFusion(mode: number): number;
                                public request(n: number): void;
                            }
                            export class RangeConditionalSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.BaseRangeSubscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.RangeConditionalSubscription>;
                            }
                            export class RangeSubscription extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.BaseRangeSubscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong.RangeSubscription>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableReduce<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableReduce {
                            export class ReduceSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce.ReduceSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableReduceMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableReduceMaybe {
                            export class ReduceSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableReduceSeedSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: org.reactivestreams.Publisher<any>, seed: any, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableReduceSeedSingle {
                            export class ReduceSeedObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle.ReduceSeedObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableReduceWithSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: org.reactivestreams.Publisher<any>, seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRefCount<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount<any>>;
                            public constructor();
                            public subscribeActual(conn: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>, n: number, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public constructor(source: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>);
                        }
                        export module FlowableRefCount {
                            export class RefConnection extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection>;
                                public accept(param0: any): void;
                                public accept(t: io.reactivex.rxjava3.disposables.Disposable): void;
                                public run(): void;
                            }
                            export class RefCountSubscriber<T> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefCountSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRepeat<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, count: number);
                        }
                        export module FlowableRepeat {
                            export class RepeatSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat.RepeatSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRepeatUntil<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, until: io.reactivex.rxjava3.functions.BooleanSupplier);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableRepeatUntil {
                            export class RepeatSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRepeatWhen<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, handler: io.reactivex.rxjava3.functions.Function<any, any>);
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableRepeatWhen {
                            export class RepeatWhenSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.RepeatWhenSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export class WhenReceiver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenReceiver<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export abstract class WhenSourceSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber<any, any>>;
                                public downstream: org.reactivestreams.Subscriber<any>;
                                public processor: io.reactivex.rxjava3.processors.FlowableProcessor<any>;
                                public receiver: org.reactivestreams.Subscription;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public again(signal: any): void;
                                public cancel(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableReplay<T> extends io.reactivex.rxjava3.flowables.ConnectableFlowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay<any>>;
                            public static create(source: io.reactivex.rxjava3.core.Flowable<any>, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                            public connect(ex: io.reactivex.rxjava3.functions.Consumer<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public static create(source: io.reactivex.rxjava3.core.Flowable<any>, maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                            public static create(source: io.reactivex.rxjava3.core.Flowable<any>, maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                            public static createFrom(source: io.reactivex.rxjava3.core.Flowable<any>): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                            public connect(): io.reactivex.rxjava3.disposables.Disposable;
                            public static multicastSelector(connectableFactory: io.reactivex.rxjava3.functions.Supplier<any>, selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                            public reset(): void;
                        }
                        export module FlowableReplay {
                            export abstract class BoundedReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.Node> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(o: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
                                public error(e: java.lang.Throwable): void;
                                public next(value: any): void;
                            }
                            export class DefaultUnboundedFactory extends io.reactivex.rxjava3.functions.Supplier<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.DefaultUnboundedFactory>;
                                public get(): any;
                            }
                            export class InnerSubscription<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public cancel(): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public produced(n: number): number;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public request(n: number): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class MulticastFlowable<R, U> extends io.reactivex.rxjava3.core.Flowable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.MulticastFlowable<any, any>>;
                                public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                            }
                            export module MulticastFlowable {
                                export class DisposableConsumer extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.MulticastFlowable.DisposableConsumer>;
                                    public accept(r: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public accept(param0: any): void;
                                }
                            }
                            export class Node extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.Node> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.Node>;
                            }
                            export class ReplayBuffer<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    next(param0: T): void;
                                    error(param0: java.lang.Throwable): void;
                                    complete(): void;
                                    replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<T>): void;
                                });
                                public constructor();
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<T>): void;
                                public next(param0: T): void;
                            }
                            export class ReplayBufferSupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBufferSupplier<any>>;
                                public get(): io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>;
                                public get(): any;
                            }
                            export class ReplayPublisher<T> extends org.reactivestreams.Publisher<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher<any>>;
                                public subscribe(ex: org.reactivestreams.Subscriber<any>): void;
                            }
                            export class ReplaySubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplaySubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(this_: java.lang.Throwable): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class ScheduledReplayBufferSupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ScheduledReplayBufferSupplier<any>>;
                                public get(): io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any>;
                                public get(): any;
                            }
                            export class SizeAndTimeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeAndTimeBoundReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
                            }
                            export class SizeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
                            }
                            export class UnboundedReplayBuffer<T> extends java.util.ArrayList<any> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(o: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription<any>): void;
                                public error(e: java.lang.Throwable): void;
                                public next(value: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRetryBiPredicate<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
                        }
                        export module FlowableRetryBiPredicate {
                            export class RetryBiSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate.RetryBiSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRetryPredicate<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, count: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableRetryPredicate {
                            export class RetrySubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate.RetrySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableRetryWhen<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, handler: io.reactivex.rxjava3.functions.Function<any, any>);
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableRetryWhen {
                            export class RetryWhenSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber<any, java.lang.Throwable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSamplePublisher<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, other: org.reactivestreams.Publisher<any>, emitLast: boolean);
                        }
                        export module FlowableSamplePublisher {
                            export class SampleMainEmitLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainEmitLast<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            }
                            export class SampleMainNoLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainNoLast<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            }
                            export abstract class SamplePublisherSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public complete(): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public error(e: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                            export class SamplerSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSampleTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableSampleTimed {
                            export class SampleTimedEmitLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedEmitLast<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                            export class SampleTimedNoLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedNoLast<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                            export abstract class SampleTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableScalarXMap {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap>;
                            public static scalarXMap(value: any, mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Flowable<any>;
                            public static tryScalarXMapSubscribe(t: org.reactivestreams.Publisher, ex: org.reactivestreams.Subscriber, r: io.reactivex.rxjava3.functions.Function<any, any>): boolean;
                        }
                        export module FlowableScalarXMap {
                            export class ScalarXMapFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap.ScalarXMapFlowable<any, any>>;
                                public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableScan<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScan<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module FlowableScan {
                            export class ScanSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScan.ScanSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableScanSeed<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableScanSeed {
                            export class ScanSeedSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSequenceEqual<T> extends io.reactivex.rxjava3.core.Flowable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(first: org.reactivestreams.Publisher<any>, second: org.reactivestreams.Publisher<any>, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>, prefetch: number);
                        }
                        export module FlowableSequenceEqual {
                            export class EqualCoordinator<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinatorHelper {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinator<any>>;
                                public innerError(param0: java.lang.Throwable): void;
                                public cancel(): void;
                                public innerError(t: java.lang.Throwable): void;
                                public drain(): void;
                            }
                            export class EqualCoordinatorHelper {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinatorHelper>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    drain(): void;
                                    innerError(param0: java.lang.Throwable): void;
                                });
                                public constructor();
                                public innerError(param0: java.lang.Throwable): void;
                                public drain(): void;
                            }
                            export class EqualSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSequenceEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(first: org.reactivestreams.Publisher<any>, second: org.reactivestreams.Publisher<any>, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>, prefetch: number);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<java.lang.Boolean>;
                        }
                        export module FlowableSequenceEqualSingle {
                            export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.EqualCoordinator<any>>;
                                public dispose(): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public innerError(t: java.lang.Throwable): void;
                                public drain(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSerialized<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSerialized<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSingle<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, defaultValue: any, failOnEmpty: boolean);
                        }
                        export module FlowableSingle {
                            export class SingleElementSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSingleMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableSingleMaybe {
                            export class SingleElementSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSingleSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, defaultValue: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableSingleSingle {
                            export class SingleElementSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle.SingleElementSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSkip<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, n: number);
                        }
                        export module FlowableSkip {
                            export class SkipSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSkipLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, skip: number);
                        }
                        export module FlowableSkipLast {
                            export class SkipLastSubscriber<T> extends java.util.ArrayDeque<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast.SkipLastSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSkipLastTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number, delayError: boolean);
                        }
                        export module FlowableSkipLastTimed {
                            export class SkipLastTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed.SkipLastTimedSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSkipUntil<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribeActual(child: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableSkipUntil {
                            export class SkipUntilMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public tryOnNext(t: any): boolean;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                                public tryOnNext(param0: any): boolean;
                            }
                            export module SkipUntilMainSubscriber {
                                export class OtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber.OtherSubscriber>;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSkipWhile<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableSkipWhile {
                            export class SkipWhileSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile.SkipWhileSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, scheduler: io.reactivex.rxjava3.core.Scheduler, nonScheduledRequests: boolean);
                        }
                        export module FlowableSubscribeOn {
                            export class SubscribeOnSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<java.lang.Thread> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.SubscribeOnSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public request(s: number): void;
                                public onComplete(): void;
                                public run(): void;
                            }
                            export module SubscribeOnSubscriber {
                                export class Request {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.SubscribeOnSubscriber.Request>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSwitchIfEmpty<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: org.reactivestreams.Publisher<any>);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableSwitchIfEmpty {
                            export class SwitchIfEmptySubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty.SwitchIfEmptySubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableSwitchMap<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayErrors: boolean);
                        }
                        export module FlowableSwitchMap {
                            export class SwitchMapInnerSubscriber<T, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapInnerSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export class SwitchMapSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTake<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTake<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, n: number);
                        }
                        export module FlowableTake {
                            export class TakeSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTake.TakeSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(toRequest: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakeLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, count: number);
                        }
                        export module FlowableTakeLast {
                            export class TakeLastSubscriber<T> extends java.util.ArrayDeque<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast.TakeLastSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakeLastOne<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                        }
                        export module FlowableTakeLastOne {
                            export class TakeLastOneSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakeLastTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, count: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number, delayError: boolean);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableTakeLastTimed {
                            export class TakeLastTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed.TakeLastTimedSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakePublisher<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakePublisher<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, limit: number);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakeUntil<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribeActual(child: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableTakeUntil {
                            export class TakeUntilMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil.TakeUntilMainSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module TakeUntilMainSubscriber {
                                export class OtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil.TakeUntilMainSubscriber.OtherSubscriber>;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakeUntilPredicate<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableTakeUntilPredicate {
                            export class InnerSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTakeWhile<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module FlowableTakeWhile {
                            export class TakeWhileSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile.TakeWhileSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableThrottleFirstTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                        }
                        export module FlowableThrottleFirstTimed {
                            export class DebounceTimedSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed.DebounceTimedSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(d: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public run(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableThrottleLatest<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableThrottleLatest {
                            export class ThrottleLatestSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest.ThrottleLatestSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public run(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTimeInterval<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.schedulers.Timed<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public source(): org.reactivestreams.Publisher<any>;
                        }
                        export module FlowableTimeInterval {
                            export class TimeIntervalSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTimeout<T, U, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout<any, any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, firstTimeoutIndicator: org.reactivestreams.Publisher<any>, itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>, other: org.reactivestreams.Publisher<any>);
                            public subscribeActual(parent: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableTimeout {
                            export class TimeoutConsumer extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutConsumer>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class TimeoutFallbackSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutFallbackSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onTimeoutError(idx: number, ex: java.lang.Throwable): void;
                                public onTimeout(param0: number): void;
                                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                                public onTimeout(c: number): void;
                            }
                            export class TimeoutSelectorSupport extends io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSupport {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutSelectorSupport>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSelectorSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                                    onTimeout(param0: number): void;
                                });
                                public constructor();
                                public onTimeout(param0: number): void;
                                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                            }
                            export class TimeoutSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onTimeout(idx: number): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onTimeoutError(idx: number, ex: java.lang.Throwable): void;
                                public onTimeout(param0: number): void;
                                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTimeoutTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed<any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, other: org.reactivestreams.Publisher<any>);
                            public subscribeActual(parent: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableTimeoutTimed {
                            export class FallbackSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export class TimeoutFallbackSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onTimeout(f: number): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onTimeout(param0: number): void;
                            }
                            export class TimeoutSubscriber<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onTimeout(idx: number): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onTimeout(param0: number): void;
                                public request(n: number): void;
                            }
                            export class TimeoutSupport {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSupport>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    onTimeout(param0: number): void;
                                });
                                public constructor();
                                public onTimeout(param0: number): void;
                            }
                            export class TimeoutTask {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask>;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableTimer extends io.reactivex.rxjava3.core.Flowable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                        }
                        export module FlowableTimer {
                            export class TimerSubscriber extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer.TimerSubscriber>;
                                public cancel(): void;
                                public run(): void;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableToList<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToList<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableToList {
                            export class ToListSubscriber<T, U> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToList.ToListSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableToListSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle<any, any>>;
                            public constructor();
                            public subscribeActual(e: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public fuseToFlowable(): io.reactivex.rxjava3.core.Flowable<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableToListSingle {
                            export class ToListSubscriber<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle.ToListSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableUnsubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                        }
                        export module FlowableUnsubscribeOn {
                            export class UnsubscribeSubscriber<T> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module UnsubscribeSubscriber {
                                export class Cancellation {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber.Cancellation>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableUsing<T, D> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing<any, any>>;
                            public constructor();
                            public constructor(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, disposer: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean);
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableUsing {
                            export class UsingSubscriber<T, D> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing.UsingSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(innerError: java.lang.Throwable): void;
                                public cancel(): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWindow<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, size: number, skip: number, bufferSize: number);
                        }
                        export module FlowableWindow {
                            export class WindowExactSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowExactSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public run(): void;
                                public request(this_: number): void;
                            }
                            export class WindowOverlapSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowOverlapSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(w: any): void;
                                public request(v: number): void;
                                public onComplete(): void;
                                public run(): void;
                                public onError(this_: java.lang.Throwable): void;
                            }
                            export class WindowSkipSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowSkipSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public request(v: number): void;
                                public onComplete(): void;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWindowBoundary<T, B> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary<any, any>>;
                            public constructor();
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(subscriber: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: org.reactivestreams.Publisher<any>, capacityHint: number);
                        }
                        export module FlowableWindowBoundary {
                            export class WindowBoundaryInnerSubscriber<T, B> extends io.reactivex.rxjava3.subscribers.DisposableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryInnerSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class WindowBoundaryMainSubscriber<T, B> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public run(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWindowBoundarySelector<T, B, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector<any, any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, open: org.reactivestreams.Publisher<any>, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number);
                        }
                        export module FlowableWindowBoundarySelector {
                            export class WindowBoundaryMainSubscriber<T, B, V> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber<any, any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public run(): void;
                                public request(n: number): void;
                            }
                            export module WindowBoundaryMainSubscriber {
                                export class WindowEndSubscriberIntercept<T, V> extends io.reactivex.rxjava3.core.Flowable<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowEndSubscriberIntercept<any, any>>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Flowable<any>;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Flowable<any>;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Flowable<any>;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.core.Flowable<any>;
                                    public static empty(): io.reactivex.rxjava3.core.Flowable<any>;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                                export class WindowStartItem<B> extends java.lang.Object {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartItem<any>>;
                                }
                                export class WindowStartSubscriber<B> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartSubscriber<any>>;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWindowSubscribeIntercept<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept<any>>;
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWindowTimed<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, io.reactivex.rxjava3.core.Flowable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, maxSize: number, bufferSize: number, restartTimerOnMaxSize: boolean);
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(downstream: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableWindowTimed {
                            export abstract class AbstractWindowSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export class WindowExactBoundedSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any> implements java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactBoundedSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                            export module WindowExactBoundedSubscriber {
                                export class WindowBoundaryRunnable {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactBoundedSubscriber.WindowBoundaryRunnable>;
                                    public run(): void;
                                }
                            }
                            export class WindowExactUnboundedSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any> implements java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactUnboundedSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                            export module WindowExactUnboundedSubscriber {
                                export class WindowRunnable {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactUnboundedSubscriber.WindowRunnable>;
                                    public run(): void;
                                }
                            }
                            export class WindowSkipSubscriber<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber<any> implements java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowSkipSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                            export module WindowSkipSubscriber {
                                export class WindowBoundaryRunnable {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowSkipSubscriber.WindowBoundaryRunnable>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWithLatestFrom<T, U, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom<any, any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public source(): org.reactivestreams.Publisher<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, other: org.reactivestreams.Publisher<any>);
                        }
                        export module FlowableWithLatestFrom {
                            export class FlowableWithLatestSubscriber extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom.FlowableWithLatestSubscriber>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export class WithLatestFromSubscriber<T, U, R> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom.WithLatestFromSubscriber<any, any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public otherError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(e: any): boolean;
                                public setOther(o: org.reactivestreams.Subscription): boolean;
                                public request(n: number): void;
                                public tryOnNext(param0: any): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableWithLatestFromMany<T, R> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, otherArray: androidNative.Array<org.reactivestreams.Publisher<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>);
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, otherIterable: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module FlowableWithLatestFromMany {
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                            export class WithLatestFromSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.WithLatestFromSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(i: any): boolean;
                                public request(n: number): void;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class WithLatestInnerSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.WithLatestInnerSubscriber>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableZip<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZip<any, any>>;
                            public constructor();
                            public subscribeActual(p: org.reactivestreams.Subscriber<any>): void;
                            public constructor(sources: androidNative.Array<org.reactivestreams.Publisher<any>>, sourcesIterable: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean);
                        }
                        export module FlowableZip {
                            export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipCoordinator<any, any>>;
                                public cancel(): void;
                                public request(n: number): void;
                            }
                            export class ZipSubscriber<T, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(this_: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module flowable {
                        export class FlowableZipIterable<T, U, V> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable<any, any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, other: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public source(): org.reactivestreams.Publisher<any>;
                            public subscribeActual(e: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module FlowableZipIterable {
                            export class ZipIterableSubscriber<T, U, V> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable.ZipIterableSubscriber<any, any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(e: T): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export abstract class AbstractMaybeWithUpstream<T, R> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any>>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeAmb<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(element: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>, sourcesIterable: java.lang.Iterable<any>);
                        }
                        export module MaybeAmb {
                            export class AmbMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb.AmbMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeCache<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache<any>>;
                            public constructor();
                            public onComplete(): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public onError(this_: java.lang.Throwable): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public onError(param0: java.lang.Throwable): void;
                            public onSuccess(param0: any): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSuccess(this_: any): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                        export module MaybeCache {
                            export class CacheDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.CacheDisposable<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeCallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver<any>>;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(this_: java.lang.Throwable): void;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public hasCustomOnError(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public onSuccess(param0: any): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public onSuccess(this_: any): void;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeConcatArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>);
                        }
                        export module MaybeConcatArray {
                            export class ConcatMaybeObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray.ConcatMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeConcatArrayDelayError<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>);
                        }
                        export module MaybeConcatArrayDelayError {
                            export class ConcatMaybeObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError.ConcatMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeConcatIterable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable<any>>;
                            public constructor();
                            public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                            public constructor(sources: java.lang.Iterable<any>);
                        }
                        export module MaybeConcatIterable {
                            export class ConcatMaybeObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.ConcatMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeContains<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeContains<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, value: any);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeContains {
                            export class ContainsMaybeObserver extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeContains.ContainsMaybeObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeCount<T> extends io.reactivex.rxjava3.core.Single<java.lang.Long> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCount<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeCount {
                            export class CountMaybeObserver extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCount.CountMaybeObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeCreate<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeOnSubscribe<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeCreate {
                            export class Emitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter<any>>;
                                public dispose(): void;
                                public toString(): string;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onSuccess(this_: any): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public onSuccess(param0: any): void;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public tryOnError(this_: java.lang.Throwable): boolean;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDefer<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer<any>>;
                            public constructor();
                            public constructor(maybeSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDelay<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDelay {
                            export class DelayMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDelayOtherPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDelayOtherPublisher {
                            export class DelayMaybeObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class OtherSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.OtherSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDelaySubscriptionOtherPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDelaySubscriptionOtherPublisher {
                            export class DelayMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.DelayMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                            export class OtherSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.OtherSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDelayWithCompletable<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: io.reactivex.rxjava3.core.CompletableSource);
                        }
                        export module MaybeDelayWithCompletable {
                            export class DelayWithMainObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.DelayWithMainObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                            export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.OtherObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDematerialize<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Maybe<any>, selector: io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.Notification<any>>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDematerialize {
                            export class DematerializeObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDetach<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDetach {
                            export class DetachMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDoAfterSuccess<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, onAfterSuccess: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDoAfterSuccess {
                            export class DoAfterObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess.DoAfterObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onSuccess(this_: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDoFinally<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, onFinally: io.reactivex.rxjava3.functions.Action);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDoFinally {
                            export class DoFinallyObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally.DoFinallyObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(t: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDoOnEvent<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, onEvent: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDoOnEvent {
                            export class DoOnEventMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent.DoOnEventMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(this_: java.lang.Throwable): void;
                                public onSuccess(param0: T): void;
                                public onSuccess(this_: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDoOnLifecycle<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(upstream: io.reactivex.rxjava3.core.Maybe<any>, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDoOnLifecycle {
                            export class MaybeLifecycleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle.MaybeLifecycleObserver<any>>;
                                public dispose(): void;
                                public onSuccess(t: T): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeDoOnTerminate<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, onTerminate: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeDoOnTerminate {
                            export class DoOnTerminate extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(this_: any): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(this_: java.lang.Throwable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeEmpty extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.operators.ScalarSupplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty>;
                            public static INSTANCE: io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty;
                            public constructor();
                            public get(): any;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source1: io.reactivex.rxjava3.core.MaybeSource<any>, source2: io.reactivex.rxjava3.core.MaybeSource<any>, isEqual: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeEqualSingle {
                            export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualCoordinator<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class EqualObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeError<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeError<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(error: java.lang.Throwable);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeErrorCallable<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(errorSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex1: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFilter<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeFilter {
                            export class FilterMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter.FilterMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFilterSingle<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module MaybeFilterSingle {
                            export class FilterMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatMapBiSelector<T, U, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector<any, any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeFlatMapBiSelector {
                            export class FlatMapBiMainObserver<T, U, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver<any, any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module FlatMapBiMainObserver {
                                export class InnerObserver<T, U, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver<any, any, any>>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(ex: any): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatMapCompletable {
                            export class FlatMapCompletableObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable.FlatMapCompletableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatMapIterableFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatMapIterableFlowable {
                            export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable.FlatMapIterableObserver<any, any>>;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(has: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public clear(): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatMapIterableObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatMapIterableObservable {
                            export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public onSuccess(has: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public clear(): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatMapNotification<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, onSuccessMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeFlatMapNotification {
                            export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module FlatMapMaybeObserver {
                                export class InnerObserver extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver>;
                                    public onComplete(): void;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatMapSingle<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle<any, any>>;
                            public constructor();
                            public subscribeActual(downstream: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatMapSingle {
                            export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class FlatMapSingleObserver<R> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapSingleObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFlatten<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatten {
                            export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module FlatMapMaybeObserver {
                                export class InnerObserver extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver>;
                                    public onComplete(): void;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromAction<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(action: io.reactivex.rxjava3.functions.Action);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromCallable<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallable<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(callable: java.util.concurrent.Callable<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromCompletable<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.CompletableSource;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeFromCompletable {
                            export class FromCompletableObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable.FromCompletableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromFuture<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture<any>>;
                            public constructor();
                            public constructor(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(v: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromRunnable<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(runnable: java.lang.Runnable);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromSingle<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.SingleSource<any>;
                        }
                        export module MaybeFromSingle {
                            export class FromSingleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.FromSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeFromSupplier<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeHide<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeHide<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeHide {
                            export class HideMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeHide.HideMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeIgnoreElement<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeIgnoreElement {
                            export class IgnoreMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement.IgnoreMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeIgnoreElementCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToMaybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable<any>>;
                            public constructor();
                            public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeIgnoreElementCompletable {
                            export class IgnoreMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable.IgnoreMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeIsEmpty<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeIsEmpty {
                            export class IsEmptyMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeIsEmptySingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<any>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public fuseToMaybe(): io.reactivex.rxjava3.core.Maybe<java.lang.Boolean>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeIsEmptySingle {
                            export class IsEmptyMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle.IsEmptyMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeJust<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.operators.ScalarSupplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeJust<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(value: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeLift<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeLift<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, operator: io.reactivex.rxjava3.core.MaybeOperator<any, any>);
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeMap<T, R> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMap<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeMap {
                            export class MapMaybeObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMap.MapMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeMaterialize<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Maybe<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeMergeArray<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray<any>>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>);
                            public subscribeActual(source: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module MaybeMergeArray {
                            export class ClqSimpleQueue<T> extends java.util.concurrent.ConcurrentLinkedQueue<any> implements io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.ClqSimpleQueue<any>>;
                                public offer(param0: any): boolean;
                                public clear(): void;
                                public drop(): void;
                                public peek(): any;
                                public offer(param0: any, param1: any): boolean;
                                public isEmpty(): boolean;
                                public consumerIndex(): number;
                                public offer(v1: any, v2: any): boolean;
                                public offer(e: any): boolean;
                                public producerIndex(): number;
                                public poll(): any;
                            }
                            export class MergeMaybeObserver<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MergeMaybeObserver<any>>;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public clear(): void;
                                public onSuccess(value: any): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                            export class MpscFillOnceSimpleQueue<T> extends java.util.concurrent.atomic.AtomicReferenceArray<any> implements io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MpscFillOnceSimpleQueue<any>>;
                                public clear(): void;
                                public offer(param0: any): boolean;
                                public peek(): any;
                                public drop(): void;
                                public offer(param0: any, param1: any): boolean;
                                public isEmpty(): boolean;
                                public consumerIndex(): number;
                                public offer(v1: any, v2: any): boolean;
                                public offer(value: any): boolean;
                                public producerIndex(): number;
                                public poll(): any;
                            }
                            export class SimpleQueueWithConsumerIndex<T> extends io.reactivex.rxjava3.operators.SimpleQueue<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex<any>>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    poll(): any;
                                    peek(): any;
                                    drop(): void;
                                    consumerIndex(): number;
                                    producerIndex(): number;
                                    offer(param0: any): boolean;
                                    offer(param0: any, param1: any): boolean;
                                    poll(): any;
                                    isEmpty(): boolean;
                                    clear(): void;
                                });
                                public constructor();
                                public offer(param0: any): boolean;
                                public clear(): void;
                                public peek(): any;
                                public drop(): void;
                                public offer(param0: any, param1: any): boolean;
                                public isEmpty(): boolean;
                                public consumerIndex(): number;
                                public producerIndex(): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeNever extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeNever>;
                            public static INSTANCE: io.reactivex.rxjava3.internal.operators.maybe.MaybeNever;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeObserveOn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeObserveOn {
                            export class ObserveOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeOnErrorComplete<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeOnErrorComplete {
                            export class OnErrorCompleteMultiObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete.OnErrorCompleteMultiObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onError(ex: java.lang.Throwable): void;
                                public constructor(actual: io.reactivex.rxjava3.core.MaybeObserver<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeOnErrorNext<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, resumeFunction: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeOnErrorNext {
                            export class OnErrorNextMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module OnErrorNextMaybeObserver {
                                export class NextMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver.NextMaybeObserver<any>>;
                                    public onComplete(): void;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeOnErrorReturn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, itemSupplier: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeOnErrorReturn {
                            export class OnErrorReturnMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn.OnErrorReturnMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybePeek<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybePeek<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, onSubscribeCall: io.reactivex.rxjava3.functions.Consumer<any>, onSuccessCall: io.reactivex.rxjava3.functions.Consumer<any>, onErrorCall: io.reactivex.rxjava3.functions.Consumer<any>, onCompleteCall: io.reactivex.rxjava3.functions.Action, onAfterTerminate: io.reactivex.rxjava3.functions.Action, onDispose: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybePeek {
                            export class MaybePeekObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybePeek.MaybePeekObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onSuccess(this_: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeSubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeSubscribeOn {
                            export class SubscribeOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeOnMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class SubscribeTask<T> extends java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeTask<any>>;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeSwitchIfEmpty<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeSwitchIfEmpty {
                            export class SwitchIfEmptyMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module SwitchIfEmptyMaybeObserver {
                                export class OtherMaybeObserver<T> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver.OtherMaybeObserver<any>>;
                                    public onComplete(): void;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeSwitchIfEmptySingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeSwitchIfEmptySingle {
                            export class SwitchIfEmptyMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module SwitchIfEmptyMaybeObserver {
                                export class OtherSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver.OtherSingleObserver<any>>;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeTakeUntilMaybe<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeTakeUntilMaybe {
                            export class TakeUntilMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module TakeUntilMainMaybeObserver {
                                export class TakeUntilOtherMaybeObserver<U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver<any>>;
                                    public onComplete(): void;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeTakeUntilPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeTakeUntilPublisher {
                            export class TakeUntilMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module TakeUntilMainMaybeObserver {
                                export class TakeUntilOtherMaybeObserver<U> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver<any>>;
                                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onNext(value: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeTimeInterval<T> extends io.reactivex.rxjava3.core.Maybe<io.reactivex.rxjava3.schedulers.Timed<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, start: boolean);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeTimeInterval {
                            export class TimeIntervalMaybeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval.TimeIntervalMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(t: T): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeTimeoutMaybe<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>, fallback: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeTimeoutMaybe {
                            export class TimeoutFallbackMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                            export class TimeoutMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public otherComplete(): void;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public otherError(e: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class TimeoutOtherMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeTimeoutPublisher<T, U> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, other: org.reactivestreams.Publisher<any>, fallback: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeTimeoutPublisher {
                            export class TimeoutFallbackMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutFallbackMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                            export class TimeoutMainMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public otherComplete(): void;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public otherError(e: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class TimeoutOtherMaybeObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(value: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeTimer extends io.reactivex.rxjava3.core.Maybe<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeTimer {
                            export class TimerDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer.TimerDisposable>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeToFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                        }
                        export module MaybeToFlowable {
                            export class MaybeToFlowableSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable.MaybeToFlowableSubscriber<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeToObservable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable<any>>;
                            public constructor();
                            public static create(downstream: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeToObservable {
                            export class MaybeToObservableObserver<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable.MaybeToObservableObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeToPublisher extends io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.MaybeSource<any>, org.reactivestreams.Publisher<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher>;
                            public static INSTANCE: io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher;
                            public static instance(): io.reactivex.rxjava3.functions.Function<any, any>;
                            public apply(t: io.reactivex.rxjava3.core.MaybeSource<any>): org.reactivestreams.Publisher<any>;
                            public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher>;
                            public apply(param0: any): any;
                            public static valueOf(name: string): io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeToSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, defaultValue: any);
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeToSingle {
                            export class ToSingleMaybeSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle.ToSingleMaybeSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeUnsafeCreate<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsafeCreate<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeUnsubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public source(): io.reactivex.rxjava3.core.MaybeSource<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeUnsubscribeOn {
                            export class UnsubscribeOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn.UnsubscribeOnMaybeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeUsing<T, D> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public constructor(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, resourceDisposer: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeUsing {
                            export class UsingObserver<T, D> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(resource: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onError(resource: java.lang.Throwable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeZipArray<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(i: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.MaybeSource<any>>, zipper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeZipArray {
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                            export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class ZipMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipMaybeObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module maybe {
                        export class MaybeZipIterable<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module MaybeZipIterable {
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class CompletableAndThenObservable<R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module CompletableAndThenObservable {
                            export class AndThenObservableObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable.AndThenObservableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class CompletableAndThenPublisher<R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource, other: org.reactivestreams.Publisher<any>);
                        }
                        export module CompletableAndThenPublisher {
                            export class AndThenPublisherSubscriber<R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher.AndThenPublisherSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export abstract class ConcatMapXMainObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public onSubscribe(mode: io.reactivex.rxjava3.disposables.Disposable): void;
                            public isDisposed(): boolean;
                            public onNext(t: any): void;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode);
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onNext(param0: any): void;
                            public onError(param0: java.lang.Throwable): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export abstract class ConcatMapXMainSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public onSubscribe(param0: org.reactivestreams.Subscription): void;
                            public onSubscribe(mode: org.reactivestreams.Subscription): void;
                            public onNext(t: any): void;
                            public constructor(prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableConcatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableConcatMapCompletable {
                            export class ConcatMapCompletableObserver<T> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any> implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module ConcatMapCompletableObserver {
                                export class ConcatMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableConcatMapMaybe<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                        }
                        export module FlowableConcatMapMaybe {
                            export class ConcatMapMaybeSubscriber<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any> implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public request(n: number): void;
                            }
                            export module ConcatMapMaybeSubscriber {
                                export class ConcatMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableConcatMapMaybePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybePublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableConcatMapSingle<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                        }
                        export module FlowableConcatMapSingle {
                            export class ConcatMapSingleSubscriber<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber<any> implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber<any, any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public request(n: number): void;
                            }
                            export module ConcatMapSingleSubscriber {
                                export class ConcatMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber.ConcatMapSingleObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableConcatMapSinglePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSinglePublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableSwitchMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module FlowableSwitchMapCompletable {
                            export class SwitchMapCompletableObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(ex: T): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module SwitchMapCompletableObserver {
                                export class SwitchMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableSwitchMapCompletablePublisher<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletablePublisher<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableSwitchMapMaybe<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                        }
                        export module FlowableSwitchMapMaybe {
                            export class SwitchMapMaybeSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module SwitchMapMaybeSubscriber {
                                export class SwitchMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableSwitchMapMaybePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybePublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableSwitchMapSingle<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Flowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                        }
                        export module FlowableSwitchMapSingle {
                            export class SwitchMapSingleSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export module SwitchMapSingleSubscriber {
                                export class SwitchMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber.SwitchMapSingleObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class FlowableSwitchMapSinglePublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSinglePublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class MaterializeSingleObserver<T> extends java.lang.Object {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver<any>>;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public onSuccess(param0: T): void;
                            public isDisposed(): boolean;
                            public onSuccess(t: T): void;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public constructor(downstream: io.reactivex.rxjava3.core.SingleObserver<any>);
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(e: java.lang.Throwable): void;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class MaybeFlatMapObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatMapObservable {
                            export class FlatMapObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable.FlatMapObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class MaybeFlatMapPublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.MaybeSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module MaybeFlatMapPublisher {
                            export class FlatMapPublisherSubscriber<T, R> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher.FlatMapPublisherSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onSuccess(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ObservableConcatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableConcatMapCompletable {
                            export class ConcatMapCompletableObserver<T> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable.ConcatMapCompletableObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module ConcatMapCompletableObserver {
                                export class ConcatMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ObservableConcatMapMaybe<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableConcatMapMaybe {
                            export class ConcatMapMaybeMainObserver<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module ConcatMapMaybeMainObserver {
                                export class ConcatMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver.ConcatMapMaybeObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ObservableConcatMapSingle<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, prefetch: number);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableConcatMapSingle {
                            export class ConcatMapSingleMainObserver<T, R> extends io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module ConcatMapSingleMainObserver {
                                export class ConcatMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver.ConcatMapSingleObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ObservableSwitchMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableSwitchMapCompletable {
                            export class SwitchMapCompletableObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(ex: T): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module SwitchMapCompletableObserver {
                                export class SwitchMapInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ObservableSwitchMapMaybe<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableSwitchMapMaybe {
                            export class SwitchMapMaybeMainObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module SwitchMapMaybeMainObserver {
                                export class SwitchMapMaybeObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ObservableSwitchMapSingle<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableSwitchMapSingle {
                            export class SwitchMapSingleMainObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module SwitchMapSingleMainObserver {
                                export class SwitchMapSingleObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class ScalarXMapZHelper {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.ScalarXMapZHelper>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module mixed {
                        export class SingleFlatMapObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFlatMapObservable {
                            export class FlatMapObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable.FlatMapObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export abstract class AbstractObservableWithUpstream<T, U> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any>>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class BlockingObservableIterable<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable<any>>;
                            public iterator(): java.util.Iterator<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number);
                        }
                        export module BlockingObservableIterable {
                            export class BlockingObservableIterator<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable.BlockingObservableIterator<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public next(): any;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public hasNext(): boolean;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public remove(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class BlockingObservableLatest<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest<any>>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public iterator(): java.util.Iterator<any>;
                        }
                        export module BlockingObservableLatest {
                            export class BlockingObservableLatestIterator<T> extends io.reactivex.rxjava3.observers.DisposableObserver<io.reactivex.rxjava3.core.Notification<any>> implements java.util.Iterator<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest.BlockingObservableLatestIterator<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(args: io.reactivex.rxjava3.core.Notification<any>): void;
                                public next(): any;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public hasNext(): boolean;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public remove(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class BlockingObservableMostRecent<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent<any>>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, initialValue: any);
                            public iterator(): java.util.Iterator<any>;
                        }
                        export module BlockingObservableMostRecent {
                            export class MostRecentObserver<T> extends io.reactivex.rxjava3.observers.DefaultObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onNext(args: any): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public getIterable(): io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver.MostRecentIterator;
                                public onNext(param0: any): void;
                            }
                            export module MostRecentObserver {
                                export class MostRecentIterator extends java.util.Iterator<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver.MostRecentIterator>;
                                    public hasNext(): boolean;
                                    public remove(): void;
                                    public next(): any;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class BlockingObservableNext<T> extends java.lang.Iterable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext<any>>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public iterator(): java.util.Iterator<any>;
                        }
                        export module BlockingObservableNext {
                            export class NextIterator<T> extends java.util.Iterator<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator<any>>;
                                public next(): any;
                                public hasNext(): boolean;
                                public remove(): void;
                            }
                            export class NextObserver<T> extends io.reactivex.rxjava3.observers.DisposableObserver<io.reactivex.rxjava3.core.Notification<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(toOffer: io.reactivex.rxjava3.core.Notification<any>): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public takeNext(): io.reactivex.rxjava3.core.Notification<any>;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableAll<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAll<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableAll {
                            export class AllObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAll.AllObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableAllSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Boolean>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableAllSingle {
                            export class AllObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle.AllObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableAmb<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAmb<any>>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, sourcesIterable: java.lang.Iterable<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(p: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableAmb {
                            export class AmbCoordinator<T> extends io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public win(a: number): boolean;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(i: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class AmbInnerObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableAny<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAny<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableAny {
                            export class AnyObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAny.AnyObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableAnySingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Boolean>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableAnySingle {
                            export class AnyObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle.AnyObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableAutoConnect<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableAutoConnect<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.observables.ConnectableObservable<any>, numberOfObservers: number, connection: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(child: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableBlockingSubscribe {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe>;
                            public static subscribe(o: io.reactivex.rxjava3.core.ObservableSource<any>): void;
                            public static subscribe(o: io.reactivex.rxjava3.core.ObservableSource<any>, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): void;
                            public static subscribe(ex: io.reactivex.rxjava3.core.ObservableSource<any>, v: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableBuffer<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, count: number, skip: number, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableBuffer {
                            export class BufferExactObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferExactObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class BufferSkipObserver<T, U> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferSkipObserver<any, any>>;
                                public dispose(): void;
                                public onNext(e: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableBufferBoundary<T, U, Open, Close> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary<any, any, any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, bufferOpen: io.reactivex.rxjava3.core.ObservableSource<any>, bufferClose: io.reactivex.rxjava3.functions.Function<any, any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableBufferBoundary {
                            export class BufferBoundaryObserver<T, C, Open, Close> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver<any, any, any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(bufs: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module BufferBoundaryObserver {
                                export class BufferOpenObserver<Open> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver.BufferOpenObserver<any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                            export class BufferCloseObserver<T, C> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferCloseObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableBufferExactBoundary<T, U, B> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary<any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, boundary: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableBufferExactBoundary {
                            export class BufferBoundaryObserver<T, U, B> extends io.reactivex.rxjava3.observers.DisposableObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferBoundaryObserver<any, any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class BufferExactBoundaryObserver<T, U, B> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver<any, any, any>>;
                                public dispose(): void;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                                public cancelled(): boolean;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public onSubscribe(e: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public accept(a: io.reactivex.rxjava3.core.Observer<any>, v: any): void;
                                public error(): java.lang.Throwable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableBufferTimed<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSupplier: io.reactivex.rxjava3.functions.Supplier<any>, maxSize: number, restartTimerOnMaxSize: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableBufferTimed {
                            export class BufferExactBoundedObserver<T, U> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactBoundedObserver<any, any>>;
                                public dispose(): void;
                                public onNext(e: any): void;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                                public cancelled(): boolean;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public onSubscribe(e: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public accept(a: io.reactivex.rxjava3.core.Observer<any>, v: any): void;
                                public error(): java.lang.Throwable;
                            }
                            export class BufferExactUnboundedObserver<T, U> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactUnboundedObserver<any, any>>;
                                public dispose(): void;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                                public cancelled(): boolean;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public onSubscribe(e: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public accept(a: io.reactivex.rxjava3.core.Observer<any>, v: any): void;
                                public error(): java.lang.Throwable;
                            }
                            export class BufferSkipBoundedObserver<T, U> extends io.reactivex.rxjava3.internal.observers.QueueDrainObserver<any, any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver<any, any>>;
                                public dispose(): void;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public done(): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                                public cancelled(): boolean;
                                public leave(param0: number): number;
                                public isDisposed(): boolean;
                                public onSubscribe(e: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public enter(): boolean;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public accept(a: io.reactivex.rxjava3.core.Observer<any>, v: any): void;
                                public error(): java.lang.Throwable;
                            }
                            export module BufferSkipBoundedObserver {
                                export class RemoveFromBuffer {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBuffer>;
                                    public run(): void;
                                }
                                export class RemoveFromBufferEmit {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBufferEmit>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCache<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> implements io.reactivex.rxjava3.core.Observer<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCache<any>>;
                            public constructor();
                            public onComplete(): void;
                            public onError(this_: java.lang.Throwable): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, capacityHint: number);
                            public onNext(consumer: any): void;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                            public onNext(param0: any): void;
                            public onError(param0: java.lang.Throwable): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                        export module ObservableCache {
                            export class CacheDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCache.CacheDisposable<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class Node<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCache.Node<any>>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCollect<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollect<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, initialSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableCollect {
                            export class CollectObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCollectSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle<any, any>>;
                            public constructor();
                            public subscribeActual(e: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, initialSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableCollectSingle {
                            export class CollectObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCombineLatest<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest<any, any>>;
                            public constructor();
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, sourcesIterable: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(p: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableCombineLatest {
                            export class CombinerObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.CombinerObserver<any, any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export class LatestCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.LatestCoordinator<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(this_: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableConcatMap<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayErrors: io.reactivex.rxjava3.internal.util.ErrorMode);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableConcatMap {
                            export class ConcatMapDelayErrorObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(value: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module ConcatMapDelayErrorObserver {
                                export class DelayErrorInnerObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver.DelayErrorInnerObserver<any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(value: any): void;
                                }
                            }
                            export class SourceObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module SourceObserver {
                                export class InnerObserver<U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver.InnerObserver<any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableConcatMapEager<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode, maxConcurrency: number, prefetch: number);
                        }
                        export module ObservableConcatMapEager {
                            export class ConcatMapEagerMainObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public innerNext(inner: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>, value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public innerError(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>, param1: java.lang.Throwable): void;
                                public drain(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                                public isDisposed(): boolean;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(value: any): void;
                                public innerComplete(inner: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>): void;
                                public onError(param0: java.lang.Throwable): void;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>): void;
                                public innerError(inner: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>, e: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public innerNext(param0: io.reactivex.rxjava3.internal.observers.InnerQueuedObserver<any>, param1: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableConcatMapScheduler<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayErrors: io.reactivex.rxjava3.internal.util.ErrorMode, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableConcatMapScheduler {
                            export class ConcatMapDelayErrorObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(value: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module ConcatMapDelayErrorObserver {
                                export class DelayErrorInnerObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver.DelayErrorInnerObserver<any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(value: any): void;
                                }
                            }
                            export class ConcatMapObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module ConcatMapObserver {
                                export class InnerObserver<U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver<any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableConcatWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: io.reactivex.rxjava3.core.CompletableSource);
                        }
                        export module ObservableConcatWithCompletable {
                            export class ConcatWithObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable.ConcatWithObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableConcatWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableConcatWithMaybe {
                            export class ConcatWithObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe.ConcatWithObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(t: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableConcatWithSingle<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: io.reactivex.rxjava3.core.SingleSource<any>);
                        }
                        export module ObservableConcatWithSingle {
                            export class ConcatWithObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(t: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCount<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCount<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableCount {
                            export class CountObserver extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCount.CountObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCountSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Long> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Long>;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableCountSingle {
                            export class CountObserver extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle.CountObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableCreate<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCreate<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableCreate {
                            export class CreateEmitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.CreateEmitter<any>>;
                                public dispose(): void;
                                public toString(): string;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public tryOnError(t: java.lang.Throwable): boolean;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class SerializedEmitter<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.ObservableEmitter<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter<any>>;
                                public toString(): string;
                                public isDisposed(): boolean;
                                public tryOnError(t: java.lang.Throwable): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public serialize(): io.reactivex.rxjava3.core.ObservableEmitter<any>;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public onNext(this_: any): void;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDebounce<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, debounceSelector: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableDebounce {
                            export class DebounceObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module DebounceObserver {
                                export class DebounceInnerObserver<T, U> extends io.reactivex.rxjava3.observers.DisposableObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver.DebounceInnerObserver<any, any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(t: java.lang.Throwable): void;
                                    public onNext(t: any): void;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDebounceTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableDebounceTimed {
                            export class DebounceEmitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceEmitter<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class DebounceTimedObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceTimedObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDefer<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDefer<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDelay<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean);
                        }
                        export module ObservableDelay {
                            export class DelayObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module DelayObserver {
                                export class OnComplete {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnComplete>;
                                    public run(): void;
                                }
                                export class OnError {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnError>;
                                    public run(): void;
                                }
                                export class OnNext {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDelaySubscriptionOther<T, U> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther<any, any>>;
                            public constructor();
                            public constructor(main: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(child: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableDelaySubscriptionOther {
                            export class DelayObserver extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther.DelayObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export module DelayObserver {
                                export class OnComplete extends io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther.DelayObserver.OnComplete>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(value: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDematerialize<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, selector: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableDematerialize {
                            export class DematerializeObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize.DematerializeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(notification: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDetach<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDetach<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableDetach {
                            export class DetachObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDetach.DetachObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDistinct<T, K> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableDistinct {
                            export class DistinctObserver<T, K> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public clear(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(b: any): void;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public poll(): any;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDistinctUntilChanged<T, K> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableDistinctUntilChanged {
                            export class DistinctUntilChangedObserver<T, K> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged.DistinctUntilChangedObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(key: any): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public poll(): any;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDoAfterNext<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, onAfterNext: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableDoAfterNext {
                            export class DoAfterObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext.DoAfterObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public poll(): any;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDoFinally<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, onFinally: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableDoFinally {
                            export class DoFinallyObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally.DoFinallyObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public clear(): void;
                                public isEmpty(): boolean;
                                public requestFusion(this_: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDoOnEach<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onAfterTerminate: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableDoOnEach {
                            export class DoOnEachObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach.DoOnEachObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableDoOnLifecycle<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnLifecycle<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(upstream: io.reactivex.rxjava3.core.Observable<any>, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableElementAt<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, index: number, defaultValue: any, errorOnFewer: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableElementAt {
                            export class ElementAtObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableElementAtMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, index: number);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableElementAtMaybe {
                            export class ElementAtObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe.ElementAtObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableElementAtSingle<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, index: number, defaultValue: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableElementAtSingle {
                            export class ElementAtObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle.ElementAtObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableEmpty extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.operators.ScalarSupplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableEmpty>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Observable<any>;
                            public get(): any;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableError<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableError<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(errorSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFilter<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFilter<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableFilter {
                            export class FilterObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: any): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public poll(): any;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFlatMap<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean, maxConcurrency: number, bufferSize: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableFlatMap {
                            export class InnerObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.InnerObserver<any, any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export class MergeObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.MergeObserver<any, any>>;
                                public dispose(): void;
                                public onNext(e: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFlatMapCompletable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableFlatMapCompletable {
                            export class FlatMapCompletableMainObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable.FlatMapCompletableMainObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public onError(param0: java.lang.Throwable): void;
                                public clear(): void;
                                public onNext(ex: any): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export module FlatMapCompletableMainObserver {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable.FlatMapCompletableMainObserver.InnerObserver>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFlatMapCompletableCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable<any>>;
                            public constructor();
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayErrors: boolean);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableFlatMapCompletableCompletable {
                            export class FlatMapCompletableMainObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable.FlatMapCompletableMainObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module FlatMapCompletableMainObserver {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable.FlatMapCompletableMainObserver.InnerObserver>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFlatMapMaybe<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableFlatMapMaybe {
                            export class FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe.FlatMapMaybeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module FlatMapMaybeObserver {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe.FlatMapMaybeObserver.InnerObserver>;
                                    public onComplete(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public onSuccess(value: any): void;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFlatMapSingle<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableFlatMapSingle {
                            export class FlatMapSingleObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module FlatMapSingleObserver {
                                export class InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver.InnerObserver>;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public onSuccess(value: any): void;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFlattenIterable<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableFlattenIterable {
                            export class FlattenIterableObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(ex: T): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromAction<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromAction<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(action: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromArray<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(array: androidNative.Array<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableFromArray {
                            export class FromArrayDisposable<T> extends io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable<any>>;
                                public dispose(): void;
                                public clear(): void;
                                public isDisposed(): boolean;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromCallable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallable<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(callable: java.util.concurrent.Callable<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromCompletable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamCompletableSource {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.CompletableSource;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableFromCompletable {
                            export class FromCompletableObserver<T> extends io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable<any> implements io.reactivex.rxjava3.core.CompletableObserver {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable.FromCompletableObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public constructor();
                                public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromFuture<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromFuture<any>>;
                            public constructor();
                            public constructor(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromIterable<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: java.lang.Iterable<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableFromIterable {
                            export class FromIterableDisposable<T> extends io.reactivex.rxjava3.internal.observers.BasicQueueDisposable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.FromIterableDisposable<any>>;
                                public dispose(): void;
                                public clear(): void;
                                public isDisposed(): boolean;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public poll(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromPublisher<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(publisher: org.reactivestreams.Publisher<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableFromPublisher {
                            export class PublisherSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher.PublisherSubscriber<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromRunnable<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(run: java.lang.Runnable);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromSupplier<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.functions.Supplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableFromUnsafeSource<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableFromUnsafeSource<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableGenerate<T, S> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(stateSupplier: io.reactivex.rxjava3.functions.Supplier<any>, generator: io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any>, disposeState: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableGenerate {
                            export class GeneratorDisposable<T, S> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate.GeneratorDisposable<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableGroupBy<T, K, V> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.observables.GroupedObservable<any, any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy<any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableGroupBy {
                            export class GroupByObserver<T, K, V> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupByObserver<any, any, any>>;
                                public dispose(): void;
                                public constructor(actual: io.reactivex.rxjava3.core.Observer<any>, keySelector: io.reactivex.rxjava3.functions.Function<any, any>, valueSelector: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean);
                                public onNext(e: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public cancel(key: any): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(this_: java.lang.Throwable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class GroupedUnicast<K, T> extends io.reactivex.rxjava3.observables.GroupedObservable<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast<any, any>>;
                                public static createWith(key: any, bufferSize: number, parent: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupByObserver<any, any, any>, delayError: boolean): io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast<any, any>;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                                public constructor();
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                                public onNext(t: any): void;
                                public constructor(key: any);
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public constructor(key: any, state: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State<any, any>);
                            }
                            export class State<T, K> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(u: io.reactivex.rxjava3.core.Observer<any>): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableGroupJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin<any, any, any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module ObservableGroupJoin {
                            export class GroupJoinDisposable<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.GroupJoinDisposable<any, any, any, any, any>>;
                                public dispose(): void;
                                public innerError(ex: java.lang.Throwable): void;
                                public innerValue(param0: boolean, param1: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                                public innerCloseError(param0: java.lang.Throwable): void;
                                public innerComplete(sender: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                                public innerClose(isLeft: boolean, index: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                                public innerValue(isLeft: boolean, o: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public innerCloseError(ex: java.lang.Throwable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class JoinSupport {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.JoinSupport>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    innerError(param0: java.lang.Throwable): void;
                                    innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                                    innerValue(param0: boolean, param1: any): void;
                                    innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                                    innerCloseError(param0: java.lang.Throwable): void;
                                });
                                public constructor();
                                public innerValue(param0: boolean, param1: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public innerCloseError(param0: java.lang.Throwable): void;
                                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                            }
                            export class LeftRightEndObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class LeftRightObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableHide<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableHide<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableHide {
                            export class HideDisposable<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableHide.HideDisposable<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableIgnoreElements<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableIgnoreElements {
                            export class IgnoreObservable<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements.IgnoreObservable<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(v: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableIgnoreElementsCompletable<T> extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribeActual(t: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableIgnoreElementsCompletable {
                            export class IgnoreObservable<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(v: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableInternalHelper {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper>;
                            public static observerOnComplete(observer: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.functions.Action;
                            public static simpleBiGenerator(consumer: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                            public static observerOnError(observer: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
                            public static flatMapWithCombiner(mapper: io.reactivex.rxjava3.functions.Function<any, any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Observable<any>): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static simpleGenerator(consumer: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                            public static flatMapIntoIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                            public static observerOnNext(observer: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.functions.Consumer<any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Observable<any>, bufferSize: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Observable<any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static replaySupplier(parent: io.reactivex.rxjava3.core.Observable<any>, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.functions.Supplier<any>;
                            public static itemDelay(itemDelay: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.functions.Function<any, any>;
                        }
                        export module ObservableInternalHelper {
                            export class BufferedReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier<any>>;
                                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                                public get(): any;
                            }
                            export class BufferedTimedReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier<any>>;
                                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                                public get(): any;
                            }
                            export class FlatMapIntoIterable<T, U> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapIntoIterable<any, any>>;
                                public apply(t: any): io.reactivex.rxjava3.core.ObservableSource<any>;
                                public apply(param0: any): any;
                            }
                            export class FlatMapWithCombinerInner<U, R, T> extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerInner<any, any, any>>;
                                public apply(w: any): any;
                                public apply(param0: any): any;
                            }
                            export class FlatMapWithCombinerOuter<T, R, U> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter<any, any, any>>;
                                public apply(t: any): io.reactivex.rxjava3.core.ObservableSource<any>;
                                public apply(param0: any): any;
                            }
                            export class ItemDelayFunction<T, U> extends io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction<any, any>>;
                                public apply(v: any): io.reactivex.rxjava3.core.ObservableSource<any>;
                                public apply(param0: any): any;
                            }
                            export class MapToInt extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt>;
                                public static INSTANCE: io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt;
                                public static valueOf(name: string): io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt;
                                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.MapToInt>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                            export class ObserverOnComplete<T> extends io.reactivex.rxjava3.functions.Action {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete<any>>;
                                public run(): void;
                            }
                            export class ObserverOnError<T> extends io.reactivex.rxjava3.functions.Consumer<java.lang.Throwable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnError<any>>;
                                public accept(param0: any): void;
                                public accept(v: java.lang.Throwable): void;
                            }
                            export class ObserverOnNext<T> extends io.reactivex.rxjava3.functions.Consumer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnNext<any>>;
                                public accept(param0: any): void;
                                public accept(v: any): void;
                            }
                            export class ReplaySupplier<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ReplaySupplier<any>>;
                                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                                public get(): any;
                            }
                            export class SimpleBiGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleBiGenerator<any, any>>;
                                public apply(param0: any, param1: any): any;
                                public apply(t1: any, t2: io.reactivex.rxjava3.core.Emitter<any>): any;
                            }
                            export class SimpleGenerator<T, S> extends io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.Emitter<any>, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator<any, any>>;
                                public apply(param0: any, param1: any): any;
                                public apply(t1: any, t2: io.reactivex.rxjava3.core.Emitter<any>): any;
                            }
                            export class TimedReplayCallable<T> extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.observables.ConnectableObservable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.TimedReplayCallable<any>>;
                                public get(): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                                public get(): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableInterval extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInterval>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(d: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableInterval {
                            export class IntervalObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableInterval.IntervalObserver>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableIntervalRange extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(start: number, end: number, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(d: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableIntervalRange {
                            export class IntervalRangeObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.IntervalRangeObserver>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableJoin<TLeft, TRight, TLeftEnd, TRightEnd, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableJoin<any, any, any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>, leftEnd: io.reactivex.rxjava3.functions.Function<any, any>, rightEnd: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module ObservableJoin {
                            export class JoinDisposable<TLeft, TRight, TLeftEnd, TRightEnd, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableJoin.JoinDisposable<any, any, any, any, any>>;
                                public dispose(): void;
                                public innerError(ex: java.lang.Throwable): void;
                                public innerValue(param0: boolean, param1: any): void;
                                public innerError(param0: java.lang.Throwable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public innerClose(param0: boolean, param1: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public innerComplete(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                                public innerCloseError(param0: java.lang.Throwable): void;
                                public innerComplete(sender: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightObserver): void;
                                public innerClose(isLeft: boolean, index: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.LeftRightEndObserver): void;
                                public innerValue(isLeft: boolean, o: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public innerCloseError(ex: java.lang.Throwable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableJust<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.operators.ScalarSupplier<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableJust<any>>;
                            public constructor();
                            public get(): any;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(value: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableLastMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableLastMaybe {
                            export class LastObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe.LastObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableLastSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, defaultItem: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableLastSingle {
                            export class LastObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle.LastObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableLift<R, T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableLift<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, operator: io.reactivex.rxjava3.core.ObservableOperator<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableMap<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMap<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, function_: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableMap {
                            export class MapObserver<T, U> extends io.reactivex.rxjava3.internal.observers.BasicFuseableObserver<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public onComplete(): void;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public poll(): any;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableMapNotification<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.ObservableSource<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, onNextMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>, onCompleteSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableMapNotification {
                            export class MapNotificationObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification.MapNotificationObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableMaterialize<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Notification<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableMaterialize {
                            export class MaterializeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize.MaterializeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableMergeWithCompletable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: io.reactivex.rxjava3.core.CompletableSource);
                        }
                        export module ObservableMergeWithCompletable {
                            export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable.MergeWithObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module MergeWithObserver {
                                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.CompletableObserver {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable.MergeWithObserver.OtherObserver>;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableMergeWithMaybe<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: io.reactivex.rxjava3.core.MaybeSource<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableMergeWithMaybe {
                            export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module MergeWithObserver {
                                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableMergeWithSingle<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: io.reactivex.rxjava3.core.SingleSource<any>);
                        }
                        export module ObservableMergeWithSingle {
                            export class MergeWithObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module MergeWithObserver {
                                export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver.OtherObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableNever extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableNever>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Observable<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableObserveOn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean, bufferSize: number);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableObserveOn {
                            export class ObserveOnObserver<T> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn.ObserveOnObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public poll(): any;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public clear(): void;
                                public isEmpty(): boolean;
                                public run(): void;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableOnErrorComplete<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableOnErrorComplete {
                            export class OnErrorCompleteObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete.OnErrorCompleteObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(value: T): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public constructor(actual: io.reactivex.rxjava3.core.Observer<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableOnErrorNext<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, nextSupplier: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableOnErrorNext {
                            export class OnErrorNextObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext.OnErrorNextObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableOnErrorReturn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, valueSupplier: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableOnErrorReturn {
                            export class OnErrorReturnObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn.OnErrorReturnObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservablePublish<T> extends io.reactivex.rxjava3.observables.ConnectableObservable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public connect(ex: io.reactivex.rxjava3.functions.Consumer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                            public reset(): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public connect(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservablePublish {
                            export class InnerDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.PublishConnection<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class PublishConnection<T> extends java.util.concurrent.atomic.AtomicReference<androidNative.Array<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.PublishConnection<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(this_: java.lang.Throwable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public add(n: io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>): boolean;
                                public remove(a: io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable<any>): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservablePublishSelector<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, selector: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservablePublishSelector {
                            export class SourceObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(value: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export class TargetObserver<R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.TargetObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(value: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRange extends io.reactivex.rxjava3.core.Observable<java.lang.Integer> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRange>;
                            public constructor();
                            public constructor(start: number, count: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableRange {
                            export class RangeDisposable extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<java.lang.Integer> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRange.RangeDisposable>;
                                public dispose(): void;
                                public clear(): void;
                                public isDisposed(): boolean;
                                public poll(): java.lang.Integer;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRangeLong extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong>;
                            public constructor();
                            public constructor(start: number, count: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableRangeLong {
                            export class RangeDisposable extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<java.lang.Long> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong.RangeDisposable>;
                                public dispose(): void;
                                public clear(): void;
                                public isDisposed(): boolean;
                                public isEmpty(): boolean;
                                public poll(): java.lang.Long;
                                public requestFusion(mode: number): number;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableReduceMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe<any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableReduceMaybe {
                            export class ReduceObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe.ReduceObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(v: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableReduceSeedSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, seed: any, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableReduceSeedSingle {
                            export class ReduceSeedObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle.ReduceSeedObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableReduceWithSingle<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRefCount<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(conn: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.observables.ConnectableObservable<any>, n: number, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.observables.ConnectableObservable<any>);
                        }
                        export module ObservableRefCount {
                            export class RefConnection extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection>;
                                public accept(param0: any): void;
                                public accept(t: io.reactivex.rxjava3.disposables.Disposable): void;
                                public run(): void;
                            }
                            export class RefCountObserver<T> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefCountObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRepeat<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, count: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableRepeat {
                            export class RepeatObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat.RepeatObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRepeatUntil<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, until: io.reactivex.rxjava3.functions.BooleanSupplier);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableRepeatUntil {
                            export class RepeatUntilObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil.RepeatUntilObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRepeatWhen<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, handler: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableRepeatWhen {
                            export class RepeatWhenObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen.RepeatWhenObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module RepeatWhenObserver {
                                export class InnerRepeatObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen.RepeatWhenObserver.InnerRepeatObserver>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableReplay<T> extends io.reactivex.rxjava3.observables.ConnectableObservable<any> implements io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay<any>>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public connect(u: io.reactivex.rxjava3.functions.Consumer<any>): void;
                            public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public static createFrom(source: io.reactivex.rxjava3.core.ObservableSource<any>): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                            public static create(source: io.reactivex.rxjava3.core.ObservableSource<any>, maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                            public reset(): void;
                            public static create(source: io.reactivex.rxjava3.core.ObservableSource<any>, bufferSize: number, eagerTruncate: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static multicastSelector(connectableFactory: io.reactivex.rxjava3.functions.Supplier<any>, selector: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static create(source: io.reactivex.rxjava3.core.ObservableSource<any>, maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, eagerTruncate: boolean): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                            public connect(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableReplay {
                            export abstract class BoundedReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.Node> implements io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public error(e: java.lang.Throwable): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
                                public next(value: any): void;
                                public replay(v: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
                            }
                            export class BufferSupplier<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any>>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<T>;
                                });
                                public constructor();
                                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<T>;
                            }
                            export class DisposeConsumer<R> extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.DisposeConsumer<any>>;
                                public accept(param0: any): void;
                                public accept(r: io.reactivex.rxjava3.disposables.Disposable): void;
                            }
                            export class InnerDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class MulticastReplay<R, U> extends io.reactivex.rxjava3.core.Observable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.MulticastReplay<any, any>>;
                                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                                public subscribeActual(observable: io.reactivex.rxjava3.core.Observer<any>): void;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            }
                            export class Node extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.Node> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.Node>;
                            }
                            export class ReplayBuffer<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    next(param0: T): void;
                                    error(param0: java.lang.Throwable): void;
                                    complete(): void;
                                    replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<T>): void;
                                });
                                public constructor();
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<T>): void;
                                public next(param0: T): void;
                            }
                            export class ReplayBufferSupplier<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier<any>>;
                                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>;
                            }
                            export class ReplayObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(p: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class ReplaySource<T> extends io.reactivex.rxjava3.core.ObservableSource<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplaySource<any>>;
                                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                                public subscribe(u: io.reactivex.rxjava3.core.Observer<any>): void;
                            }
                            export class ScheduledReplaySupplier<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ScheduledReplaySupplier<any>>;
                                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>;
                            }
                            export class SizeAndTimeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeAndTimeBoundReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
                            }
                            export class SizeBoundReplayBuffer<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeBoundReplayBuffer<any>>;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
                            }
                            export class UnBoundedFactory extends io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.UnBoundedFactory>;
                                public call(): io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any>;
                            }
                            export class UnboundedReplayBuffer<T> extends java.util.ArrayList<any> implements io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.UnboundedReplayBuffer<any>>;
                                public replay(sourceIndex: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
                                public next(param0: any): void;
                                public error(param0: java.lang.Throwable): void;
                                public complete(): void;
                                public error(e: java.lang.Throwable): void;
                                public replay(param0: io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable<any>): void;
                                public next(value: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRetryBiPredicate<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, predicate: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableRetryBiPredicate {
                            export class RetryBiObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRetryPredicate<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, count: number, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableRetryPredicate {
                            export class RepeatObserver<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableRetryWhen<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, handler: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableRetryWhen {
                            export class RepeatWhenObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen.RepeatWhenObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module RepeatWhenObserver {
                                export class InnerRepeatObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen.RepeatWhenObserver.InnerRepeatObserver>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSampleTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, period: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableSampleTimed {
                            export class SampleTimedEmitLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedEmitLast<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class SampleTimedNoLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedNoLast<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export abstract class SampleTimedObserver<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSampleWithObservable<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>, emitLast: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableSampleWithObservable {
                            export class SampleMainEmitLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainEmitLast<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class SampleMainNoLast<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainNoLast<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export abstract class SampleMainObserver<T> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public complete(): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public error(e: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class SamplerObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SamplerObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableScalarXMap {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap>;
                            public static scalarXMap(value: any, mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.core.Observable<any>;
                            public static tryScalarXMapSubscribe(t: io.reactivex.rxjava3.core.ObservableSource<any>, ex: io.reactivex.rxjava3.core.Observer<any>, r: io.reactivex.rxjava3.functions.Function<any, any>): boolean;
                        }
                        export module ObservableScalarXMap {
                            export class ScalarDisposable<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarDisposable<any>>;
                                public dispose(): void;
                                public offer(param0: any): boolean;
                                public constructor(observer: io.reactivex.rxjava3.core.Observer<any>, value: any);
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public offer(v1: any, v2: any): boolean;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public poll(): any;
                                public clear(): void;
                                public requestFusion(param0: number): number;
                                public offer(param0: any, param1: any): boolean;
                                public isEmpty(): boolean;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public offer(value: any): boolean;
                                public requestFusion(mode: number): number;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class ScalarXMapObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarXMapObservable<any, any>>;
                                public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                                public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableScan<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScan<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableScan {
                            export class ScanObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableScanSeed<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, seedSupplier: io.reactivex.rxjava3.functions.Supplier<any>, accumulator: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableScanSeed {
                            export class ScanSeedObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed.ScanSeedObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSequenceEqual<T> extends io.reactivex.rxjava3.core.Observable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(first: io.reactivex.rxjava3.core.ObservableSource<any>, second: io.reactivex.rxjava3.core.ObservableSource<any>, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>, bufferSize: number);
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableSequenceEqual {
                            export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualCoordinator<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class EqualObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSequenceEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<java.lang.Boolean>;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(first: io.reactivex.rxjava3.core.ObservableSource<any>, second: io.reactivex.rxjava3.core.ObservableSource<any>, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>, bufferSize: number);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableSequenceEqualSingle {
                            export class EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualCoordinator<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class EqualObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSerialized<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSerialized<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(upstream: io.reactivex.rxjava3.core.Observable<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSingleMaybe<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableSingleMaybe {
                            export class SingleElementObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe.SingleElementObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSingleSingle<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(t: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, defaultValue: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableSingleSingle {
                            export class SingleElementObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle.SingleElementObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSkip<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkip<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, n: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableSkip {
                            export class SkipObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkip.SkipObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSkipLast<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, skip: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableSkipLast {
                            export class SkipLastObserver<T> extends java.util.ArrayDeque<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast.SkipLastObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSkipLastTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number, delayError: boolean);
                        }
                        export module ObservableSkipLastTimed {
                            export class SkipLastTimedObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed.SkipLastTimedObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSkipUntil<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(child: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableSkipUntil {
                            export class SkipUntil extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntil>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export class SkipUntilObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSkipWhile<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableSkipWhile {
                            export class SkipWhileObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile.SkipWhileObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableSubscribeOn {
                            export class SubscribeOnObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn.SubscribeOnObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class SubscribeTask {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn.SubscribeTask>;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSwitchIfEmpty<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableSwitchIfEmpty {
                            export class SwitchIfEmptyObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty.SwitchIfEmptyObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableSwitchMap<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayErrors: boolean);
                        }
                        export module ObservableSwitchMap {
                            export class SwitchMapInnerObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: io.reactivex.rxjava3.disposables.Disposable): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export class SwitchMapObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapObserver<any, any>>;
                                public dispose(): void;
                                public onNext(e: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTake<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTake<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, limit: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableTake {
                            export class TakeObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTake.TakeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(this_: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTakeLast<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, count: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableTakeLast {
                            export class TakeLastObserver<T> extends java.util.ArrayDeque<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTakeLastOne<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableTakeLastOne {
                            export class TakeLastOneObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTakeLastTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, count: number, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, bufferSize: number, delayError: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableTakeLastTimed {
                            export class TakeLastTimedObserver<T> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed.TakeLastTimedObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTakeUntil<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(child: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableTakeUntil {
                            export class TakeUntilMainObserver<T, U> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module TakeUntilMainObserver {
                                export class OtherObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTakeUntilPredicate<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableTakeUntilPredicate {
                            export class TakeUntilPredicateObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTakeWhile<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableTakeWhile {
                            export class TakeWhileObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableThrottleFirstTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableThrottleFirstTimed {
                            export class DebounceTimedObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableThrottleLatest<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, emitLast: boolean, onDropped: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableThrottleLatest {
                            export class ThrottleLatestObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest.ThrottleLatestObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(this_: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTimeInterval<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.schedulers.Timed<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                        }
                        export module ObservableTimeInterval {
                            export class TimeIntervalObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval.TimeIntervalObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTimeout<T, U, V> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout<any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, firstTimeoutIndicator: io.reactivex.rxjava3.core.ObservableSource<any>, itemTimeoutIndicator: io.reactivex.rxjava3.functions.Function<any, any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(parent: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableTimeout {
                            export class TimeoutConsumer extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutConsumer>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class TimeoutFallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutFallbackObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onTimeout(this_: number): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public onTimeoutError(idx: number, ex: java.lang.Throwable): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public onTimeout(param0: number): void;
                                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class TimeoutObserver<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onTimeout(idx: number): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public onTimeoutError(idx: number, ex: java.lang.Throwable): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(ex: any): void;
                                public onTimeout(param0: number): void;
                                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class TimeoutSelectorSupport extends io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutSupport {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutSelectorSupport>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                                    onTimeout(param0: number): void;
                                });
                                public constructor();
                                public onTimeout(param0: number): void;
                                public onTimeoutError(param0: number, param1: java.lang.Throwable): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTimeoutTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(parent: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableTimeoutTimed {
                            export class FallbackObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                            export class TimeoutFallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutFallbackObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onTimeout(this_: number): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onTimeout(param0: number): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class TimeoutObserver<T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onTimeout(idx: number): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onTimeout(param0: number): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class TimeoutSupport {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutSupport>;
                                /**
                                 * Constructs a new instance of the io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                                 */
                                public constructor(implementation: {
                                    onTimeout(param0: number): void;
                                });
                                public constructor();
                                public onTimeout(param0: number): void;
                            }
                            export class TimeoutTask {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutTask>;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableTimer extends io.reactivex.rxjava3.core.Observable<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimer>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module ObservableTimer {
                            export class TimerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableTimer.TimerObserver>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public setResource(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableToList<T, U> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToList<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableToList {
                            export class ToListObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToList.ToListObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableToListSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.internal.fuseable.FuseToObservable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle<any, any>>;
                            public constructor();
                            public subscribeActual(e: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, defaultCapacityHint: number);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public fuseToObservable(): io.reactivex.rxjava3.core.Observable<any>;
                        }
                        export module ObservableToListSingle {
                            export class ToListObserver<T, U> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle.ToListObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableUnsubscribeOn<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableUnsubscribeOn {
                            export class UnsubscribeObserver<T> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module UnsubscribeObserver {
                                export class DisposeTask {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableUsing<T, D> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUsing<any, any>>;
                            public constructor();
                            public constructor(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, sourceSupplier: io.reactivex.rxjava3.functions.Function<any, any>, disposer: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableUsing {
                            export class UsingObserver<T, D> extends java.util.concurrent.atomic.AtomicBoolean {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(this_: java.lang.Throwable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWindow<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindow<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, count: number, skip: number, capacityHint: number);
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableWindow {
                            export class WindowExactObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowExactObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class WindowSkipObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowSkipObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(w: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWindowBoundary<T, B> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>, capacityHint: number);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableWindowBoundary {
                            export class WindowBoundaryInnerObserver<T, B> extends io.reactivex.rxjava3.observers.DisposableObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class WindowBoundaryMainObserver<T, B> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryMainObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWindowBoundarySelector<T, B, V> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector<any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, open: io.reactivex.rxjava3.core.ObservableSource<any>, closingIndicator: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableWindowBoundarySelector {
                            export class WindowBoundaryMainObserver<T, B, V> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver<any, any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module WindowBoundaryMainObserver {
                                export class WindowEndObserverIntercept<T, V> extends io.reactivex.rxjava3.core.Observable<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowEndObserverIntercept<any, any>>;
                                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.core.Observable<any>;
                                    public onNext(t: any): void;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.core.Observable<any>;
                                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(param0: java.lang.Throwable): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                    public isDisposed(): boolean;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public dispose(): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                    public subscribeActual(o: io.reactivex.rxjava3.core.Observer<any>): void;
                                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                                    public onError(t: java.lang.Throwable): void;
                                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.core.Observable<any>;
                                    public static empty(): io.reactivex.rxjava3.core.Observable<any>;
                                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                }
                                export class WindowStartItem<B> extends java.lang.Object {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartItem<any>>;
                                }
                                export class WindowStartObserver<B> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartObserver<any>>;
                                    public onNext(param0: any): void;
                                    public onComplete(): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(t: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onNext(t: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWindowSubscribeIntercept<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowSubscribeIntercept<any>>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(s: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWindowTimed<T> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, io.reactivex.rxjava3.core.Observable<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed<any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, timespan: number, timeskip: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, maxSize: number, bufferSize: number, restartTimerOnMaxSize: boolean);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(downstream: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                        }
                        export module ObservableWindowTimed {
                            export abstract class AbstractWindowObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class WindowExactBoundedObserver<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any> implements java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactBoundedObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module WindowExactBoundedObserver {
                                export class WindowBoundaryRunnable {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactBoundedObserver.WindowBoundaryRunnable>;
                                    public run(): void;
                                }
                            }
                            export class WindowExactUnboundedObserver<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any> implements java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactUnboundedObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module WindowExactUnboundedObserver {
                                export class WindowRunnable {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactUnboundedObserver.WindowRunnable>;
                                    public run(): void;
                                }
                            }
                            export class WindowSkipObserver<T> extends io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver<any> implements java.lang.Runnable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowSkipObserver<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export module WindowSkipObserver {
                                export class WindowBoundaryRunnable {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowSkipObserver.WindowBoundaryRunnable>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWithLatestFrom<T, U, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom<any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, combiner: io.reactivex.rxjava3.functions.BiFunction<any, any, any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribeActual(t: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableWithLatestFrom {
                            export class WithLatestFromObserver<T, U, R> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom.WithLatestFromObserver<any, any, any>>;
                                public dispose(): void;
                                public onNext(e: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public setOther(o: io.reactivex.rxjava3.disposables.Disposable): boolean;
                                public onError(param0: java.lang.Throwable): void;
                                public otherError(e: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class WithLatestFromOtherObserver extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom.WithLatestFromOtherObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableWithLatestFromMany<T, R> extends io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream<any, any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, otherArray: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, combiner: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.ObservableSource<any>, otherIterable: java.lang.Iterable<any>, combiner: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public source(): io.reactivex.rxjava3.core.ObservableSource<any>;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableWithLatestFromMany {
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                            export class WithLatestFromObserver<T, R> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.WithLatestFromObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(i: any): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                            export class WithLatestInnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.WithLatestInnerObserver>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableZip<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZip<any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(p: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, sourcesIterable: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number, delayError: boolean);
                        }
                        export module ObservableZip {
                            export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipCoordinator<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(i: androidNative.Array<io.reactivex.rxjava3.core.ObservableSource<any>>, this_: number): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public drain(): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class ZipObserver<T, R> extends io.reactivex.rxjava3.core.Observer<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipObserver<any, any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObservableZipIterable<T, U, V> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable<any, any, any>>;
                            public constructor();
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Observable<any>, other: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(e: io.reactivex.rxjava3.core.Observer<any>): void;
                        }
                        export module ObservableZipIterable {
                            export class ZipIterableObserver<T, U, V> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable.ZipIterableObserver<any, any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(param0: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public onNext(e: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module observable {
                        export class ObserverResourceWrapper<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper<any>>;
                            public onError(t: java.lang.Throwable): void;
                            public onComplete(): void;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public setResource(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                            public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public onNext(t: any): void;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public onNext(param0: any): void;
                            public onError(param0: java.lang.Throwable): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelCollect<T, C> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, initialCollection: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public parallelism(): number;
                            public subscribe(ex: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        }
                        export module ParallelCollect {
                            export class ParallelCollectSubscriber<T, C> extends io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect.ParallelCollectSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(this_: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelConcatMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, errorMode: io.reactivex.rxjava3.internal.util.ErrorMode);
                            public parallelism(): number;
                            public subscribe(this_: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelDoOnNextTry<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry<any>>;
                            public constructor();
                            public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public parallelism(): number;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, onNext: io.reactivex.rxjava3.functions.Consumer<any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
                        }
                        export module ParallelDoOnNextTry {
                            export class ParallelDoOnNextConditionalSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextConditionalSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public tryOnNext(exc: T): boolean;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                                public tryOnNext(param0: T): boolean;
                            }
                            export class ParallelDoOnNextSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public tryOnNext(exc: T): boolean;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                                public tryOnNext(param0: T): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelFilter<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter<any>>;
                            public constructor();
                            public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public parallelism(): number;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                        }
                        export module ParallelFilter {
                            export abstract class BaseFilterSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                                public tryOnNext(param0: T): boolean;
                            }
                            export class ParallelFilterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(ex: any): boolean;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class ParallelFilterSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(ex: any): boolean;
                                public tryOnNext(param0: any): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelFilterTry<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry<any>>;
                            public constructor();
                            public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public parallelism(): number;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
                        }
                        export module ParallelFilterTry {
                            export abstract class BaseFilterSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(t: T): void;
                                public request(n: number): void;
                                public tryOnNext(param0: T): boolean;
                            }
                            export class ParallelFilterConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public tryOnNext(h: any): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(param0: any): boolean;
                            }
                            export class ParallelFilterSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public tryOnNext(h: any): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(param0: any): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelFlatMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number, prefetch: number);
                            public parallelism(): number;
                            public subscribe(this_: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelFlatMapIterable<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable<any, any>>;
                            public constructor();
                            public parallelism(): number;
                            public subscribe(this_: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelFromArray<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray<any>>;
                            public constructor();
                            public constructor(sources: androidNative.Array<org.reactivestreams.Publisher<any>>);
                            public parallelism(): number;
                            public subscribe(this_: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelFromPublisher<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher<any>>;
                            public constructor();
                            public parallelism(): number;
                            public subscribe(subscribers: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public constructor(source: org.reactivestreams.Publisher<any>, parallelism: number, prefetch: number);
                        }
                        export module ParallelFromPublisher {
                            export class ParallelDispatcher<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(m: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export module ParallelDispatcher {
                                export class RailSubscription {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription>;
                                    public cancel(): void;
                                    public request(u: number): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelJoin<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin<any>>;
                            public constructor();
                            public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, prefetch: number, delayErrors: boolean);
                        }
                        export module ParallelJoin {
                            export class JoinInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinInnerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): boolean;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public requestOne(): void;
                                public request(n: number): void;
                            }
                            export class JoinSubscription<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscription<any>>;
                                public onNext(q: io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinInnerSubscriber<any>, q: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export abstract class JoinSubscriptionBase<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase<any>>;
                                public cancel(): void;
                                public request(n: number): void;
                            }
                            export class JoinSubscriptionDelayError<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionDelayError<any>>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMap<any, any>>;
                            public constructor();
                            public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public parallelism(): number;
                        }
                        export module ParallelMap {
                            export class ParallelMapConditionalSubscriber<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                                public onNext(ex: T): void;
                                public tryOnNext(param0: T): boolean;
                                public tryOnNext(ex: T): boolean;
                            }
                            export class ParallelMapSubscriber<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                                public onNext(ex: T): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelMapTry<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry<any, any>>;
                            public constructor();
                            public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public parallelism(): number;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>);
                        }
                        export module ParallelMapTry {
                            export class ParallelMapTryConditionalSubscriber<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTryConditionalSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(h: T): boolean;
                                public onNext(t: T): void;
                                public request(n: number): void;
                                public tryOnNext(param0: T): boolean;
                            }
                            export class ParallelMapTrySubscriber<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTrySubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public tryOnNext(h: T): boolean;
                                public onNext(t: T): void;
                                public request(n: number): void;
                                public tryOnNext(param0: T): boolean;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelPeek<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onAfterNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onAfterTerminated: io.reactivex.rxjava3.functions.Action, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onRequest: io.reactivex.rxjava3.functions.LongConsumer, onCancel: io.reactivex.rxjava3.functions.Action);
                            public parallelism(): number;
                            public subscribe(this_: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        }
                        export module ParallelPeek {
                            export class ParallelPeekSubscriber<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.ParallelPeekSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onSubscribe(this_: org.reactivestreams.Subscription): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onNext(ex: T): void;
                                public request(this_: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelReduce<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce<any, any>>;
                            public constructor();
                            public parallelism(): number;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, initialSupplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(ex: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                        }
                        export module ParallelReduce {
                            export class ParallelReduceSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce.ParallelReduceSubscriber<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public cancel(): void;
                                public onNext(ex: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelReduceFull<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                        }
                        export module ParallelReduceFull {
                            export class ParallelReduceFullInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullInnerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(v: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export class ParallelReduceFullMainSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber<any>>;
                                public cancel(): void;
                            }
                            export class SlotPair<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.SlotPair<any>>;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelRunOn<T> extends io.reactivex.rxjava3.parallel.ParallelFlowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn<any>>;
                            public constructor();
                            public subscribe(i: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                            public parallelism(): number;
                            public constructor(parent: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, scheduler: io.reactivex.rxjava3.core.Scheduler, prefetch: number);
                        }
                        export module ParallelRunOn {
                            export abstract class BaseRunOnSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber<any>>;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public cancel(): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                                public request(n: number): void;
                            }
                            export class MultiWorkerCallback extends io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.MultiWorkerCallback>;
                                public onWorker(i: number, w: io.reactivex.rxjava3.core.Scheduler.Worker): void;
                                public onWorker(param0: number, param1: io.reactivex.rxjava3.core.Scheduler.Worker): void;
                            }
                            export class RunOnConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                            export class RunOnSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module parallel {
                        export class ParallelSortedJoin<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.parallel.ParallelFlowable<java.util.List<any>>, comparator: java.util.Comparator<any>);
                        }
                        export module ParallelSortedJoin {
                            export class SortedJoinInnerSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<java.util.List<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber<any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onNext(t: java.util.List<any>): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                            export class SortedJoinSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinSubscription<any>>;
                                public cancel(): void;
                                public request(n: number): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleAmb<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleAmb<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>, sourcesIterable: java.lang.Iterable<any>);
                            public subscribeActual(element: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleAmb {
                            export class AmbSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleCache<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCache<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(this_: java.lang.Throwable): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public onError(param0: java.lang.Throwable): void;
                            public subscribeActual(this_: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public onSuccess(param0: any): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public onSuccess(this_: any): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        }
                        export module SingleCache {
                            export class CacheDisposable<T> extends java.util.concurrent.atomic.AtomicBoolean implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCache.CacheDisposable<any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleContains<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleContains<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, value: any, comparer: io.reactivex.rxjava3.functions.BiPredicate<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleContains {
                            export class ContainsSingleObserver extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleContains.ContainsSingleObserver>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(ex: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleCreate<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCreate<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleOnSubscribe<any>);
                            public subscribeActual(this_: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleCreate {
                            export class Emitter<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter<any>>;
                                public dispose(): void;
                                public toString(): string;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public onSuccess(this_: any): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public setCancellable(c: io.reactivex.rxjava3.functions.Cancellable): void;
                                public onSuccess(param0: any): void;
                                public setCancellable(param0: io.reactivex.rxjava3.functions.Cancellable): void;
                                public onError(param0: java.lang.Throwable): void;
                                public setDisposable(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public tryOnError(param0: java.lang.Throwable): boolean;
                                public setDisposable(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public tryOnError(this_: java.lang.Throwable): boolean;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDefer<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDefer<any>>;
                            public constructor();
                            public subscribeActual(e: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(singleSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDelay<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, time: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, delayError: boolean);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDelay {
                            export class Delay extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay.Delay>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                            export module Delay {
                                export class OnError {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay.Delay.OnError>;
                                    public run(): void;
                                }
                                export class OnSuccess {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelay.Delay.OnSuccess>;
                                    public run(): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDelayWithCompletable<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, other: io.reactivex.rxjava3.core.CompletableSource);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDelayWithCompletable {
                            export class OtherObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable.OtherObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDelayWithObservable<T, U> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, other: io.reactivex.rxjava3.core.ObservableSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDelayWithObservable {
                            export class OtherSubscriber<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable.OtherSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(value: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                                public onNext(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDelayWithPublisher<T, U> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDelayWithPublisher {
                            export class OtherSubscriber<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber<any, any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(value: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDelayWithSingle<T, U> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, other: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDelayWithSingle {
                            export class OtherObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle.OtherObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDematerialize<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDematerialize<any, any>>;
                            public constructor();
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.Single<any>, selector: io.reactivex.rxjava3.functions.Function<any, io.reactivex.rxjava3.core.Notification<any>>);
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDematerialize {
                            export class DematerializeObserver<T, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDetach<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDetach<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDetach {
                            export class DetachSingleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDetach.DetachSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoAfterSuccess<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onAfterSuccess: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoAfterSuccess {
                            export class DoAfterObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess.DoAfterObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onSuccess(this_: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoAfterTerminate<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onAfterTerminate: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoAfterTerminate {
                            export class DoAfterTerminateObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate.DoAfterTerminateObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(t: T): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoFinally<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoFinally<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onFinally: io.reactivex.rxjava3.functions.Action);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoFinally {
                            export class DoFinallyObserver<T> extends java.util.concurrent.atomic.AtomicInteger {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoFinally.DoFinallyObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(t: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnDispose<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onDispose: io.reactivex.rxjava3.functions.Action);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnDispose {
                            export class DoOnDisposeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.functions.Action> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose.DoOnDisposeObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnError<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnError<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnError {
                            export class DoOnError extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(this_: java.lang.Throwable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnEvent<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onEvent: io.reactivex.rxjava3.functions.BiConsumer<any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnEvent {
                            export class DoOnEvent extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(this_: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(this_: java.lang.Throwable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnLifecycle<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(upstream: io.reactivex.rxjava3.core.Single<any>, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, onDispose: io.reactivex.rxjava3.functions.Action);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnLifecycle {
                            export class SingleLifecycleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle.SingleLifecycleObserver<any>>;
                                public dispose(): void;
                                public onSuccess(t: T): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnSubscribe<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnSubscribe {
                            export class DoOnSubscribeSingleObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe.DoOnSubscribeSingleObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(this_: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnSuccess<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onSuccess: io.reactivex.rxjava3.functions.Consumer<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnSuccess {
                            export class DoOnSuccess extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(this_: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleDoOnTerminate<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onTerminate: io.reactivex.rxjava3.functions.Action);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleDoOnTerminate {
                            export class DoOnTerminate extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(this_: any): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onError(this_: java.lang.Throwable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleEquals<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleEquals<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(first: io.reactivex.rxjava3.core.SingleSource<any>, second: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleEquals {
                            export class InnerObserver<T> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleEquals.InnerObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleError<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleError<any>>;
                            public constructor();
                            public subscribeActual(e: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(errorSupplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMap<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMap<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(downstream: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFlatMap {
                            export class SingleFlatMapCallback<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(e: any): void;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module SingleFlatMapCallback {
                                export class FlatMapSingleObserver<R> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback.FlatMapSingleObserver<any>>;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapBiSelector<T, U, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector<any, any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>, resultSelector: io.reactivex.rxjava3.functions.BiFunction<any, any, any>);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFlatMapBiSelector {
                            export class FlatMapBiMainObserver<T, U, R> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver<any, any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: T): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module FlatMapBiMainObserver {
                                export class InnerObserver<T, U, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver<any, any, any>>;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(ex: any): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapCompletable<T> extends io.reactivex.rxjava3.core.Completable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFlatMapCompletable {
                            export class FlatMapCompletableObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable.FlatMapCompletableObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapIterableFlowable<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable<any, any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module SingleFlatMapIterableFlowable {
                            export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public clear(): void;
                                public onSuccess(has: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public poll(): any;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapIterableObservable<T, R> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFlatMapIterableObservable {
                            export class FlatMapIterableObserver<T, R> extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable.FlatMapIterableObserver<any, any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public clear(): void;
                                public isDisposed(): boolean;
                                public onSuccess(has: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public isEmpty(): boolean;
                                public requestFusion(mode: number): number;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public poll(): any;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapMaybe<T, R> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe<any, any>>;
                            public constructor();
                            public subscribeActual(downstream: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFlatMapMaybe {
                            export class FlatMapMaybeObserver<R> extends io.reactivex.rxjava3.core.MaybeObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapMaybeObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                            export class FlatMapSingleObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapSingleObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapNotification<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onSuccessMapper: io.reactivex.rxjava3.functions.Function<any, any>, onErrorMapper: io.reactivex.rxjava3.functions.Function<any, any>);
                        }
                        export module SingleFlatMapNotification {
                            export class FlatMapSingleObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification.FlatMapSingleObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(ex: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module FlatMapSingleObserver {
                                export class InnerObserver extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification.FlatMapSingleObserver.InnerObserver>;
                                    public onSuccess(value: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFlatMapPublisher<T, R> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher<any, any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(downstream: org.reactivestreams.Subscriber<any>): void;
                        }
                        export module SingleFlatMapPublisher {
                            export class SingleFlatMapPublisherObserver<S, T> extends java.util.concurrent.atomic.AtomicLong {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver<any, any>>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(e: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onComplete(): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public request(n: number): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFromCallable<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromCallable<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(callable: java.util.concurrent.Callable<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFromPublisher<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(publisher: org.reactivestreams.Publisher<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleFromPublisher {
                            export class ToSingleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher.ToSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(t: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public onComplete(): void;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onNext(t: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFromSupplier<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(supplier: io.reactivex.rxjava3.functions.Supplier<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleFromUnsafeSource<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleFromUnsafeSource<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleHide<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleHide<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleHide {
                            export class HideSingleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleHide.HideSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(value: T): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleInternalHelper {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper>;
                            public static iterableToFlowable(sources: java.lang.Iterable<any>): java.lang.Iterable<any>;
                            public static toFlowable(): io.reactivex.rxjava3.functions.Function<any, any>;
                            public static emptyThrower(): io.reactivex.rxjava3.functions.Supplier<java.util.NoSuchElementException>;
                        }
                        export module SingleInternalHelper {
                            export class NoSuchElementSupplier extends io.reactivex.rxjava3.functions.Supplier<java.util.NoSuchElementException> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier>;
                                public static INSTANCE: io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier;
                                public get(): any;
                                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier>;
                                public static valueOf(name: string): io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.NoSuchElementSupplier;
                                public get(): java.util.NoSuchElementException;
                            }
                            export class ToFlowable extends io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.SingleSource<any>, org.reactivestreams.Publisher> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable>;
                                public static INSTANCE: io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable;
                                public apply(v: io.reactivex.rxjava3.core.SingleSource<any>): org.reactivestreams.Publisher;
                                public static valueOf(name: string): io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable;
                                public static values(): androidNative.Array<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowable>;
                                public apply(param0: any): any;
                            }
                            export class ToFlowableIterable<T> extends java.lang.Iterable<io.reactivex.rxjava3.core.Flowable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterable<any>>;
                                public iterator(): java.util.Iterator<io.reactivex.rxjava3.core.Flowable<any>>;
                            }
                            export class ToFlowableIterator<T> extends java.util.Iterator<io.reactivex.rxjava3.core.Flowable<any>> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator<any>>;
                                public next(): io.reactivex.rxjava3.core.Flowable<any>;
                                public hasNext(): boolean;
                                public remove(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleJust<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleJust<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(value: any);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleLift<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleLift<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, onLift: io.reactivex.rxjava3.core.SingleOperator<any, any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleMap<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleMap<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, mapper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribeActual(t: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleMap {
                            export class MapSingleObserver<T, R> extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver<any, any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(e: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleMaterialize<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.core.Notification<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleMaterialize<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.Single<any>);
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleNever extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleNever>;
                            public static INSTANCE: io.reactivex.rxjava3.core.Single<any>;
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleObserveOn<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleObserveOn<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleObserveOn {
                            export class ObserveOnSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleObserveOn.ObserveOnSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleOnErrorComplete<T> extends io.reactivex.rxjava3.core.Maybe<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleOnErrorComplete<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.Single<any>, predicate: io.reactivex.rxjava3.functions.Predicate<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleOnErrorReturn<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, valueSupplier: io.reactivex.rxjava3.functions.Function<any, any>, value: any);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleOnErrorReturn {
                            export class OnErrorReturn extends io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleResumeNext<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleResumeNext<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, nextFunction: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleResumeNext {
                            export class ResumeMainSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleResumeNext.ResumeMainSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public onError(ex: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleSubscribeOn<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleSubscribeOn {
                            export class SubscribeOnObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn.SubscribeOnObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleTakeUntil<T, U> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, other: org.reactivestreams.Publisher<any>);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleTakeUntil {
                            export class TakeUntilMainObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class TakeUntilOtherSubscriber extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilOtherSubscriber>;
                                public onSubscribe(s: org.reactivestreams.Subscription): void;
                                public dispose(): void;
                                public onSubscribe(param0: org.reactivestreams.Subscription): void;
                                public onNext(t: any): void;
                                public onError(t: java.lang.Throwable): void;
                                public onComplete(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleTimeInterval<T> extends io.reactivex.rxjava3.core.Single<io.reactivex.rxjava3.schedulers.Timed<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, start: boolean);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleTimeInterval {
                            export class TimeIntervalSingleObserver<T> extends java.lang.Object {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.TimeIntervalSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(t: T): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: T): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleTimeout<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeout<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, other: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleTimeout {
                            export class TimeoutMainObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(t: any): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export module TimeoutMainObserver {
                                export class TimeoutFallbackObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                    public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver.TimeoutFallbackObserver<any>>;
                                    public onSuccess(t: any): void;
                                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onError(param0: java.lang.Throwable): void;
                                    public onError(e: java.lang.Throwable): void;
                                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                    public onSuccess(param0: any): void;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleTimer extends io.reactivex.rxjava3.core.Single<java.lang.Long> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimer>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(delay: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleTimer {
                            export class TimerDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleTimer.TimerDisposable>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleToFlowable<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToFlowable<any>>;
                            public constructor();
                            public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                        }
                        export module SingleToFlowable {
                            export class SingleToFlowableObserver<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToFlowable.SingleToFlowableObserver<any>>;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public cancel(): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleToObservable<T> extends io.reactivex.rxjava3.core.Observable<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToObservable<any>>;
                            public constructor();
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>);
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static create(downstream: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleToObservable {
                            export class SingleToObservableObserver<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleToObservable.SingleToObservableObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleUnsubscribeOn<T> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn<any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribeActual(observer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(source: io.reactivex.rxjava3.core.SingleSource<any>, scheduler: io.reactivex.rxjava3.core.Scheduler);
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleUnsubscribeOn {
                            export class UnsubscribeOnSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn.UnsubscribeOnSingleObserver<any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(e: java.lang.Throwable): void;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSuccess(value: any): void;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleUsing<T, U> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUsing<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(resourceSupplier: io.reactivex.rxjava3.functions.Supplier<any>, singleFunction: io.reactivex.rxjava3.functions.Function<any, any>, disposer: io.reactivex.rxjava3.functions.Consumer<any>, eager: boolean);
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleUsing {
                            export class UsingSingleObserver<T, U> extends java.util.concurrent.atomic.AtomicReference<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleUsing.UsingSingleObserver<any, any>>;
                                public dispose(): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(u: any): void;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public onError(u: java.lang.Throwable): void;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public onSuccess(param0: any): void;
                                public onError(param0: java.lang.Throwable): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleZipArray<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(i: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(sources: androidNative.Array<io.reactivex.rxjava3.core.SingleSource<any>>, zipper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleZipArray {
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                            export class ZipCoordinator<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipCoordinator<any, any>>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class ZipSingleObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver<any>>;
                                public dispose(): void;
                                public onError(param0: java.lang.Throwable): void;
                                public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(value: any): void;
                                public onError(e: java.lang.Throwable): void;
                                public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                                public onSuccess(param0: any): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module operators {
                    export module single {
                        export class SingleZipIterable<T, R> extends io.reactivex.rxjava3.core.Single<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipIterable<any, any>>;
                            public constructor();
                            public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public constructor(sources: java.lang.Iterable<any>, zipper: io.reactivex.rxjava3.functions.Function<any, any>);
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                            public subscribeActual(ex: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                            public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module SingleZipIterable {
                            export class SingletonArrayFunc extends io.reactivex.rxjava3.functions.Function<any, any> {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.operators.single.SingleZipIterable.SingletonArrayFunc>;
                                public apply(t: any): any;
                                public apply(param0: any): any;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module queue {
                    export class MpscLinkedQueue<T> extends io.reactivex.rxjava3.operators.SimplePlainQueue<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.queue.MpscLinkedQueue<any>>;
                        public constructor();
                        public offer(param0: any): boolean;
                        public offer(param0: any, param1: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public poll(): any;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public offer(e: any): boolean;
                    }
                    export module MpscLinkedQueue {
                        export class LinkedQueueNode<E> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>>;
                            public lpValue(): any;
                            public getAndNullValue(): any;
                            public lvNext(): io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>;
                            public spValue(newValue: any): void;
                            public soNext(n: io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode<any>): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export abstract class AbstractDirectTask extends java.util.concurrent.atomic.AtomicReference<java.util.concurrent.Future<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask>;
                        public runnable: java.lang.Runnable;
                        public interruptOnCancel: boolean;
                        public runner: java.lang.Thread;
                        public static FINISHED: java.util.concurrent.FutureTask<java.lang.Void>;
                        public static DISPOSED: java.util.concurrent.FutureTask<java.lang.Void>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public toString(): string;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public setFuture(this_: java.util.concurrent.Future<any>): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public getWrappedRunnable(): java.lang.Runnable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class ComputationScheduler extends io.reactivex.rxjava3.core.Scheduler implements io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler>;
                        public schedulePeriodicallyDirect(run: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public constructor(threadFactory: java.util.concurrent.ThreadFactory);
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public shutdown(): void;
                        public start(): void;
                        public createWorkers(number: number, callback: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
                        public scheduleDirect(run: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
                        public scheduleDirect(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ComputationScheduler {
                        export class EventLoopWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public schedule(action: java.lang.Runnable, delayTime: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(action: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export class FixedSchedulerPool extends io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.FixedSchedulerPool>;
                            public getEventLoop(): io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.PoolWorker;
                            public createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
                            public shutdown(): void;
                            public createWorkers(i: number, index: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
                        }
                        export class PoolWorker extends io.reactivex.rxjava3.internal.schedulers.NewThreadWorker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.PoolWorker>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class DisposeOnCancel extends java.util.concurrent.Future<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel>;
                        public cancel(mayInterruptIfRunning: boolean): boolean;
                        public isDone(): boolean;
                        public isCancelled(): boolean;
                        public get(): any;
                        public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class ExecutorScheduler extends io.reactivex.rxjava3.core.Scheduler {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler>;
                        public constructor();
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public scheduleDirect(run: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public scheduleDirect(f: java.lang.Runnable, ex: number, this_: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(executor: java.util.concurrent.Executor, interruptibleWorker: boolean, fair: boolean);
                        public scheduleDirect(f: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public schedulePeriodicallyDirect(f: java.lang.Runnable, ex: number, decoratedRun: number, this_: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ExecutorScheduler {
                        export class DelayedDispose {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedDispose>;
                            public run(): void;
                        }
                        export class DelayedRunnable extends java.util.concurrent.atomic.AtomicReference<java.lang.Runnable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public getWrappedRunnable(): java.lang.Runnable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public run(): void;
                        }
                        export class ExecutorWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker>;
                            public constructor();
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(ex: java.lang.Runnable, d: number, this_: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(task: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public constructor(executor: java.util.concurrent.Executor, interruptibleWorker: boolean, fair: boolean);
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public run(): void;
                        }
                        export module ExecutorWorker {
                            export class BooleanRunnable implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class InterruptibleRunnable implements io.reactivex.rxjava3.disposables.Disposable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable>;
                                public dispose(): void;
                                public isDisposed(): boolean;
                                public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                                public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                                public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                                public run(): void;
                                public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                                public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                                public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            }
                            export class SequentialDispose {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.SequentialDispose>;
                                public run(): void;
                            }
                        }
                        export class SingleHolder {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.SingleHolder>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class ImmediateThinScheduler extends io.reactivex.rxjava3.core.Scheduler {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler>;
                        public static INSTANCE: io.reactivex.rxjava3.core.Scheduler;
                        public schedulePeriodicallyDirect(run: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public scheduleDirect(run: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public scheduleDirect(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module ImmediateThinScheduler {
                        export class ImmediateThinWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler.ImmediateThinWorker>;
                            public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(run: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public schedulePeriodically(run: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class InstantPeriodicTask extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public call(): java.lang.Void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class IoScheduler extends io.reactivex.rxjava3.core.Scheduler {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler>;
                        public static KEEP_ALIVE_TIME_DEFAULT: number = 60;
                        public constructor();
                        public constructor(threadFactory: java.util.concurrent.ThreadFactory);
                        public shutdown(): void;
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public start(): void;
                        public size(): number;
                    }
                    export module IoScheduler {
                        export class CachedWorkerPool {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool>;
                            public run(): void;
                        }
                        export class EventLoopWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker>;
                            public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public schedule(action: java.lang.Runnable, delayTime: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public run(): void;
                        }
                        export class ThreadWorker extends io.reactivex.rxjava3.internal.schedulers.NewThreadWorker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public setExpirationTime(expirationTime: number): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public getExpirationTime(): number;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class NewThreadScheduler extends io.reactivex.rxjava3.core.Scheduler {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler>;
                        public constructor();
                        public constructor(threadFactory: java.util.concurrent.ThreadFactory);
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class NewThreadWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.NewThreadWorker>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public constructor(threadFactory: java.util.concurrent.ThreadFactory);
                        public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public scheduleActual(f: java.lang.Runnable, ex: number, this_: java.util.concurrent.TimeUnit, run: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public schedulePeriodicallyDirect(f: java.lang.Runnable, ex: number, periodicWrapper: number, f: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public shutdown(): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public scheduleDirect(f: java.lang.Runnable, ex: number, this_: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public schedule(action: java.lang.Runnable, delayTime: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class NonBlockingThread {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.NonBlockingThread>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.schedulers.NonBlockingThread interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                        });
                        public constructor();
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class RxThreadFactory {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.RxThreadFactory>;
                        public constructor(prefix: string);
                        public newThread(r: java.lang.Runnable): java.lang.Thread;
                        public constructor(prefix: string, priority: number);
                        public constructor(prefix: string, priority: number, nonBlocking: boolean);
                        public toString(): string;
                    }
                    export module RxThreadFactory {
                        export class RxCustomThread implements io.reactivex.rxjava3.internal.schedulers.NonBlockingThread {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.RxThreadFactory.RxCustomThread>;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class ScheduledDirectPeriodicTask extends io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ScheduledDirectPeriodicTask>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public constructor(runnable: java.lang.Runnable, interruptOnCancel: boolean);
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public run(): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public getWrappedRunnable(): java.lang.Runnable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class ScheduledDirectTask extends io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask implements java.util.concurrent.Callable<java.lang.Void> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ScheduledDirectTask>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public call(): java.lang.Void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public constructor(runnable: java.lang.Runnable, interruptOnCancel: boolean);
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public getWrappedRunnable(): java.lang.Runnable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class ScheduledRunnable extends java.util.concurrent.atomic.AtomicReferenceArray<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(actual: java.lang.Runnable, parent: io.reactivex.rxjava3.disposables.DisposableContainer);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public toString(): string;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public setFuture(this_: java.util.concurrent.Future<any>): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public run(): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public call(): any;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(actual: java.lang.Runnable, parent: io.reactivex.rxjava3.disposables.DisposableContainer, interruptOnCancel: boolean);
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class SchedulerMultiWorkerSupport {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
                        });
                        public constructor();
                        public createWorkers(param0: number, param1: io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback): void;
                    }
                    export module SchedulerMultiWorkerSupport {
                        export class WorkerCallback {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback>;
                            /**
                             * Constructs a new instance of the io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                             */
                            public constructor(implementation: {
                                onWorker(param0: number, param1: io.reactivex.rxjava3.core.Scheduler.Worker): void;
                            });
                            public constructor();
                            public onWorker(param0: number, param1: io.reactivex.rxjava3.core.Scheduler.Worker): void;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class SchedulerPoolFactory {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory>;
                        public static PURGE_ENABLED: boolean;
                        public static create(factory: java.util.concurrent.ThreadFactory): java.util.concurrent.ScheduledExecutorService;
                    }
                    export module SchedulerPoolFactory {
                        export class SystemPropertyAccessor extends io.reactivex.rxjava3.functions.Function<string, string> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.SystemPropertyAccessor>;
                            public apply(t: string): string;
                            public apply(param0: any): any;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class SchedulerWhen extends io.reactivex.rxjava3.core.Scheduler implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen>;
                        public constructor(this_: io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Completable>>, io.reactivex.rxjava3.core.Completable>, combine: io.reactivex.rxjava3.core.Scheduler);
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module SchedulerWhen {
                        export class CreateWorkerFunction extends io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction, io.reactivex.rxjava3.core.Completable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.CreateWorkerFunction>;
                            public apply(action: io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction): io.reactivex.rxjava3.core.Completable;
                            public apply(param0: any): any;
                        }
                        export module CreateWorkerFunction {
                            export class WorkerCompletable extends io.reactivex.rxjava3.core.Completable {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.CreateWorkerFunction.WorkerCompletable>;
                                public subscribeActual(actionCompletable: io.reactivex.rxjava3.core.CompletableObserver): void;
                                public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                                public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                                public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                            }
                        }
                        export class DelayedAction extends io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.DelayedAction>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public callActual(actualWorker: io.reactivex.rxjava3.core.Scheduler.Worker, actionCompletable: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export class ImmediateAction extends io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ImmediateAction>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public callActual(actualWorker: io.reactivex.rxjava3.core.Scheduler.Worker, actionCompletable: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export class OnCompletedAction {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.OnCompletedAction>;
                            public run(): void;
                        }
                        export class QueueWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker>;
                            public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public schedule(action: java.lang.Runnable, delayTime: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(action: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export abstract class ScheduledAction extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.disposables.Disposable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction>;
                            public callActual(param0: io.reactivex.rxjava3.core.Scheduler.Worker, param1: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.disposables.Disposable;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export class SubscribedDisposable extends io.reactivex.rxjava3.disposables.Disposable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class SingleScheduler extends io.reactivex.rxjava3.core.Scheduler {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SingleScheduler>;
                        public schedulePeriodicallyDirect(f: java.lang.Runnable, ex: number, exec: number, periodicWrapper: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public constructor(threadFactory: java.util.concurrent.ThreadFactory);
                        public shutdown(): void;
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public start(): void;
                        public scheduleDirect(f: java.lang.Runnable, ex: number, this_: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public scheduleDirect(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module SingleScheduler {
                        export class ScheduledWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.SingleScheduler.ScheduledWorker>;
                            public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(f: java.lang.Runnable, ex: number, this_: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module schedulers {
                    export class TrampolineScheduler extends io.reactivex.rxjava3.core.Scheduler {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler>;
                        public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                        public scheduleDirect(this_: java.lang.Runnable, run: number, delay: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public static instance(): io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler;
                        public scheduleDirect(run: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public scheduleDirect(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module TrampolineScheduler {
                        export class SleepingRunnable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.SleepingRunnable>;
                            public run(): void;
                        }
                        export class TimedRunnable extends java.lang.Comparable<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TimedRunnable> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TimedRunnable>;
                            public compareTo(that: io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TimedRunnable): number;
                        }
                        export class TrampolineWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public isDisposed(): boolean;
                            public schedule(action: java.lang.Runnable, delayTime: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(param0: java.lang.Runnable, param1: number, param2: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                            public schedule(action: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        }
                        export module TrampolineWorker {
                            export class AppendToQueueTask {
                                public static class: java.lang.Class<io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask>;
                                public run(): void;
                            }
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export abstract class BasicFuseableConditionalSubscriber<T, R> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber<any, any>>;
                        public downstream: io.reactivex.rxjava3.operators.ConditionalSubscriber<any>;
                        public upstream: org.reactivestreams.Subscription;
                        public qs: io.reactivex.rxjava3.operators.QueueSubscription<T>;
                        public done: boolean;
                        public sourceMode: number;
                        public request(n: number): void;
                        public offer(e: R): boolean;
                        public cancel(): void;
                        public offer(v1: R, v2: R): boolean;
                        public constructor(downstream: io.reactivex.rxjava3.operators.ConditionalSubscriber<any>);
                        public requestFusion(param0: number): number;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public tryOnNext(param0: T): boolean;
                        public beforeDownstream(): boolean;
                        public offer(param0: T, param1: T): boolean;
                        public offer(param0: T): boolean;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public poll(): T;
                        public fail(t: java.lang.Throwable): void;
                        public transitiveBoundaryFusion(this_: number): number;
                        public afterDownstream(): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export abstract class BasicFuseableSubscriber<T, R> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber<any, any>>;
                        public downstream: org.reactivestreams.Subscriber<any>;
                        public upstream: org.reactivestreams.Subscription;
                        public qs: io.reactivex.rxjava3.operators.QueueSubscription<T>;
                        public done: boolean;
                        public sourceMode: number;
                        public request(n: number): void;
                        public offer(e: R): boolean;
                        public cancel(): void;
                        public offer(v1: R, v2: R): boolean;
                        public constructor(downstream: org.reactivestreams.Subscriber<any>);
                        public requestFusion(param0: number): number;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public beforeDownstream(): boolean;
                        public offer(param0: T, param1: T): boolean;
                        public offer(param0: T): boolean;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public poll(): T;
                        public fail(t: java.lang.Throwable): void;
                        public transitiveBoundaryFusion(this_: number): number;
                        public afterDownstream(): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export abstract class BlockingBaseSubscriber<T> extends java.util.concurrent.CountDownLatch implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber<any>>;
                        public constructor();
                        public onComplete(): void;
                        public blockingGet(): any;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class BlockingFirstSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber<any>>;
                        public constructor();
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class BlockingLastSubscriber<T> extends io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingLastSubscriber<any>>;
                        public constructor();
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class BlockingSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber<any>>;
                        public static TERMINATED: any;
                        public request(n: number): void;
                        public constructor(queue: java.util.Queue<any>);
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class BoundedSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber<any>>;
                        public request(n: number): void;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(): void;
                        public constructor(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>, bufferSize: number);
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onSubscribe(this_: org.reactivestreams.Subscription): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onNext(e: any): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export abstract class DeferredScalarSubscriber<T, R> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> implements io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber<any, any>>;
                        public upstream: org.reactivestreams.Subscription;
                        public hasValue: boolean;
                        public constructor();
                        public cancel(): void;
                        public constructor(downstream: org.reactivestreams.Subscriber<any>);
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class DisposableAutoReleaseSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(this_: any): void;
                        public dispose(): void;
                        public constructor(composite: io.reactivex.rxjava3.disposables.DisposableContainer, onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class ForEachWhileSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onNext(ex: any): void;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(onNext: io.reactivex.rxjava3.functions.Predicate<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action);
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class FutureSubscriber<T> extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.FutureSubscriber<any>>;
                        public request(n: number): void;
                        public constructor();
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public cancel(this_: boolean): boolean;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public get(): any;
                        public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
                        public isDone(): boolean;
                        public onError(this_: java.lang.Throwable): void;
                        public onComplete(): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class InnerQueuedSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<any>>;
                        public constructor(parent: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport<any>, prefetch: number);
                        public request(this_: number): void;
                        public isDone(): boolean;
                        public setDone(): void;
                        public cancel(): void;
                        public queue(): io.reactivex.rxjava3.operators.SimpleQueue<any>;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public onSubscribe(m: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class InnerQueuedSubscriberSupport<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            innerNext(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: T): void;
                            innerError(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: java.lang.Throwable): void;
                            innerComplete(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>): void;
                            drain(): void;
                        });
                        public constructor();
                        public drain(): void;
                        public innerError(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: java.lang.Throwable): void;
                        public innerNext(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>, param1: T): void;
                        public innerComplete(param0: io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber<T>): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class LambdaSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber<any>>;
                        public request(n: number): void;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onSubscribe(this_: org.reactivestreams.Subscription): void;
                        public constructor(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>);
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(this_: any): void;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public hasCustomOnError(): boolean;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public onError(this_: java.lang.Throwable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export abstract class QueueDrainSubscriber<T, U, V> extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber<any, any, any>>;
                        public downstream: org.reactivestreams.Subscriber<any>;
                        public queue: io.reactivex.rxjava3.operators.SimplePlainQueue<any>;
                        public enter(): boolean;
                        public produced(param0: number): number;
                        public fastEnter(): boolean;
                        public done(): boolean;
                        public leave(m: number): number;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public cancelled(): boolean;
                        public fastPathOrderedEmitMax(this_: any, value: boolean, delayError: io.reactivex.rxjava3.disposables.Disposable): void;
                        public accept(a: org.reactivestreams.Subscriber<any>, v: any): boolean;
                        public requested(): number;
                        public requested(n: number): void;
                        public produced(n: number): number;
                        public leave(param0: number): number;
                        public accept(param0: org.reactivestreams.Subscriber<any>, param1: any): boolean;
                        public constructor(actual: org.reactivestreams.Subscriber<any>, queue: io.reactivex.rxjava3.operators.SimplePlainQueue<any>);
                        public fastPathEmitMax(this_: any, value: boolean, delayError: io.reactivex.rxjava3.disposables.Disposable): void;
                        public error(): java.lang.Throwable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class QueueDrainSubscriberPad0 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad0>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class QueueDrainSubscriberPad2 extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberWip {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class QueueDrainSubscriberPad3 extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad3>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class QueueDrainSubscriberPad4 extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad3 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class QueueDrainSubscriberWip extends io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad0 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberWip>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export abstract class SinglePostCompleteSubscriber<T, R> extends java.util.concurrent.atomic.AtomicLong {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber<any, any>>;
                        public downstream: org.reactivestreams.Subscriber<any>;
                        public upstream: org.reactivestreams.Subscription;
                        public value: any;
                        public produced: number;
                        public complete(this_: any): void;
                        public request(u: number): void;
                        public cancel(): void;
                        public constructor(downstream: org.reactivestreams.Subscriber<any>);
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onDrop(n: any): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class StrictSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.StrictSubscriber<any>>;
                        public request(n: number): void;
                        public cancel(): void;
                        public constructor(downstream: org.reactivestreams.Subscriber<any>);
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscribers {
                    export class SubscriberResourceWrapper<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscribers.SubscriberResourceWrapper<any>>;
                        public request(n: number): void;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(): void;
                        public constructor(downstream: org.reactivestreams.Subscriber<any>);
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public setResource(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class ArrayCompositeSubscription extends java.util.concurrent.atomic.AtomicReferenceArray<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(capacity: number);
                        public isDisposed(): boolean;
                        public replaceResource(this_: number, index: org.reactivestreams.Subscription): org.reactivestreams.Subscription;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public setResource(this_: number, index: org.reactivestreams.Subscription): boolean;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class AsyncSubscription implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription>;
                        public request(n: number): void;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public constructor(resource: io.reactivex.rxjava3.disposables.Disposable);
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public setSubscription(s: org.reactivestreams.Subscription): void;
                        public setResource(r: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public replaceResource(r: io.reactivex.rxjava3.disposables.Disposable): boolean;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export abstract class BasicIntQueueSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.operators.QueueSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any>>;
                        public constructor();
                        public offer(param0: any): boolean;
                        public offer(param0: any, param1: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public poll(): any;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public offer(e: any): boolean;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export abstract class BasicQueueSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements io.reactivex.rxjava3.operators.QueueSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription<any>>;
                        public constructor();
                        public offer(param0: any): boolean;
                        public offer(param0: any, param1: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public poll(): any;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public offer(e: any): boolean;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class BooleanSubscription {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription>;
                        public request(n: number): void;
                        public constructor();
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public toString(): string;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class DeferredScalarSubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any>>;
                        public downstream: org.reactivestreams.Subscriber<any>;
                        public value: any;
                        public constructor();
                        public tryCancel(): boolean;
                        public requestFusion(mode: number): number;
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public constructor(downstream: org.reactivestreams.Subscriber<any>);
                        public poll(): any;
                        public isEmpty(): boolean;
                        public complete(a: any): void;
                        public clear(): void;
                        public request(v: number): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class EmptySubscription extends io.reactivex.rxjava3.operators.QueueSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.EmptySubscription>;
                        public static INSTANCE: io.reactivex.rxjava3.internal.subscriptions.EmptySubscription;
                        public request(n: number): void;
                        public requestFusion(mode: number): number;
                        public cancel(): void;
                        public offer(param0: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public poll(): any;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.subscriptions.EmptySubscription>;
                        public toString(): string;
                        public offer(value: any): boolean;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.subscriptions.EmptySubscription;
                        public offer(param0: any, param1: any): boolean;
                        public static complete(s: org.reactivestreams.Subscriber<any>): void;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public static error(e: java.lang.Throwable, s: org.reactivestreams.Subscriber<any>): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class ScalarSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.operators.QueueSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription<any>>;
                        public request(this_: number): void;
                        public requestFusion(mode: number): number;
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public offer(param0: any): boolean;
                        public offer(v1: any, v2: any): boolean;
                        public requestFusion(param0: number): number;
                        public poll(): any;
                        public offer(param0: any, param1: any): boolean;
                        public isEmpty(): boolean;
                        public constructor(subscriber: org.reactivestreams.Subscriber<any>, value: any);
                        public clear(): void;
                        public offer(e: any): boolean;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class SubscriptionArbiter {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter>;
                        public unbounded: boolean;
                        public constructor(cancelOnReplace: boolean);
                        public isUnbounded(): boolean;
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public setSubscription(r: org.reactivestreams.Subscription): void;
                        public request(a: number): void;
                        public produced(r: number): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module subscriptions {
                    export class SubscriptionHelper extends org.reactivestreams.Subscription {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper>;
                        public static CANCELLED: io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper;
                        public request(n: number): void;
                        public static setOnce(field: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, s: org.reactivestreams.Subscription): boolean;
                        public cancel(): void;
                        public static replace(current: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, field: org.reactivestreams.Subscription): boolean;
                        public static set(current: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, field: org.reactivestreams.Subscription): boolean;
                        public static cancel(field: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>): boolean;
                        public static validate(current: org.reactivestreams.Subscription, next: org.reactivestreams.Subscription): boolean;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper;
                        public static reportSubscriptionSet(): void;
                        public static setOnce(field: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, s: org.reactivestreams.Subscription, request: number): boolean;
                        public static deferredRequest(r: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, field: java.util.concurrent.atomic.AtomicLong, requested: number): void;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper>;
                        public static reportMoreProduced(n: number): void;
                        public static validate(n: number): boolean;
                        public static deferredSetOnce(r: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, field: java.util.concurrent.atomic.AtomicLong, requested: org.reactivestreams.Subscription): boolean;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class AppendOnlyLinkedArrayList<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList<any>>;
                        public constructor(capacity: number);
                        public setFirst(value: T): void;
                        public accept(i: io.reactivex.rxjava3.core.Observer<any>): boolean;
                        public forEachWhile(i: any, this_: io.reactivex.rxjava3.functions.BiPredicate<any, any>): void;
                        public accept(i: org.reactivestreams.Subscriber): boolean;
                        public add(this_: T): void;
                        public forEachWhile(i: io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate<any>): void;
                    }
                    export module AppendOnlyLinkedArrayList {
                        export class NonThrowingPredicate<T> extends io.reactivex.rxjava3.functions.Predicate<any> {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate<any>>;
                            /**
                             * Constructs a new instance of the io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                             */
                            public constructor(implementation: {
                                test(param0: any): boolean;
                                test(param0: any): boolean;
                            });
                            public constructor();
                            public test(param0: any): boolean;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class ArrayListSupplier {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ArrayListSupplier>;
                        public static INSTANCE: io.reactivex.rxjava3.internal.util.ArrayListSupplier;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.ArrayListSupplier>;
                        public get(): java.util.List<any>;
                        public static asFunction(): io.reactivex.rxjava3.functions.Function<any, any>;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.util.ArrayListSupplier;
                        public apply(param0: any): any;
                        public get(): any;
                        public static asSupplier(): io.reactivex.rxjava3.functions.Supplier<any>;
                        public apply(o: any): java.util.List<any>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class AtomicThrowable extends java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.AtomicThrowable>;
                        public tryTerminateConsumer(consumer: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                        public constructor();
                        public terminate(): java.lang.Throwable;
                        public tryTerminateConsumer(consumer: io.reactivex.rxjava3.core.Observer<any>): void;
                        public tryAddThrowable(t: java.lang.Throwable): boolean;
                        public isTerminated(): boolean;
                        public tryTerminateConsumer(consumer: org.reactivestreams.Subscriber<any>): void;
                        public tryTerminateConsumer(consumer: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                        public tryAddThrowableOrReport(t: java.lang.Throwable): boolean;
                        public tryTerminateConsumer(consumer: io.reactivex.rxjava3.core.CompletableObserver): void;
                        public tryTerminateConsumer(consumer: io.reactivex.rxjava3.core.Emitter<any>): void;
                        public tryTerminateAndReport(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class BackpressureHelper {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.BackpressureHelper>;
                        public static addCancel(r: java.util.concurrent.atomic.AtomicLong, u: number): number;
                        public static multiplyCap(a: number, b: number): number;
                        public static producedCancel(current: java.util.concurrent.atomic.AtomicLong, update: number): number;
                        public static addCap(a: number, b: number): number;
                        public static produced(current: java.util.concurrent.atomic.AtomicLong, update: number): number;
                        public static add(r: java.util.concurrent.atomic.AtomicLong, u: number): number;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class BlockingHelper {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.BlockingHelper>;
                        public static verifyNonBlocking(): void;
                        public static awaitForComplete(e: java.util.concurrent.CountDownLatch, latch: io.reactivex.rxjava3.disposables.Disposable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class BlockingIgnoringReceiver extends java.util.concurrent.CountDownLatch {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver>;
                        public error: java.lang.Throwable;
                        public accept(e: java.lang.Throwable): void;
                        public constructor();
                        public accept(param0: any): void;
                        public run(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class ConnectConsumer extends io.reactivex.rxjava3.functions.Consumer<io.reactivex.rxjava3.disposables.Disposable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ConnectConsumer>;
                        public disposable: io.reactivex.rxjava3.disposables.Disposable;
                        public constructor();
                        public accept(param0: any): void;
                        public accept(t: io.reactivex.rxjava3.disposables.Disposable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class EmptyComponent {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.EmptyComponent>;
                        public static INSTANCE: io.reactivex.rxjava3.internal.util.EmptyComponent;
                        public request(n: number): void;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public onNext(t: any): void;
                        public static asObserver(): io.reactivex.rxjava3.core.Observer<any>;
                        public onError(param0: java.lang.Throwable): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public onSuccess(param0: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static asSubscriber(): org.reactivestreams.Subscriber;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.util.EmptyComponent;
                        public onComplete(): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.EmptyComponent>;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public cancel(): void;
                        public onNext(param0: any): void;
                        public onSuccess(value: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onError(t: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class EndConsumerHelper {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.EndConsumerHelper>;
                        public static validate(upstream: org.reactivestreams.Subscription, next: org.reactivestreams.Subscription, subscriber: java.lang.Class<any>): boolean;
                        public static setOnce(upstream: java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription>, next: org.reactivestreams.Subscription, subscriber: java.lang.Class<any>): boolean;
                        public static validate(upstream: io.reactivex.rxjava3.disposables.Disposable, next: io.reactivex.rxjava3.disposables.Disposable, observer: java.lang.Class<any>): boolean;
                        public static setOnce(upstream: java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable>, next: io.reactivex.rxjava3.disposables.Disposable, observer: java.lang.Class<any>): boolean;
                        public static composeMessage(consumer: string): string;
                        public static reportDoubleSubscription(consumer: java.lang.Class<any>): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class ErrorMode {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ErrorMode>;
                        public static IMMEDIATE: io.reactivex.rxjava3.internal.util.ErrorMode;
                        public static BOUNDARY: io.reactivex.rxjava3.internal.util.ErrorMode;
                        public static END: io.reactivex.rxjava3.internal.util.ErrorMode;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.util.ErrorMode;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.ErrorMode>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class ExceptionHelper {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ExceptionHelper>;
                        public static TERMINATED: java.lang.Throwable;
                        public static nullCheck(value: any, prefix: string): any;
                        public static flatten(i: java.lang.Throwable): java.util.List<java.lang.Throwable>;
                        public static throwIfThrowable(e: java.lang.Throwable): java.lang.Exception;
                        public static nullWarning(prefix: string): string;
                        public static createNullPointerException(prefix: string): java.lang.NullPointerException;
                        public static timeoutMessage(timeout: number, unit: java.util.concurrent.TimeUnit): string;
                        public static wrapOrThrow(error: java.lang.Throwable): java.lang.RuntimeException;
                        public static addThrowable(update: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>, current: java.lang.Throwable): boolean;
                        public static terminate(field: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): java.lang.Throwable;
                    }
                    export module ExceptionHelper {
                        export class Termination {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination>;
                            public fillInStackTrace(): java.lang.Throwable;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class HalfSerializer {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.HalfSerializer>;
                        public static onComplete(subscriber: org.reactivestreams.Subscriber<any>, wip: java.util.concurrent.atomic.AtomicInteger, errors: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
                        public static onComplete(observer: io.reactivex.rxjava3.core.Observer<any>, wip: java.util.concurrent.atomic.AtomicInteger, errors: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
                        public static onError(observer: io.reactivex.rxjava3.core.Observer<any>, ex: java.lang.Throwable, wip: java.util.concurrent.atomic.AtomicInteger, errors: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
                        public static onNext(subscriber: org.reactivestreams.Subscriber, value: any, wip: java.util.concurrent.atomic.AtomicInteger, errors: io.reactivex.rxjava3.internal.util.AtomicThrowable): boolean;
                        public static onNext(observer: io.reactivex.rxjava3.core.Observer<any>, value: any, wip: java.util.concurrent.atomic.AtomicInteger, errors: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
                        public static onError(subscriber: org.reactivestreams.Subscriber<any>, ex: java.lang.Throwable, wip: java.util.concurrent.atomic.AtomicInteger, errors: io.reactivex.rxjava3.internal.util.AtomicThrowable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class HashMapSupplier extends io.reactivex.rxjava3.functions.Supplier<java.util.Map<any, any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.HashMapSupplier>;
                        public static INSTANCE: io.reactivex.rxjava3.internal.util.HashMapSupplier;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.HashMapSupplier>;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.util.HashMapSupplier;
                        public get(): java.util.Map<any, any>;
                        public get(): any;
                        public static asSupplier(): io.reactivex.rxjava3.functions.Supplier<any>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class LinkedArrayList {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.LinkedArrayList>;
                        public head(): androidNative.Array<any>;
                        public constructor(capacityHint: number);
                        public add(this_: any): void;
                        public size(): number;
                        public toString(): string;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class ListAddBiConsumer extends io.reactivex.rxjava3.functions.BiFunction<java.util.List<any>, any, java.util.List<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ListAddBiConsumer>;
                        public static INSTANCE: io.reactivex.rxjava3.internal.util.ListAddBiConsumer;
                        public apply(param0: any, param1: any): any;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.ListAddBiConsumer>;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.util.ListAddBiConsumer;
                        public static instance(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                        public apply(t1: java.util.List<any>, t2: any): java.util.List<any>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class MergerBiFunction<T> extends io.reactivex.rxjava3.functions.BiFunction<java.util.List<any>, java.util.List<any>, java.util.List<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.MergerBiFunction<any>>;
                        public apply(param0: any, param1: any): any;
                        public constructor(comparator: java.util.Comparator<any>);
                        public apply(a: java.util.List<any>, b: java.util.List<any>): java.util.List<any>;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class NotificationLite {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite>;
                        public static COMPLETE: io.reactivex.rxjava3.internal.util.NotificationLite;
                        public static disposable(d: io.reactivex.rxjava3.disposables.Disposable): any;
                        public static isDisposable(o: any): boolean;
                        public static next(value: any): any;
                        public static getDisposable(o: any): io.reactivex.rxjava3.disposables.Disposable;
                        public static accept(o: any, observer: io.reactivex.rxjava3.core.Observer<any>): boolean;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.internal.util.NotificationLite>;
                        public static isComplete(o: any): boolean;
                        public static complete(): any;
                        public static getError(o: any): java.lang.Throwable;
                        public toString(): string;
                        public static acceptFull(o: any, s: org.reactivestreams.Subscriber): boolean;
                        public static subscription(s: org.reactivestreams.Subscription): any;
                        public static valueOf(name: string): io.reactivex.rxjava3.internal.util.NotificationLite;
                        public static isSubscription(o: any): boolean;
                        public static error(e: java.lang.Throwable): any;
                        public static acceptFull(o: any, observer: io.reactivex.rxjava3.core.Observer<any>): boolean;
                        public static getValue(o: any): any;
                        public static getSubscription(o: any): org.reactivestreams.Subscription;
                        public static isError(o: any): boolean;
                        public static accept(o: any, s: org.reactivestreams.Subscriber): boolean;
                    }
                    export module NotificationLite {
                        export class DisposableNotification {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification>;
                            public toString(): string;
                        }
                        export class ErrorNotification {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite.ErrorNotification>;
                            public hashCode(): number;
                            public equals(this_: any): boolean;
                            public toString(): string;
                        }
                        export class SubscriptionNotification {
                            public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.NotificationLite.SubscriptionNotification>;
                            public toString(): string;
                        }
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class ObservableQueueDrain<T, U> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any, any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            cancelled(): boolean;
                            done(): boolean;
                            error(): java.lang.Throwable;
                            enter(): boolean;
                            leave(param0: number): number;
                            accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: T): void;
                        });
                        public constructor();
                        public enter(): boolean;
                        public done(): boolean;
                        public leave(param0: number): number;
                        public accept(param0: io.reactivex.rxjava3.core.Observer<any>, param1: T): void;
                        public cancelled(): boolean;
                        public error(): java.lang.Throwable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class OpenHashSet<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.OpenHashSet<any>>;
                        public remove(value: T): boolean;
                        public constructor();
                        public constructor(capacity: number);
                        public keys(): androidNative.Array<any>;
                        public size(): number;
                        public add(value: T): boolean;
                        public constructor(capacity: number, loadFactor: number);
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class Pow2 {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.Pow2>;
                        public static roundToPowerOfTwo(value: number): number;
                        public static isPowerOfTwo(value: number): boolean;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class QueueDrain<T, U> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.QueueDrain<any, any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.util.QueueDrain<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            cancelled(): boolean;
                            done(): boolean;
                            error(): java.lang.Throwable;
                            enter(): boolean;
                            requested(): number;
                            produced(param0: number): number;
                            leave(param0: number): number;
                            accept(param0: org.reactivestreams.Subscriber<any>, param1: T): boolean;
                        });
                        public constructor();
                        public enter(): boolean;
                        public produced(param0: number): number;
                        public accept(param0: org.reactivestreams.Subscriber<any>, param1: T): boolean;
                        public done(): boolean;
                        public leave(param0: number): number;
                        public cancelled(): boolean;
                        public error(): java.lang.Throwable;
                        public requested(): number;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class QueueDrainHelper {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.QueueDrainHelper>;
                        public static drainMaxLoop(d: io.reactivex.rxjava3.operators.SimplePlainQueue<any>, v: org.reactivestreams.Subscriber, empty: boolean, r: io.reactivex.rxjava3.disposables.Disposable, q: io.reactivex.rxjava3.internal.util.QueueDrain<any, any>): void;
                        public static checkTerminated(err: boolean, err: boolean, d: org.reactivestreams.Subscriber, empty: boolean, s: io.reactivex.rxjava3.operators.SimpleQueue<any>, delayError: io.reactivex.rxjava3.internal.util.QueueDrain<any, any>): boolean;
                        public static postCompleteRequest(r: number, r0: org.reactivestreams.Subscriber, u: java.util.Queue<any>, n: java.util.concurrent.atomic.AtomicLong, actual: io.reactivex.rxjava3.functions.BooleanSupplier): boolean;
                        public static postComplete(r: org.reactivestreams.Subscriber, u: java.util.Queue<any>, actual: java.util.concurrent.atomic.AtomicLong, queue: io.reactivex.rxjava3.functions.BooleanSupplier): void;
                        public static createQueue(capacityHint: number): io.reactivex.rxjava3.operators.SimpleQueue<any>;
                        public static drainLoop(d: io.reactivex.rxjava3.operators.SimplePlainQueue<any>, v: io.reactivex.rxjava3.core.Observer<any>, empty: boolean, q: io.reactivex.rxjava3.disposables.Disposable, a: io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any, any>): void;
                        public static checkTerminated(err: boolean, err: boolean, d: io.reactivex.rxjava3.core.Observer<any>, empty: boolean, observer: io.reactivex.rxjava3.operators.SimpleQueue<any>, delayError: io.reactivex.rxjava3.disposables.Disposable, q: io.reactivex.rxjava3.internal.util.ObservableQueueDrain<any, any>): boolean;
                        public static request(s: org.reactivestreams.Subscription, prefetch: number): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class SorterFunction<T> extends io.reactivex.rxjava3.functions.Function<java.util.List<any>, java.util.List<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.SorterFunction<any>>;
                        public apply(t: java.util.List<any>): java.util.List<any>;
                        public constructor(comparator: java.util.Comparator<any>);
                        public apply(param0: any): any;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class SuppressAnimalSniffer {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                        });
                        public constructor();
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module internal {
                export module util {
                    export class VolatileSizeArrayList<T> extends java.util.concurrent.atomic.AtomicInteger {
                        public static class: java.lang.Class<io.reactivex.rxjava3.internal.util.VolatileSizeArrayList<any>>;
                        public remove(index: number): any;
                        public indexOf(o: any): number;
                        public listIterator(): java.util.ListIterator<any>;
                        public equals(obj: any): boolean;
                        public retainAll(c: java.util.Collection<any>): boolean;
                        public iterator(): java.util.Iterator<any>;
                        public add(index: number, element: any): void;
                        public hashCode(): number;
                        public lastIndexOf(o: any): number;
                        public contains(o: any): boolean;
                        public removeAll(c: java.util.Collection<any>): boolean;
                        public subList(fromIndex: number, toIndex: number): java.util.List<any>;
                        public constructor(initialCapacity: number);
                        public isEmpty(): boolean;
                        public containsAll(c: java.util.Collection<any>): boolean;
                        public size(): number;
                        public listIterator(index: number): java.util.ListIterator<any>;
                        public addAll(c: java.util.Collection<any>): boolean;
                        public constructor();
                        public set(index: number, element: any): any;
                        public add(e: any): boolean;
                        public get(index: number): any;
                        public toArray(): androidNative.Array<any>;
                        public remove(o: any): boolean;
                        public toString(): string;
                        public addAll(index: number, c: java.util.Collection<any>): boolean;
                        public toArray(a: androidNative.Array<any>): androidNative.Array<any>;
                        public clear(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observables {
                export abstract class ConnectableObservable<T> extends io.reactivex.rxjava3.core.Observable<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observables.ConnectableObservable<any>>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public reset(): void;
                    public refCount(observerCount: number): io.reactivex.rxjava3.core.Observable<any>;
                    public refCount(timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public refCount(): io.reactivex.rxjava3.core.Observable<any>;
                    public refCount(observerCount: number, timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public autoConnect(): io.reactivex.rxjava3.core.Observable<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public refCount(observerCount: number, timeout: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Observable<any>;
                    public autoConnect(numberOfObservers: number): io.reactivex.rxjava3.core.Observable<any>;
                    public constructor();
                    public connect(param0: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public autoConnect(numberOfObservers: number, connection: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public refCount(timeout: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.core.Observable<any>;
                    public connect(): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observables {
                export abstract class GroupedObservable<K, T> extends io.reactivex.rxjava3.core.Observable<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observables.GroupedObservable<any, any>>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public constructor();
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public constructor(key: any);
                    public getKey(): any;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class BaseTestConsumer<T, U> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.BaseTestConsumer<any, any>>;
                    public done: java.util.concurrent.CountDownLatch;
                    public errors: java.util.List<java.lang.Throwable>;
                    public completions: number;
                    public lastThread: java.lang.Thread;
                    public checkSubscriptionOnce: boolean;
                    public tag: string;
                    public timeout: boolean;
                    public assertValue(valuePredicate: io.reactivex.rxjava3.functions.Predicate<T>): U;
                    public assertValue(value: T): U;
                    public await(time: number, unit: java.util.concurrent.TimeUnit): boolean;
                    public values(): java.util.List<T>;
                    public withTag(tag: string): U;
                    public assertError(errorPredicate: io.reactivex.rxjava3.functions.Predicate<java.lang.Throwable>): U;
                    public assertValuesOnly(values: androidNative.Array<T>): U;
                    public awaitDone(this_: number, time: java.util.concurrent.TimeUnit): U;
                    public assertSubscribed(): U;
                    public assertNotComplete(): U;
                    public assertError(error: java.lang.Throwable): U;
                    public constructor();
                    public assertValueAt(index: number, value: T): U;
                    public assertValueSequence(v: java.lang.Iterable<any>): U;
                    public assertResult(values: androidNative.Array<T>): U;
                    public assertNoErrors(): U;
                    public assertValueCount(count: number): U;
                    public static valueAndClass(o: any): string;
                    public assertNoValues(): U;
                    public dispose(): void;
                    public assertFailure(error: java.lang.Class<any>, values: androidNative.Array<T>): U;
                    public assertValueAt(this_: number, index: io.reactivex.rxjava3.functions.Predicate<T>): U;
                    public awaitCount(this_: number): U;
                    public assertEmpty(): U;
                    public await(): U;
                    public assertComplete(): U;
                    public assertError(errorClass: java.lang.Class<any>): U;
                    public isDisposed(): boolean;
                    public fail(this_: string): java.lang.AssertionError;
                    public assertValues(u: androidNative.Array<T>): U;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class DefaultObserver<T> extends io.reactivex.rxjava3.core.Observer<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.DefaultObserver<any>>;
                    public onStart(): void;
                    public constructor();
                    public cancel(): void;
                    public onComplete(): void;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onNext(param0: any): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class DisposableCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableCompletableObserver>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onComplete(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class DisposableMaybeObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableMaybeObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onComplete(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSuccess(param0: T): void;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class DisposableObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onComplete(): void;
                    public onNext(param0: T): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class DisposableSingleObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.DisposableSingleObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSuccess(param0: T): void;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export class LambdaConsumerIntrospection {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.LambdaConsumerIntrospection>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.observers.LambdaConsumerIntrospection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        hasCustomOnError(): boolean;
                    });
                    public constructor();
                    public hasCustomOnError(): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class ResourceCompletableObserver implements io.reactivex.rxjava3.core.CompletableObserver, io.reactivex.rxjava3.disposables.Disposable {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceCompletableObserver>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onComplete(): void;
                    public add(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class ResourceMaybeObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceMaybeObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onComplete(): void;
                    public add(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSuccess(param0: T): void;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class ResourceObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onComplete(): void;
                    public add(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onNext(param0: T): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export abstract class ResourceSingleObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.ResourceSingleObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public add(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSuccess(param0: T): void;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export class SafeObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.SafeObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(e: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                    public onComplete(): void;
                    public onNext(param0: T): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onError(e: java.lang.Throwable): void;
                    public isDisposed(): boolean;
                    public onNext(ex: T): void;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export class SerializedObserver<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.SerializedObserver<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                    public onComplete(): void;
                    public onNext(param0: T): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onNext(this_: T): void;
                    public onError(param0: java.lang.Throwable): void;
                    public constructor(actual: io.reactivex.rxjava3.core.Observer<any>, delayError: boolean);
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public onError(q: java.lang.Throwable): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module observers {
                export class TestObserver<T> extends io.reactivex.rxjava3.observers.BaseTestConsumer<any, io.reactivex.rxjava3.observers.TestObserver<any>> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.observers.TestObserver<any>>;
                    public onSuccess(value: any): void;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public assertSubscribed(): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public onNext(t: any): void;
                    public assertSubscribed(): any;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public static create(): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public constructor();
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static create(delegate: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public onError(t: java.lang.Throwable): void;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public constructor(downstream: io.reactivex.rxjava3.core.Observer<any>);
                    public onComplete(): void;
                    public onSuccess(param0: any): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public isDisposed(): boolean;
                    public hasSubscription(): boolean;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                    public onNext(param0: any): void;
                }
                export module TestObserver {
                    export class EmptyObserver extends io.reactivex.rxjava3.core.Observer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.observers.TestObserver.EmptyObserver>;
                        public static INSTANCE: io.reactivex.rxjava3.observers.TestObserver.EmptyObserver;
                        public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onNext(param0: any): void;
                        public onNext(t: any): void;
                        public static valueOf(name: string): io.reactivex.rxjava3.observers.TestObserver.EmptyObserver;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.observers.TestObserver.EmptyObserver>;
                        public onError(param0: java.lang.Throwable): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class ConditionalSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.ConditionalSubscriber<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.ConditionalSubscriber<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        tryOnNext(param0: any): boolean;
                        onSubscribe(param0: org.reactivestreams.Subscription): void;
                    });
                    public constructor();
                    public tryOnNext(param0: any): boolean;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class QueueDisposable<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.QueueDisposable<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.QueueDisposable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        requestFusion(param0: number): number;
                        dispose(): void;
                        isDisposed(): boolean;
                        fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        empty(): io.reactivex.rxjava3.disposables.Disposable;
                        disposed(): io.reactivex.rxjava3.disposables.Disposable;
                        offer(param0: T): boolean;
                        offer(param0: T, param1: T): boolean;
                        poll(): T;
                        isEmpty(): boolean;
                        clear(): void;
                    });
                    public constructor();
                    public static BOUNDARY: number = 4;
                    public static NONE: number = 0;
                    public static SYNC: number = 1;
                    public static ANY: number = 3;
                    public static ASYNC: number = 2;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public isEmpty(): boolean;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public offer(param0: T): boolean;
                    public isDisposed(): boolean;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public clear(): void;
                    public requestFusion(param0: number): number;
                    public poll(): T;
                    public offer(param0: T, param1: T): boolean;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class QueueFuseable<T> extends io.reactivex.rxjava3.operators.SimpleQueue<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.QueueFuseable<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.QueueFuseable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        requestFusion(param0: number): number;
                        offer(param0: any): boolean;
                        offer(param0: any, param1: any): boolean;
                        poll(): any;
                        isEmpty(): boolean;
                        clear(): void;
                    });
                    public constructor();
                    public static BOUNDARY: number = 4;
                    public static NONE: number = 0;
                    public static SYNC: number = 1;
                    public static ANY: number = 3;
                    public static ASYNC: number = 2;
                    public poll(): any;
                    public isEmpty(): boolean;
                    public offer(param0: any, param1: any): boolean;
                    public clear(): void;
                    public requestFusion(param0: number): number;
                    public offer(param0: any): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class QueueSubscription<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.QueueSubscription<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.QueueSubscription<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        requestFusion(param0: number): number;
                        offer(param0: T): boolean;
                        offer(param0: T, param1: T): boolean;
                        poll(): T;
                        isEmpty(): boolean;
                        clear(): void;
                    });
                    public constructor();
                    public static BOUNDARY: number = 4;
                    public static NONE: number = 0;
                    public static SYNC: number = 1;
                    public static ANY: number = 3;
                    public static ASYNC: number = 2;
                    public offer(param0: T): boolean;
                    public isEmpty(): boolean;
                    public clear(): void;
                    public requestFusion(param0: number): number;
                    public poll(): T;
                    public offer(param0: T, param1: T): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class ScalarSupplier<T> extends io.reactivex.rxjava3.functions.Supplier<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.ScalarSupplier<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.ScalarSupplier<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        get(): any;
                        get(): any;
                    });
                    public constructor();
                    public get(): any;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class SimplePlainQueue<T> extends io.reactivex.rxjava3.operators.SimpleQueue<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.SimplePlainQueue<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.SimplePlainQueue<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        poll(): any;
                        offer(param0: any): boolean;
                        offer(param0: any, param1: any): boolean;
                        poll(): any;
                        isEmpty(): boolean;
                        clear(): void;
                    });
                    public constructor();
                    public poll(): any;
                    public isEmpty(): boolean;
                    public offer(param0: any, param1: any): boolean;
                    public clear(): void;
                    public offer(param0: any): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class SimpleQueue<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.SimpleQueue<any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.operators.SimpleQueue<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        offer(param0: T): boolean;
                        offer(param0: T, param1: T): boolean;
                        poll(): T;
                        isEmpty(): boolean;
                        clear(): void;
                    });
                    public constructor();
                    public offer(param0: T): boolean;
                    public isEmpty(): boolean;
                    public clear(): void;
                    public poll(): T;
                    public offer(param0: T, param1: T): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class SpscArrayQueue<E> extends java.util.concurrent.atomic.AtomicReferenceArray<any> implements io.reactivex.rxjava3.operators.SimplePlainQueue<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.SpscArrayQueue<any>>;
                    public constructor(capacity: number);
                    public offer(v1: any, v2: any): boolean;
                    public poll(): any;
                    public isEmpty(): boolean;
                    public offer(this_: any): boolean;
                    public clear(): void;
                    public offer(param0: any, param1: any): boolean;
                    public offer(param0: any): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module operators {
                export class SpscLinkedArrayQueue<T> extends io.reactivex.rxjava3.operators.SimplePlainQueue<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.operators.SpscLinkedArrayQueue<any>>;
                    public constructor(bufferSize: number);
                    public poll(): any;
                    public peek(): any;
                    public isEmpty(): boolean;
                    public clear(): void;
                    public offer(param0: any, param1: any): boolean;
                    public size(): number;
                    public offer(lookAheadElementOffset: any): boolean;
                    public offer(param0: any): boolean;
                    public offer(newBuffer: any, this_: any): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module parallel {
                export class ParallelFailureHandling extends io.reactivex.rxjava3.functions.BiFunction<java.lang.Long, java.lang.Throwable, io.reactivex.rxjava3.parallel.ParallelFailureHandling> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelFailureHandling>;
                    public static STOP: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
                    public static ERROR: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
                    public static SKIP: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
                    public static RETRY: io.reactivex.rxjava3.parallel.ParallelFailureHandling;
                    public apply(param0: any, param1: any): any;
                    public static valueOf(name: string): io.reactivex.rxjava3.parallel.ParallelFailureHandling;
                    public apply(t1: java.lang.Long, t2: java.lang.Throwable): io.reactivex.rxjava3.parallel.ParallelFailureHandling;
                    public static values(): androidNative.Array<io.reactivex.rxjava3.parallel.ParallelFailureHandling>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module parallel {
                export abstract class ParallelFlowable<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelFlowable<any>>;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorHandler: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public sequential(prefetch: number): io.reactivex.rxjava3.core.Flowable<T>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public doOnNext(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public flatMapIterable(mapper: io.reactivex.rxjava3.functions.Function<any, any>, bufferSize: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public static from(source: org.reactivestreams.Publisher, parallelism: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public runOn(scheduler: io.reactivex.rxjava3.core.Scheduler, prefetch: number): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public doAfterTerminated(onAfterTerminate: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public constructor();
                    public doOnRequest(onRequest: io.reactivex.rxjava3.functions.LongConsumer): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public doOnCancel(onCancel: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public sorted(comparator: java.util.Comparator<any>, capacityHint: number): io.reactivex.rxjava3.core.Flowable<T>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public static from(source: org.reactivestreams.Publisher, parallelism: number, prefetch: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public sequentialDelayError(): io.reactivex.rxjava3.core.Flowable<T>;
                    public subscribe(param0: androidNative.Array<org.reactivestreams.Subscriber<any>>): void;
                    public doOnNext(onNext: io.reactivex.rxjava3.functions.Consumer<any>, errorHandler: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public doOnNext(onNext: io.reactivex.rxjava3.functions.Consumer<any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorHandler: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, io.reactivex.rxjava3.parallel.ParallelFailureHandling>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public concatMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, tillTheEnd: boolean): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public doOnSubscribe(onSubscribe: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public concatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public sorted(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.core.Flowable<T>;
                    public doOnError(onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number, prefetch: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public reduce(initialSupplier: io.reactivex.rxjava3.functions.Supplier<any>, reducer: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public toSortedList(comparator: java.util.Comparator<any>, capacityHint: number): io.reactivex.rxjava3.core.Flowable<java.util.List<T>>;
                    public doAfterNext(onAfterNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public validate(iae: androidNative.Array<org.reactivestreams.Subscriber<any>>): boolean;
                    public flatMap(mapper: io.reactivex.rxjava3.functions.Function<any, any>, delayError: boolean, maxConcurrency: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public filter(predicate: io.reactivex.rxjava3.functions.Predicate<any>, errorHandler: io.reactivex.rxjava3.parallel.ParallelFailureHandling): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public flatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public parallelism(): number;
                    public doOnComplete(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public static from(source: org.reactivestreams.Publisher): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public runOn(scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.parallel.ParallelFlowable<T>;
                    public mapOptional(mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public sequential(): io.reactivex.rxjava3.core.Flowable<T>;
                    public toSortedList(comparator: java.util.Comparator<any>): io.reactivex.rxjava3.core.Flowable<java.util.List<T>>;
                    public concatMapDelayError(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number, tillTheEnd: boolean): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public reduce(reducer: io.reactivex.rxjava3.functions.BiFunction<T, T, T>): io.reactivex.rxjava3.core.Flowable<T>;
                    public flatMapStream(mapper: io.reactivex.rxjava3.functions.Function<any, any>, prefetch: number): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public map(mapper: io.reactivex.rxjava3.functions.Function<any, any>, errorHandler: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public sequentialDelayError(prefetch: number): io.reactivex.rxjava3.core.Flowable<T>;
                    public compose(composer: io.reactivex.rxjava3.parallel.ParallelTransformer<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public static fromArray(publishers: androidNative.Array<org.reactivestreams.Publisher>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public collect(collectionSupplier: io.reactivex.rxjava3.functions.Supplier<any>, collector: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public to(converter: io.reactivex.rxjava3.parallel.ParallelFlowableConverter<any, any>): any;
                    public collect(collector: java.util.stream.Collector): io.reactivex.rxjava3.core.Flowable<any>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module parallel {
                export class ParallelFlowableConverter<T, R> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelFlowableConverter<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.parallel.ParallelFlowableConverter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<T>): R;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<T>): R;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module parallel {
                export class ParallelTransformer<Upstream, Downstream> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.parallel.ParallelTransformer<any, any>>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.parallel.ParallelTransformer<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<Upstream>): io.reactivex.rxjava3.parallel.ParallelFlowable<Downstream>;
                    });
                    public constructor();
                    public apply(param0: io.reactivex.rxjava3.parallel.ParallelFlowable<Upstream>): io.reactivex.rxjava3.parallel.ParallelFlowable<Downstream>;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module plugins {
                export class RxJavaPlugins {
                    public static class: java.lang.Class<io.reactivex.rxjava3.plugins.RxJavaPlugins>;
                    public static createExecutorScheduler(executor: java.util.concurrent.Executor, interruptibleWorker: boolean, fair: boolean): io.reactivex.rxjava3.core.Scheduler;
                    public static onSubscribe(source: io.reactivex.rxjava3.core.Observable<any>, observer: io.reactivex.rxjava3.core.Observer<any>): io.reactivex.rxjava3.core.Observer<any>;
                    public static setComputationSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnMaybeSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                    public static onAssembly(source: io.reactivex.rxjava3.observables.ConnectableObservable<any>): io.reactivex.rxjava3.observables.ConnectableObservable<any>;
                    public static initSingleScheduler(defaultScheduler: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
                    public static getInitSingleSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static createNewThreadScheduler(threadFactory: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
                    public static isLockdown(): boolean;
                    public static createComputationScheduler(threadFactory: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
                    public static getSingleSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static onAssembly(source: io.reactivex.rxjava3.core.Maybe<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public static onError(e: java.lang.Throwable): void;
                    public static setOnMaybeSubscribe(onMaybeSubscribe: io.reactivex.rxjava3.functions.BiFunction<any, io.reactivex.rxjava3.core.MaybeObserver<any>, any>): void;
                    public static onSubscribe(source: io.reactivex.rxjava3.core.Flowable<any>, subscriber: org.reactivestreams.Subscriber): org.reactivestreams.Subscriber;
                    public static getNewThreadSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setInitIoSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static onSchedule(run: java.lang.Runnable): java.lang.Runnable;
                    public static getOnCompletableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setOnFlowableSubscribe(onFlowableSubscribe: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
                    public static onSingleScheduler(defaultScheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
                    public static setOnParallelSubscribe(handler: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
                    public static initComputationScheduler(defaultScheduler: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
                    public static getOnBeforeBlocking(): io.reactivex.rxjava3.functions.BooleanSupplier;
                    public static createSingleScheduler(threadFactory: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
                    public static lockdown(): void;
                    public static setSingleSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnConnectableFlowableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static getOnConnectableObservableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setOnObservableAssembly(onObservableAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnSingleAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setInitComputationSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnMaybeAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setOnParallelAssembly(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnFlowableSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                    public static getComputationSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static onSubscribe(source: io.reactivex.rxjava3.core.Completable, observer: io.reactivex.rxjava3.core.CompletableObserver): io.reactivex.rxjava3.core.CompletableObserver;
                    public static onAssembly(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>): io.reactivex.rxjava3.parallel.ParallelFlowable<any>;
                    public static setNewThreadSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getErrorHandler(): io.reactivex.rxjava3.functions.Consumer<any>;
                    public static getOnFlowableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setScheduleHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getIoSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setInitNewThreadSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static setOnBeforeBlocking(handler: io.reactivex.rxjava3.functions.BooleanSupplier): void;
                    public static setErrorHandler(handler: io.reactivex.rxjava3.functions.Consumer<any>): void;
                    public static onSubscribe(source: io.reactivex.rxjava3.parallel.ParallelFlowable<any>, subscribers: androidNative.Array<org.reactivestreams.Subscriber>): androidNative.Array<org.reactivestreams.Subscriber>;
                    public static onAssembly(source: io.reactivex.rxjava3.flowables.ConnectableFlowable<any>): io.reactivex.rxjava3.flowables.ConnectableFlowable<any>;
                    public static setOnMaybeAssembly(onMaybeAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static onAssembly(source: io.reactivex.rxjava3.core.Completable): io.reactivex.rxjava3.core.Completable;
                    public static initIoScheduler(defaultScheduler: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
                    public static initNewThreadScheduler(defaultScheduler: io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler>): io.reactivex.rxjava3.core.Scheduler;
                    public static onSubscribe(source: io.reactivex.rxjava3.core.Maybe<any>, observer: io.reactivex.rxjava3.core.MaybeObserver<any>): io.reactivex.rxjava3.core.MaybeObserver<any>;
                    public static onComputationScheduler(defaultScheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
                    public static setOnSingleAssembly(onSingleAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnParallelAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static reset(): void;
                    public static setOnConnectableFlowableAssembly(onConnectableFlowableAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static setOnCompletableAssembly(onCompletableAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static onAssembly(source: io.reactivex.rxjava3.core.Observable<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public static createIoScheduler(threadFactory: java.util.concurrent.ThreadFactory): io.reactivex.rxjava3.core.Scheduler;
                    public static setIoSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static onAssembly(source: io.reactivex.rxjava3.core.Single<any>): io.reactivex.rxjava3.core.Single<any>;
                    public static getOnObservableAssembly(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static setInitSingleSchedulerHandler(handler: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static setOnObservableSubscribe(onObservableSubscribe: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
                    public static setOnConnectableObservableAssembly(onConnectableObservableAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static getOnObservableSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                    public static getInitComputationSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static getInitIoSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static onNewThreadScheduler(defaultScheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
                    public static onAssembly(source: io.reactivex.rxjava3.core.Flowable<any>): io.reactivex.rxjava3.core.Flowable<any>;
                    public static setOnCompletableSubscribe(onCompletableSubscribe: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
                    public static onSubscribe(source: io.reactivex.rxjava3.core.Single<any>, observer: io.reactivex.rxjava3.core.SingleObserver<any>): io.reactivex.rxjava3.core.SingleObserver<any>;
                    public static getOnParallelSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                    public static getOnCompletableSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                    public static setFailOnNonBlockingScheduler(enable: boolean): void;
                    public static setOnSingleSubscribe(onSingleSubscribe: io.reactivex.rxjava3.functions.BiFunction<any, any, any>): void;
                    public static getInitNewThreadSchedulerHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static getScheduleHandler(): io.reactivex.rxjava3.functions.Function<any, any>;
                    public static onIoScheduler(defaultScheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.core.Scheduler;
                    public static getOnSingleSubscribe(): io.reactivex.rxjava3.functions.BiFunction<any, any, any>;
                    public static setOnFlowableAssembly(onFlowableAssembly: io.reactivex.rxjava3.functions.Function<any, any>): void;
                    public static onBeforeBlocking(): boolean;
                    public static isFailOnNonBlockingScheduler(): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class AsyncProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.AsyncProcessor<any>>;
                    public subscribeActual(ex: org.reactivestreams.Subscriber<any>): void;
                    public getValue(): any;
                    public onError(this_: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public static create(): io.reactivex.rxjava3.processors.AsyncProcessor<any>;
                    public hasSubscribers(): boolean;
                    public onNext(t: any): void;
                    public hasValue(): boolean;
                    public hasComplete(): boolean;
                }
                export module AsyncProcessor {
                    export class AsyncSubscription<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription<any>>;
                        public cancel(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class BehaviorProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.BehaviorProcessor<any>>;
                    public getValue(): any;
                    public onError(this_: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public static createDefault(defaultValue: any): io.reactivex.rxjava3.processors.BehaviorProcessor<any>;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public offer(bs: any): boolean;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public hasSubscribers(): boolean;
                    public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                    public hasValue(): boolean;
                    public static create(): io.reactivex.rxjava3.processors.BehaviorProcessor<any>;
                    public hasComplete(): boolean;
                }
                export module BehaviorProcessor {
                    export class BehaviorSubscription<T> extends java.util.concurrent.atomic.AtomicLong {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.BehaviorProcessor.BehaviorSubscription<any>>;
                        public request(n: number): void;
                        public test(o: any): boolean;
                        public test(param0: any): boolean;
                        public cancel(): void;
                        public isFull(): boolean;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export abstract class FlowableProcessor<T> extends io.reactivex.rxjava3.core.Flowable<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.FlowableProcessor<any>>;
                    public toSerialized(): io.reactivex.rxjava3.processors.FlowableProcessor<any>;
                    public constructor();
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public hasSubscribers(): boolean;
                    public hasComplete(): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class MulticastProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.MulticastProcessor<any>>;
                    public static create(bufferSize: number, refCount: boolean): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
                    public startUnbounded(): void;
                    public onError(t: java.lang.Throwable): void;
                    public static create(refCount: boolean): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
                    public static create(bufferSize: number): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public start(): void;
                    public hasSubscribers(): boolean;
                    public onNext(t: any): void;
                    public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                    public offer(t: any): boolean;
                    public static create(): io.reactivex.rxjava3.processors.MulticastProcessor<any>;
                    public onSubscribe(m: org.reactivestreams.Subscription): void;
                    public hasComplete(): boolean;
                }
                export module MulticastProcessor {
                    export class MulticastSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription<any>>;
                        public request(this_: number): void;
                        public cancel(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class PublishProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.PublishProcessor<any>>;
                    public onError(this_: java.lang.Throwable): void;
                    public offer(s: any): boolean;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public hasSubscribers(): boolean;
                    public static create(): io.reactivex.rxjava3.processors.PublishProcessor<any>;
                    public subscribeActual(this_: org.reactivestreams.Subscriber<any>): void;
                    public hasComplete(): boolean;
                }
                export module PublishProcessor {
                    export class PublishSubscription<T> extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.PublishProcessor.PublishSubscription<any>>;
                        public request(n: number): void;
                        public isCancelled(): boolean;
                        public cancel(): void;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onNext(t: any): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class ReplayProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor<any>>;
                    public static createWithTimeAndSize(maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, maxSize: number): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
                    public getValue(): any;
                    public onError(this_: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public static createWithSize(maxSize: number): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
                    public getThrowable(): java.lang.Throwable;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public static createWithTime(maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
                    public static create(capacityHint: number): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
                    public hasSubscribers(): boolean;
                    public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                    public static create(): io.reactivex.rxjava3.processors.ReplayProcessor<any>;
                    public hasValue(): boolean;
                    public getValues(): androidNative.Array<any>;
                    public getValues(array: androidNative.Array<any>): androidNative.Array<any>;
                    public cleanupBuffer(): void;
                    public hasComplete(): boolean;
                }
                export module ReplayProcessor {
                    export class Node<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.processors.ReplayProcessor.Node<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.Node<any>>;
                    }
                    export class ReplayBuffer<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.processors.ReplayProcessor$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            next(param0: T): void;
                            error(param0: java.lang.Throwable): void;
                            complete(): void;
                            replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<T>): void;
                            size(): number;
                            getValue(): T;
                            getValues(param0: androidNative.Array<T>): androidNative.Array<T>;
                            isDone(): boolean;
                            getError(): java.lang.Throwable;
                            trimHead(): void;
                        });
                        public constructor();
                        public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<T>): void;
                        public error(param0: java.lang.Throwable): void;
                        public isDone(): boolean;
                        public complete(): void;
                        public getValue(): T;
                        public next(param0: T): void;
                        public size(): number;
                        public trimHead(): void;
                        public getValues(param0: androidNative.Array<T>): androidNative.Array<T>;
                        public getError(): java.lang.Throwable;
                    }
                    export class ReplaySubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>>;
                        public request(n: number): void;
                        public cancel(): void;
                    }
                    export class SizeAndTimeBoundReplayBuffer<T> extends io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.SizeAndTimeBoundReplayBuffer<any>>;
                        public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
                        public next(param0: any): void;
                        public error(param0: java.lang.Throwable): void;
                        public complete(): void;
                        public getValue(): any;
                        public error(ex: java.lang.Throwable): void;
                        public replay(d: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
                        public isDone(): boolean;
                        public getValues(i: androidNative.Array<any>): androidNative.Array<any>;
                        public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
                        public next(value: any): void;
                        public size(): number;
                        public trimHead(): void;
                        public getError(): java.lang.Throwable;
                    }
                    export class SizeBoundReplayBuffer<T> extends io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.SizeBoundReplayBuffer<any>>;
                        public getValues(j: androidNative.Array<any>): androidNative.Array<any>;
                        public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
                        public next(param0: any): void;
                        public error(param0: java.lang.Throwable): void;
                        public complete(): void;
                        public getValue(): any;
                        public error(ex: java.lang.Throwable): void;
                        public replay(d: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
                        public isDone(): boolean;
                        public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
                        public next(value: any): void;
                        public size(): number;
                        public trimHead(): void;
                        public getError(): java.lang.Throwable;
                    }
                    export class TimedNode<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode<any>>;
                    }
                    export class UnboundedReplayBuffer<T> extends io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.ReplayProcessor.UnboundedReplayBuffer<any>>;
                        public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
                        public next(param0: any): void;
                        public error(param0: java.lang.Throwable): void;
                        public complete(): void;
                        public getValue(): any;
                        public error(ex: java.lang.Throwable): void;
                        public replay(ex: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
                        public isDone(): boolean;
                        public replay(param0: io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription<any>): void;
                        public getValues(this_: androidNative.Array<any>): androidNative.Array<any>;
                        public next(value: any): void;
                        public size(): number;
                        public trimHead(): void;
                        public getError(): java.lang.Throwable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class SerializedProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.SerializedProcessor<any>>;
                    public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                    public onError(q: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onSubscribe(q: org.reactivestreams.Subscription): void;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public hasSubscribers(): boolean;
                    public hasComplete(): boolean;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module processors {
                export class UnicastProcessor<T> extends io.reactivex.rxjava3.processors.FlowableProcessor<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.processors.UnicastProcessor<any>>;
                    public onError(t: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public static create(): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public static create(source: io.reactivex.rxjava3.core.FlowableOnSubscribe<any>, mode: io.reactivex.rxjava3.core.BackpressureStrategy): io.reactivex.rxjava3.core.Flowable<any>;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public static create(capacityHint: number): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
                    public hasSubscribers(): boolean;
                    public onNext(t: any): void;
                    public subscribeActual(s: org.reactivestreams.Subscriber<any>): void;
                    public static create(capacityHint: number, onTerminate: java.lang.Runnable): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
                    public static create(delayError: boolean): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
                    public static create(capacityHint: number, onTerminate: java.lang.Runnable, delayError: boolean): io.reactivex.rxjava3.processors.UnicastProcessor<any>;
                    public hasComplete(): boolean;
                }
                export module UnicastProcessor {
                    export class UnicastQueueSubscription extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.processors.UnicastProcessor.UnicastQueueSubscription>;
                        public request(n: number): void;
                        public cancel(): void;
                        public poll(): any;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public requestFusion(requestedMode: number): number;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module schedulers {
                export class SchedulerRunnableIntrospection {
                    public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection>;
                    /**
                     * Constructs a new instance of the io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                     */
                    public constructor(implementation: {
                        getWrappedRunnable(): java.lang.Runnable;
                    });
                    public constructor();
                    public getWrappedRunnable(): java.lang.Runnable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module schedulers {
                export class Schedulers {
                    public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers>;
                    public static start(): void;
                    public static shutdown(): void;
                    public static computation(): io.reactivex.rxjava3.core.Scheduler;
                    public static trampoline(): io.reactivex.rxjava3.core.Scheduler;
                    public static newThread(): io.reactivex.rxjava3.core.Scheduler;
                    public static io(): io.reactivex.rxjava3.core.Scheduler;
                    public static single(): io.reactivex.rxjava3.core.Scheduler;
                    public static from(executor: java.util.concurrent.Executor): io.reactivex.rxjava3.core.Scheduler;
                    public static from(executor: java.util.concurrent.Executor, interruptibleWorker: boolean): io.reactivex.rxjava3.core.Scheduler;
                    public static from(executor: java.util.concurrent.Executor, interruptibleWorker: boolean, fair: boolean): io.reactivex.rxjava3.core.Scheduler;
                }
                export module Schedulers {
                    export class ComputationHolder {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.ComputationHolder>;
                    }
                    export class ComputationTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.ComputationTask>;
                        public get(): io.reactivex.rxjava3.core.Scheduler;
                        public get(): any;
                    }
                    export class IOTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.IOTask>;
                        public get(): io.reactivex.rxjava3.core.Scheduler;
                        public get(): any;
                    }
                    export class IoHolder {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.IoHolder>;
                    }
                    export class NewThreadHolder {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.NewThreadHolder>;
                    }
                    export class NewThreadTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.NewThreadTask>;
                        public get(): io.reactivex.rxjava3.core.Scheduler;
                        public get(): any;
                    }
                    export class SingleHolder {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.SingleHolder>;
                    }
                    export class SingleTask extends io.reactivex.rxjava3.functions.Supplier<io.reactivex.rxjava3.core.Scheduler> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Schedulers.SingleTask>;
                        public get(): io.reactivex.rxjava3.core.Scheduler;
                        public get(): any;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module schedulers {
                export class TestScheduler extends io.reactivex.rxjava3.core.Scheduler {
                    public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler>;
                    public constructor(delayTime: number, unit: java.util.concurrent.TimeUnit);
                    public constructor(delayTime: number, unit: java.util.concurrent.TimeUnit, useOnScheduleHook: boolean);
                    public constructor(useOnScheduleHook: boolean);
                    public now(unit: java.util.concurrent.TimeUnit): number;
                    public constructor();
                    public advanceTimeBy(delayTime: number, unit: java.util.concurrent.TimeUnit): void;
                    public createWorker(): io.reactivex.rxjava3.core.Scheduler.Worker;
                    public advanceTimeTo(delayTime: number, unit: java.util.concurrent.TimeUnit): void;
                    public triggerActions(): void;
                }
                export module TestScheduler {
                    export class TestWorker extends io.reactivex.rxjava3.core.Scheduler.Worker {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler.TestWorker>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public schedule(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public schedule(run: java.lang.Runnable, delayTime: number, unit: java.util.concurrent.TimeUnit): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public now(unit: java.util.concurrent.TimeUnit): number;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export module TestWorker {
                        export class QueueRemove extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable> implements io.reactivex.rxjava3.disposables.Disposable {
                            public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler.TestWorker.QueueRemove>;
                            public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                            public dispose(): void;
                            public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                            public isDisposed(): boolean;
                            public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                            public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                            public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                            public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        }
                    }
                    export class TimedRunnable extends java.lang.Comparable<io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable>;
                        public compareTo(o: io.reactivex.rxjava3.schedulers.TestScheduler.TimedRunnable): number;
                        public toString(): string;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module schedulers {
                export class Timed<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.schedulers.Timed<any>>;
                    public value(): T;
                    public unit(): java.util.concurrent.TimeUnit;
                    public toString(): string;
                    public time(unit: java.util.concurrent.TimeUnit): number;
                    public equals(this_: any): boolean;
                    public constructor(value: T, time: number, unit: java.util.concurrent.TimeUnit);
                    public time(): number;
                    public hashCode(): number;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class AsyncSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.AsyncSubject<any>>;
                    public getValue(): any;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(this_: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onNext(t: any): void;
                    public hasValue(): boolean;
                    public static create(): io.reactivex.rxjava3.subjects.AsyncSubject<any>;
                    public hasObservers(): boolean;
                    public subscribeActual(ex: io.reactivex.rxjava3.core.Observer<any>): void;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public hasComplete(): boolean;
                    public onNext(param0: any): void;
                }
                export module AsyncSubject {
                    export class AsyncDisposable<T> extends io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.AsyncSubject.AsyncDisposable<any>>;
                        public dispose(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class BehaviorSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.BehaviorSubject<any>>;
                    public getValue(): any;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(this_: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public hasValue(): boolean;
                    public static createDefault(defaultValue: any): io.reactivex.rxjava3.subjects.BehaviorSubject<any>;
                    public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                    public static create(): io.reactivex.rxjava3.subjects.BehaviorSubject<any>;
                    public hasObservers(): boolean;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public hasComplete(): boolean;
                    public onNext(param0: any): void;
                }
                export module BehaviorSubject {
                    export class BehaviorDisposable<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.BehaviorSubject.BehaviorDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public test(o: any): boolean;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public test(param0: T): boolean;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class CompletableSubject extends io.reactivex.rxjava3.core.Completable implements io.reactivex.rxjava3.core.CompletableObserver {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.CompletableSubject>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(this_: java.lang.Throwable): void;
                    public subscribeActual(this_: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onComplete(): void;
                    public static create(source: io.reactivex.rxjava3.core.CompletableOnSubscribe): io.reactivex.rxjava3.core.Completable;
                    public onError(param0: java.lang.Throwable): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribe(onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static create(): io.reactivex.rxjava3.subjects.CompletableSubject;
                    public subscribe(param0: io.reactivex.rxjava3.core.CompletableObserver): void;
                    public hasObservers(): boolean;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribe(onComplete: io.reactivex.rxjava3.functions.Action, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public hasComplete(): boolean;
                }
                export module CompletableSubject {
                    export class CompletableDisposable extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.CompletableSubject> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class MaybeSubject<T> extends io.reactivex.rxjava3.core.Maybe<any> implements io.reactivex.rxjava3.core.MaybeObserver<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.MaybeSubject<any>>;
                    public getValue(): any;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(this_: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public subscribeActual(ex: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public onComplete(): void;
                    public onError(param0: java.lang.Throwable): void;
                    public static create(onSubscribe: io.reactivex.rxjava3.core.MaybeOnSubscribe<any>): io.reactivex.rxjava3.core.Maybe<any>;
                    public onSuccess(param0: any): void;
                    public onSuccess(this_: any): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public hasValue(): boolean;
                    public subscribe(param0: io.reactivex.rxjava3.core.MaybeObserver<any>): void;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public hasObservers(): boolean;
                    public static create(): io.reactivex.rxjava3.subjects.MaybeSubject<any>;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public hasComplete(): boolean;
                }
                export module MaybeSubject {
                    export class MaybeDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.MaybeSubject<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.MaybeSubject.MaybeDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class PublishSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.PublishSubject<any>>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(this_: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static create(): io.reactivex.rxjava3.subjects.PublishSubject<any>;
                    public subscribeActual(this_: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasObservers(): boolean;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public hasComplete(): boolean;
                    public onNext(param0: any): void;
                }
                export module PublishSubject {
                    export class PublishDisposable<T> extends java.util.concurrent.atomic.AtomicBoolean implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.PublishSubject.PublishDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public onNext(t: any): void;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class ReplaySubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject<any>>;
                    public getValue(): any;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public getThrowable(): java.lang.Throwable;
                    public onNext(this_: any): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public static create(): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
                    public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                    public static createWithTime(maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
                    public static createWithSize(maxSize: number): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
                    public hasObservers(): boolean;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public getValues(array: androidNative.Array<any>): androidNative.Array<any>;
                    public static create(capacityHint: number): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
                    public cleanupBuffer(): void;
                    public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public hasComplete(): boolean;
                    public onError(this_: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public hasThrowable(): boolean;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public hasValue(): boolean;
                    public getValues(): androidNative.Array<any>;
                    public static createWithTimeAndSize(maxAge: number, unit: java.util.concurrent.TimeUnit, scheduler: io.reactivex.rxjava3.core.Scheduler, maxSize: number): io.reactivex.rxjava3.subjects.ReplaySubject<any>;
                    public onNext(param0: any): void;
                }
                export module ReplaySubject {
                    export class Node<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.ReplaySubject.Node<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.Node<any>>;
                    }
                    export class ReplayBuffer<T> extends java.lang.Object {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any>>;
                        /**
                         * Constructs a new instance of the io.reactivex.rxjava3.subjects.ReplaySubject$ReplayBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
                         */
                        public constructor(implementation: {
                            add(param0: T): void;
                            addFinal(param0: any): void;
                            replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<T>): void;
                            size(): number;
                            getValue(): T;
                            getValues(param0: androidNative.Array<T>): androidNative.Array<T>;
                            get(): any;
                            compareAndSet(param0: any, param1: any): boolean;
                            trimHead(): void;
                        });
                        public constructor();
                        public compareAndSet(param0: any, param1: any): boolean;
                        public add(param0: T): void;
                        public addFinal(param0: any): void;
                        public getValue(): T;
                        public size(): number;
                        public get(): any;
                        public trimHead(): void;
                        public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<T>): void;
                        public getValues(param0: androidNative.Array<T>): androidNative.Array<T>;
                    }
                    export class ReplayDisposable<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                    export class SizeAndTimeBoundReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.SizeAndTimeBoundReplayBuffer<any>>;
                        public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
                        public add(param0: any): void;
                        public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
                        public replay(o: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
                        public getValue(): any;
                        public add(value: any): void;
                        public get(): any;
                        public getValues(i: androidNative.Array<any>): androidNative.Array<any>;
                        public compareAndSet(param0: any, param1: any): boolean;
                        public addFinal(notificationLite: any): void;
                        public addFinal(param0: any): void;
                        public size(): number;
                        public trimHead(): void;
                    }
                    export class SizeBoundReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.SizeBoundReplayBuffer<any>>;
                        public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
                        public add(param0: any): void;
                        public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
                        public replay(o: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
                        public getValue(): any;
                        public add(value: any): void;
                        public get(): any;
                        public getValues(i: androidNative.Array<any>): androidNative.Array<any>;
                        public compareAndSet(param0: any, param1: any): boolean;
                        public addFinal(notificationLite: any): void;
                        public addFinal(param0: any): void;
                        public size(): number;
                        public trimHead(): void;
                    }
                    export class TimedNode<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.ReplaySubject.TimedNode<any>> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.TimedNode<any>>;
                    }
                    export class UnboundedReplayBuffer<T> extends java.util.concurrent.atomic.AtomicReference<any> implements io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.ReplaySubject.UnboundedReplayBuffer<any>>;
                        public getValues(param0: androidNative.Array<any>): androidNative.Array<any>;
                        public add(param0: any): void;
                        public replay(param0: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
                        public replay(o: io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable<any>): void;
                        public getValue(): any;
                        public add(value: any): void;
                        public get(): any;
                        public compareAndSet(param0: any, param1: any): boolean;
                        public getValues(this_: androidNative.Array<any>): androidNative.Array<any>;
                        public addFinal(notificationLite: any): void;
                        public addFinal(param0: any): void;
                        public size(): number;
                        public trimHead(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class SerializedSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> implements io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.SerializedSubject<any>>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public test(dispose: boolean): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onNext(this_: any): void;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public test(param0: any): boolean;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public test(o: any): boolean;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                    public test(): io.reactivex.rxjava3.observers.TestObserver<any>;
                    public onError(q: java.lang.Throwable): void;
                    public onSubscribe(q: io.reactivex.rxjava3.disposables.Disposable): void;
                    public hasObservers(): boolean;
                    public hasComplete(): boolean;
                    public onNext(param0: any): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class SingleSubject<T> extends io.reactivex.rxjava3.core.Single<any> implements io.reactivex.rxjava3.core.SingleObserver<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.SingleSubject<any>>;
                    public subscribe(param0: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public getValue(): any;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(this_: java.lang.Throwable): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public static create(): io.reactivex.rxjava3.subjects.SingleSubject<any>;
                    public onError(param0: java.lang.Throwable): void;
                    public onSuccess(param0: any): void;
                    public subscribe(onCallback: io.reactivex.rxjava3.functions.BiConsumer<any, any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onSuccess(this_: any): void;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribeActual(this_: io.reactivex.rxjava3.core.SingleObserver<any>): void;
                    public hasValue(): boolean;
                    public hasObservers(): boolean;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public static create(source: io.reactivex.rxjava3.core.SingleOnSubscribe<any>): io.reactivex.rxjava3.core.Single<any>;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onSuccess: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                }
                export module SingleSubject {
                    export class SingleDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.subjects.SingleSubject<any>> implements io.reactivex.rxjava3.disposables.Disposable {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.SingleSubject.SingleDisposable<any>>;
                        public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                        public isDisposed(): boolean;
                        public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                        public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                        public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                        public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                        public dispose(): void;
                        public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export abstract class Subject<T> extends io.reactivex.rxjava3.core.Observable<any> implements io.reactivex.rxjava3.core.Observer<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.Subject<any>>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public constructor();
                    public toSerialized(): io.reactivex.rxjava3.subjects.Subject<any>;
                    public hasObservers(): boolean;
                    public hasComplete(): boolean;
                    public onNext(param0: any): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subjects {
                export class UnicastSubject<T> extends io.reactivex.rxjava3.subjects.Subject<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subjects.UnicastSubject<any>>;
                    public static create(capacityHint: number): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
                    public subscribe(): io.reactivex.rxjava3.disposables.Disposable;
                    public static create(capacityHint: number, onTerminate: java.lang.Runnable, delayError: boolean): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
                    public onError(t: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(param0: io.reactivex.rxjava3.core.Observer<any>): void;
                    public hasThrowable(): boolean;
                    public getThrowable(): java.lang.Throwable;
                    public static create(delayError: boolean): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
                    public onComplete(): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public onError(param0: java.lang.Throwable): void;
                    public subscribe(onNext: io.reactivex.rxjava3.functions.Consumer<any>, onError: io.reactivex.rxjava3.functions.Consumer<any>, onComplete: io.reactivex.rxjava3.functions.Action, container: io.reactivex.rxjava3.disposables.DisposableContainer): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(param0: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onNext(t: any): void;
                    public static create(): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
                    public subscribeActual(observer: io.reactivex.rxjava3.core.Observer<any>): void;
                    public static create(capacityHint: number, onTerminate: java.lang.Runnable): io.reactivex.rxjava3.subjects.UnicastSubject<any>;
                    public hasObservers(): boolean;
                    public onSubscribe(d: io.reactivex.rxjava3.disposables.Disposable): void;
                    public static create(source: io.reactivex.rxjava3.core.ObservableOnSubscribe<any>): io.reactivex.rxjava3.core.Observable<any>;
                    public hasComplete(): boolean;
                    public onNext(param0: any): void;
                }
                export module UnicastSubject {
                    export class UnicastQueueDisposable extends io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subjects.UnicastSubject.UnicastQueueDisposable>;
                        public requestFusion(mode: number): number;
                        public isDisposed(): boolean;
                        public poll(): any;
                        public isEmpty(): boolean;
                        public clear(): void;
                        public dispose(): void;
                    }
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subscribers {
                export abstract class DefaultSubscriber<T> extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.DefaultSubscriber<any>>;
                    public onStart(): void;
                    public request(n: number): void;
                    public constructor();
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public cancel(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subscribers {
                export abstract class DisposableSubscriber<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.DisposableSubscriber<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public cancel(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public request(n: number): void;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subscribers {
                export abstract class ResourceSubscriber<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.ResourceSubscriber<any>>;
                    public static empty(): io.reactivex.rxjava3.disposables.Disposable;
                    public onSubscribe(this_: org.reactivestreams.Subscription): void;
                    public static fromAction(action: io.reactivex.rxjava3.functions.Action): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromFuture(future: java.util.concurrent.Future<any>): io.reactivex.rxjava3.disposables.Disposable;
                    public dispose(): void;
                    public add(resource: io.reactivex.rxjava3.disposables.Disposable): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public static fromAutoCloseable(autoCloseable: java.lang.AutoCloseable): io.reactivex.rxjava3.disposables.Disposable;
                    public onStart(): void;
                    public isDisposed(): boolean;
                    public request(n: number): void;
                    public static toAutoCloseable(disposable: io.reactivex.rxjava3.disposables.Disposable): java.lang.AutoCloseable;
                    public constructor();
                    public static fromFuture(future: java.util.concurrent.Future<any>, allowInterrupt: boolean): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromSubscription(subscription: org.reactivestreams.Subscription): io.reactivex.rxjava3.disposables.Disposable;
                    public static disposed(): io.reactivex.rxjava3.disposables.Disposable;
                    public static fromRunnable(run: java.lang.Runnable): io.reactivex.rxjava3.disposables.Disposable;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subscribers {
                export class SafeSubscriber<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.SafeSubscriber<any>>;
                    public onError(e: java.lang.Throwable): void;
                    public request(e: number): void;
                    public onNext(ex: T): void;
                    public constructor(downstream: org.reactivestreams.Subscriber<any>);
                    public onSubscribe(e: org.reactivestreams.Subscription): void;
                    public cancel(): void;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subscribers {
                export class SerializedSubscriber<T> extends java.lang.Object {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.SerializedSubscriber<any>>;
                    public request(n: number): void;
                    public constructor(downstream: org.reactivestreams.Subscriber<any>);
                    public onError(q: java.lang.Throwable): void;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public cancel(): void;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public constructor(actual: org.reactivestreams.Subscriber<any>, delayError: boolean);
                    public onNext(this_: T): void;
                }
            }
        }
    }
}

declare module io {
    export module reactivex {
        export module rxjava3 {
            export module subscribers {
                export class TestSubscriber<T> extends io.reactivex.rxjava3.observers.BaseTestConsumer<any, io.reactivex.rxjava3.subscribers.TestSubscriber<any>> {
                    public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.TestSubscriber<any>>;
                    public static create(initialRequested: number): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public static create(delegate: org.reactivestreams.Subscriber): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public onError(t: java.lang.Throwable): void;
                    public constructor(downstream: org.reactivestreams.Subscriber<any>);
                    public isCancelled(): boolean;
                    public dispose(): void;
                    public onSubscribe(s: org.reactivestreams.Subscription): void;
                    public cancel(): void;
                    public onComplete(): void;
                    public onSubscribe(param0: org.reactivestreams.Subscription): void;
                    public constructor(initialRequest: number);
                    public onStart(): void;
                    public onNext(t: any): void;
                    public assertSubscribed(): any;
                    public isDisposed(): boolean;
                    public hasSubscription(): boolean;
                    public request(n: number): void;
                    public constructor();
                    public static create(): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public requestMore(n: number): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                    public constructor(actual: org.reactivestreams.Subscriber<any>, initialRequest: number);
                    public assertSubscribed(): io.reactivex.rxjava3.subscribers.TestSubscriber<any>;
                }
                export module TestSubscriber {
                    export class EmptySubscriber extends io.reactivex.rxjava3.core.FlowableSubscriber<any> {
                        public static class: java.lang.Class<io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber>;
                        public static INSTANCE: io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber;
                        public onComplete(): void;
                        public onError(t: java.lang.Throwable): void;
                        public onSubscribe(param0: org.reactivestreams.Subscription): void;
                        public static values(): androidNative.Array<io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber>;
                        public onNext(t: any): void;
                        public static valueOf(name: string): io.reactivex.rxjava3.subscribers.TestSubscriber.EmptySubscriber;
                        public onSubscribe(s: org.reactivestreams.Subscription): void;
                    }
                }
            }
        }
    }
}

//Generics information:
//io.reactivex.rxjava3.core.CompletableConverter:1
//io.reactivex.rxjava3.core.Emitter:1
//io.reactivex.rxjava3.core.Flowable:1
//io.reactivex.rxjava3.core.FlowableConverter:2
//io.reactivex.rxjava3.core.FlowableEmitter:1
//io.reactivex.rxjava3.core.FlowableOnSubscribe:1
//io.reactivex.rxjava3.core.FlowableOperator:2
//io.reactivex.rxjava3.core.FlowableSubscriber:1
//io.reactivex.rxjava3.core.FlowableTransformer:2
//io.reactivex.rxjava3.core.Maybe:1
//io.reactivex.rxjava3.core.MaybeConverter:2
//io.reactivex.rxjava3.core.MaybeEmitter:1
//io.reactivex.rxjava3.core.MaybeObserver:1
//io.reactivex.rxjava3.core.MaybeOnSubscribe:1
//io.reactivex.rxjava3.core.MaybeOperator:2
//io.reactivex.rxjava3.core.MaybeSource:1
//io.reactivex.rxjava3.core.MaybeTransformer:2
//io.reactivex.rxjava3.core.Notification:1
//io.reactivex.rxjava3.core.Observable:1
//io.reactivex.rxjava3.core.ObservableConverter:2
//io.reactivex.rxjava3.core.ObservableEmitter:1
//io.reactivex.rxjava3.core.ObservableOnSubscribe:1
//io.reactivex.rxjava3.core.ObservableOperator:2
//io.reactivex.rxjava3.core.ObservableSource:1
//io.reactivex.rxjava3.core.ObservableTransformer:2
//io.reactivex.rxjava3.core.Observer:1
//io.reactivex.rxjava3.core.Single:1
//io.reactivex.rxjava3.core.SingleConverter:2
//io.reactivex.rxjava3.core.SingleEmitter:1
//io.reactivex.rxjava3.core.SingleObserver:1
//io.reactivex.rxjava3.core.SingleOnSubscribe:1
//io.reactivex.rxjava3.core.SingleOperator:2
//io.reactivex.rxjava3.core.SingleSource:1
//io.reactivex.rxjava3.core.SingleTransformer:2
//io.reactivex.rxjava3.disposables.ReferenceDisposable:1
//io.reactivex.rxjava3.flowables.ConnectableFlowable:1
//io.reactivex.rxjava3.flowables.GroupedFlowable:2
//io.reactivex.rxjava3.functions.BiConsumer:2
//io.reactivex.rxjava3.functions.BiFunction:3
//io.reactivex.rxjava3.functions.BiPredicate:2
//io.reactivex.rxjava3.functions.Consumer:1
//io.reactivex.rxjava3.functions.Function:2
//io.reactivex.rxjava3.functions.Function3:4
//io.reactivex.rxjava3.functions.Function4:5
//io.reactivex.rxjava3.functions.Function5:6
//io.reactivex.rxjava3.functions.Function6:7
//io.reactivex.rxjava3.functions.Function7:8
//io.reactivex.rxjava3.functions.Function8:9
//io.reactivex.rxjava3.functions.Function9:10
//io.reactivex.rxjava3.functions.IntFunction:1
//io.reactivex.rxjava3.functions.Predicate:1
//io.reactivex.rxjava3.functions.Supplier:1
//io.reactivex.rxjava3.internal.functions.Functions.ActionConsumer:1
//io.reactivex.rxjava3.internal.functions.Functions.Array2Func:3
//io.reactivex.rxjava3.internal.functions.Functions.Array3Func:4
//io.reactivex.rxjava3.internal.functions.Functions.Array4Func:5
//io.reactivex.rxjava3.internal.functions.Functions.Array5Func:6
//io.reactivex.rxjava3.internal.functions.Functions.Array6Func:7
//io.reactivex.rxjava3.internal.functions.Functions.Array7Func:8
//io.reactivex.rxjava3.internal.functions.Functions.Array8Func:9
//io.reactivex.rxjava3.internal.functions.Functions.Array9Func:10
//io.reactivex.rxjava3.internal.functions.Functions.ArrayListCapacityCallable:1
//io.reactivex.rxjava3.internal.functions.Functions.BooleanSupplierPredicateReverse:1
//io.reactivex.rxjava3.internal.functions.Functions.CastToClass:2
//io.reactivex.rxjava3.internal.functions.Functions.ClassFilter:2
//io.reactivex.rxjava3.internal.functions.Functions.EqualsPredicate:1
//io.reactivex.rxjava3.internal.functions.Functions.JustValue:2
//io.reactivex.rxjava3.internal.functions.Functions.ListSorter:1
//io.reactivex.rxjava3.internal.functions.Functions.NotificationOnComplete:1
//io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError:1
//io.reactivex.rxjava3.internal.functions.Functions.NotificationOnNext:1
//io.reactivex.rxjava3.internal.functions.Functions.TimestampFunction:1
//io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector:2
//io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector:3
//io.reactivex.rxjava3.internal.functions.Functions.ToMultimapKeyValueSelector:3
//io.reactivex.rxjava3.internal.fuseable.AbstractEmptyQueueFuseable:1
//io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable:1
//io.reactivex.rxjava3.internal.fuseable.FuseToFlowable:1
//io.reactivex.rxjava3.internal.fuseable.FuseToMaybe:1
//io.reactivex.rxjava3.internal.fuseable.FuseToObservable:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamMaybeSource:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher:1
//io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource:1
//io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.CompletionStageConsumer:1
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector:3
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollector.CollectorSubscriber:3
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle:3
//io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver:3
//io.reactivex.rxjava3.internal.jdk8.FlowableFirstStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream:2
//io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream.FlatMapStreamSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.BiConsumerAtomicReference:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.AbstractStreamSubscription:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription:1
//io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamSubscription:1
//io.reactivex.rxjava3.internal.jdk8.FlowableLastStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.FlowableSingleStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriber:1
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable.FlattenStreamMultiObserver:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver:2
//io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional.MapOptionalMaybeObserver:2
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector:3
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollector.CollectorObserver:3
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle:3
//io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver:3
//io.reactivex.rxjava3.internal.jdk8.ObservableFirstStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream:2
//io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStream.FlatMapStreamObserver:2
//io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromStream:1
//io.reactivex.rxjava3.internal.jdk8.ObservableFromStream.StreamDisposable:1
//io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional.MapOptionalObserver:2
//io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver:1
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector:3
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber:3
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorSubscriber:3
//io.reactivex.rxjava3.internal.jdk8.ParallelCollector.SlotPair:1
//io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapConditionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTryConditionalSubscriber:2
//io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber:2
//io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowable:2
//io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservable:2
//io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage:1
//io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler:1
//io.reactivex.rxjava3.internal.jdk8.SingleMapOptional:2
//io.reactivex.rxjava3.internal.jdk8.SingleMapOptional.MapOptionalSingleObserver:2
//io.reactivex.rxjava3.internal.observers.BasicFuseableObserver:2
//io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable:1
//io.reactivex.rxjava3.internal.observers.BasicQueueDisposable:1
//io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingBaseObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingFirstObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingLastObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingMultiObserver:1
//io.reactivex.rxjava3.internal.observers.BlockingObserver:1
//io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver:1
//io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable:1
//io.reactivex.rxjava3.internal.observers.DeferredScalarObserver:2
//io.reactivex.rxjava3.internal.observers.DisposableAutoReleaseMultiObserver:1
//io.reactivex.rxjava3.internal.observers.DisposableAutoReleaseObserver:1
//io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver:1
//io.reactivex.rxjava3.internal.observers.ForEachWhileObserver:1
//io.reactivex.rxjava3.internal.observers.FutureMultiObserver:1
//io.reactivex.rxjava3.internal.observers.FutureObserver:1
//io.reactivex.rxjava3.internal.observers.InnerQueuedObserver:1
//io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport:1
//io.reactivex.rxjava3.internal.observers.LambdaObserver:1
//io.reactivex.rxjava3.internal.observers.QueueDrainObserver:3
//io.reactivex.rxjava3.internal.observers.ResumeSingleObserver:1
//io.reactivex.rxjava3.internal.observers.SafeMaybeObserver:1
//io.reactivex.rxjava3.internal.observers.SafeSingleObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher.FromPublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle.CompletableFromSingleObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableMaterialize:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorReturn.OnErrorReturnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableUsing:1
//io.reactivex.rxjava3.internal.operators.completable.CompletableUsing.UsingObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream:2
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable.BlockingFlowableIterator:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest.LatestSubscriberIterator:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent.MostRecentSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextIterator:1
//io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext.NextSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAll:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAll.AllSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle.AllSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbCoordinator:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.AmbInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAny:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAny.AnySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle.AnySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferOverlappingSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferSkipSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary:4
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber:4
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber.BufferOpenSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferCloseSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferBoundarySubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferExactBoundarySubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactBoundedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCache:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.CacheSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.Node:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect.CollectSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestCoordinator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest.CombineLatestInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray.ConcatArraySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.BaseConcatMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapDelayed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapImmediate:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapInner:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.ConcatMapSupport:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager.ConcatMapEagerDelayErrorSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEagerPublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.BaseConcatMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapDelayed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler.ConcatMapImmediate:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe.ConcatWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle.ConcatWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCount:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BaseEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.BufferAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.ErrorAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.LatestAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.MissingEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.NoOverflowBaseAsyncEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.SerializedEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber.DebounceInnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach.DetachSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct.DistinctSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallyConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally.DoFinallySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybePublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableError:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.MergeSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable.FlatMapCompletableMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybePublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle.FlatMapSingleSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSinglePublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable.FlattenIterableSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromAction:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArrayConditionalSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable.SubscriberObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromPublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate.GeneratorSubscription:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.EvictionAction:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupBySubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.GroupedUnicast:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy.State:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.GroupJoinSubscription:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableHide:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable.IgnoreElementsSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedTimedReplay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapIntoIterable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerOuter:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleGenerator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnComplete:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnError:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.TimedReplay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin.JoinSubscription:5
//io.reactivex.rxjava3.internal.operators.flowable.FlowableJust:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe.LastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableLift:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification.MapNotificationSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMapPublisher:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize.MaterializeSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.BaseObserveOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.ObserveOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer.BackpressureBufferSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy.OnBackpressureBufferStrategySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureError.BackpressureErrorSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest.BackpressureLatestSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduceWith.BackpressureReduceWithSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorComplete.OnErrorCompleteSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn.OnErrorReturnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.InnerSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.PublishConnection:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce.ReduceSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle.ReduceSeedObserver:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefCountSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat.RepeatSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.RepeatWhenSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenReceiver:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen.WhenSourceSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.BoundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.MulticastFlowable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayBufferSupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplaySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ScheduledReplayBufferSupplier:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate.RetryBiSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate.RetrySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainEmitLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SampleMainNoLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedEmitLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedNoLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap.ScalarXMapFlowable:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScan:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScan.ScanSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSerialized:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle.SingleElementSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast.SkipLastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed.SkipLastTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile.SkipWhileSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.SubscribeOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty.SwitchIfEmptySubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapInnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap.SwitchMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTake:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTake.TakeSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast.TakeLastSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed.TakeLastTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakePublisher:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil.TakeUntilMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile.TakeWhileSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed.DebounceTimedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest.ThrottleLatestSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutFallbackSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout.TimeoutSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToList:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToList.ToListSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle.ToListSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing.UsingSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowExactSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowOverlapSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.WindowSkipSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryInnerSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowEndSubscriberIntercept:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartItem:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector.WindowBoundaryMainSubscriber.WindowStartSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.AbstractWindowSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactBoundedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowExactUnboundedSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.WindowSkipSubscriber:1
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom.WithLatestFromSubscriber:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany.WithLatestFromSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZip:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber:2
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable:3
//io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable.ZipIterableSubscriber:3
//io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb.AmbMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCache:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.CacheDisposable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray.ConcatMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError.ConcatMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.ConcatMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeContains:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCount:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.OtherSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.DelayMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher.OtherSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.DelayWithMainObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess.DoAfterObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally.DoFinallyObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent.DoOnEventMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle.MaybeLifecycleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeError:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter.FilterMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector:3
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver:3
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver:3
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable.FlatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle.FlatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable.FromCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.FromSingleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeHide:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeHide.HideMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement.IgnoreMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable.IgnoreMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle.IsEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeJust:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeLift:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMap:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMap.MapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.ClqSimpleQueue:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MergeMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.MpscFillOnceSimpleQueue:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.SimpleQueueWithConsumerIndex:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete.OnErrorCompleteMultiObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext.OnErrorNextMaybeObserver.NextMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn.OnErrorReturnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybePeek:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybePeek.MaybePeekObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeOnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn.SubscribeTask:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver.OtherMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle.SwitchIfEmptyMaybeObserver.OtherSingleObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval.TimeIntervalMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutFallbackMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable.MaybeToFlowableSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable.MaybeToObservableObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle.ToSingleMaybeSubscriber:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsafeCreate:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn.UnsubscribeOnMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable:2
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable:1
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable.AndThenObservableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher:1
//io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher.AndThenPublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle.ConcatMapSingleSubscriber.ConcatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSinglePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletablePublisher:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle.SwitchMapSingleSubscriber.SwitchMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSinglePublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable:2
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable.FlatMapObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher:2
//io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher.FlatMapPublisherSubscriber:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable.ConcatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe.ConcatMapMaybeMainObserver.ConcatMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle.ConcatMapSingleMainObserver.ConcatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver:2
//io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable:2
//io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable.FlatMapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.AbstractObservableWithUpstream:2
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable.BlockingObservableIterator:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest.BlockingObservableLatestIterator:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent.MostRecentObserver:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator:1
//io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAll:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAll.AllObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle.AllObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAmb:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAny:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAny.AnyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle.AnyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableAutoConnect:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferExactObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer.BufferSkipObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary:4
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver:4
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferBoundaryObserver.BufferOpenObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary.BufferCloseObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferBoundaryObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactBoundedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferExactUnboundedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCache:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCache.CacheDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCache.Node:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollect:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.CombinerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest.LatestCoordinator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver.DelayErrorInnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.SourceObserver.InnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapDelayErrorObserver.DelayErrorInnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable.ConcatWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe.ConcatWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCount:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCreate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.CreateEmitter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver.DebounceInnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceEmitter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed.DebounceTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDefer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDelay:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize.DematerializeObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDetach:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDetach.DetachObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged.DistinctUntilChangedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext.DoAfterObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally.DoFinallyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach.DoOnEachObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe.ElementAtObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle.ElementAtObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableError:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFilter:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.InnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap.MergeObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable.FlatMapCompletableMainObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable.FlatMapCompletableMainObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe.FlatMapMaybeObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromAction:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable.FromCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromFuture:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.FromIterableDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher.PublisherSubscriber:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableFromUnsafeSource:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate.GeneratorDisposable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupByObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin.GroupJoinDisposable:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableHide:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableHide.HideDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements.IgnoreObservable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapIntoIterable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerInner:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnError:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnNext:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleBiGenerator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.TimedReplayCallable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableJoin:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableJoin.JoinDisposable:5
//io.reactivex.rxjava3.internal.operators.observable.ObservableJust:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe.LastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle.LastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableLift:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification.MapNotificationObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize.MaterializeObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle.MergeWithObserver.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn.ObserveOnObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorComplete.OnErrorCompleteObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext.OnErrorNextObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn.OnErrorReturnObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublish:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.InnerDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.PublishConnection:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector:2
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.TargetObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe.ReduceObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle.ReduceSeedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefCountObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat.RepeatObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil.RepeatUntilObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen.RepeatWhenObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BoundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.BufferSupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.DisposeConsumer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.InnerDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.MulticastReplay:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplaySource:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ScheduledReplaySupplier:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen.RepeatWhenObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedEmitLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedNoLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed.SampleTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainEmitLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainNoLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SampleMainObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable.SamplerObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarDisposable:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap.ScalarXMapObservable:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableScan:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed.ScanSeedObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual.EqualObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualCoordinator:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle.EqualObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSerialized:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe.SingleElementObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle.SingleElementObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkip:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkip.SkipObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast.SkipLastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed.SkipLastTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile.SkipWhileObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn.SubscribeOnObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty.SwitchIfEmptyObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableTake:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTake.TakeObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed.TakeLastTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest.ThrottleLatestObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval.TimeIntervalObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutFallbackObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout.TimeoutObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutFallbackObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableToList:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableToList.ToListObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle.ToListObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableUsing:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindow:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowExactObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindow.WindowSkipObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryMainObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowEndObserverIntercept:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartItem:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector.WindowBoundaryMainObserver.WindowStartObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowSubscribeIntercept:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.AbstractWindowObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactBoundedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowExactUnboundedObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed.WindowSkipObserver:1
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom.WithLatestFromObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany.WithLatestFromObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZip:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZip.ZipObserver:2
//io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable:3
//io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable.ZipIterableObserver:3
//io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect.ParallelCollectSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.ParallelDoOnNextSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscription:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionDelayError:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMap:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTryConditionalSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.ParallelMapTrySubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.ParallelPeekSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce.ParallelReduceSubscriber:2
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.SlotPair:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber:1
//io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinSubscription:1
//io.reactivex.rxjava3.internal.operators.single.SingleAmb:1
//io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleCache:1
//io.reactivex.rxjava3.internal.operators.single.SingleCache.CacheDisposable:1
//io.reactivex.rxjava3.internal.operators.single.SingleContains:1
//io.reactivex.rxjava3.internal.operators.single.SingleCreate:1
//io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter:1
//io.reactivex.rxjava3.internal.operators.single.SingleDefer:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelay:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable.OtherObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable.OtherSubscriber:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle:2
//io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle.OtherObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleDematerialize:2
//io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleDetach:1
//io.reactivex.rxjava3.internal.operators.single.SingleDetach.DetachSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess.DoAfterObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate.DoAfterTerminateObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoFinally:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoFinally.DoFinallyObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose.DoOnDisposeObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnError:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle.SingleLifecycleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe.DoOnSubscribeSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess:1
//io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate:1
//io.reactivex.rxjava3.internal.operators.single.SingleEquals:1
//io.reactivex.rxjava3.internal.operators.single.SingleEquals.InnerObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleError:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMap:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMap.SingleFlatMapCallback.FlatMapSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector:3
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver:3
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver:3
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable.FlatMapCompletableObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable.FlatMapIterableObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapMaybeObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapNotification.FlatMapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher:2
//io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleFromCallable:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher.ToSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier:1
//io.reactivex.rxjava3.internal.operators.single.SingleFromUnsafeSource:1
//io.reactivex.rxjava3.internal.operators.single.SingleHide:1
//io.reactivex.rxjava3.internal.operators.single.SingleHide.HideSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterable:1
//io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator:1
//io.reactivex.rxjava3.internal.operators.single.SingleJust:1
//io.reactivex.rxjava3.internal.operators.single.SingleLift:2
//io.reactivex.rxjava3.internal.operators.single.SingleMap:2
//io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleMaterialize:1
//io.reactivex.rxjava3.internal.operators.single.SingleObserveOn:1
//io.reactivex.rxjava3.internal.operators.single.SingleObserveOn.ObserveOnSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleOnErrorComplete:1
//io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn:1
//io.reactivex.rxjava3.internal.operators.single.SingleResumeNext:1
//io.reactivex.rxjava3.internal.operators.single.SingleResumeNext.ResumeMainSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn:1
//io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn.SubscribeOnObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil:2
//io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.TimeIntervalSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeout:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleTimeout.TimeoutMainObserver.TimeoutFallbackObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleToFlowable:1
//io.reactivex.rxjava3.internal.operators.single.SingleToFlowable.SingleToFlowableObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleToObservable:1
//io.reactivex.rxjava3.internal.operators.single.SingleToObservable.SingleToObservableObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn:1
//io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn.UnsubscribeOnSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleUsing:2
//io.reactivex.rxjava3.internal.operators.single.SingleUsing.UsingSingleObserver:2
//io.reactivex.rxjava3.internal.operators.single.SingleZipArray:2
//io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipCoordinator:2
//io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver:1
//io.reactivex.rxjava3.internal.operators.single.SingleZipIterable:2
//io.reactivex.rxjava3.internal.queue.MpscLinkedQueue:1
//io.reactivex.rxjava3.internal.queue.MpscLinkedQueue.LinkedQueueNode:1
//io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BlockingLastSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.FutureSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport:1
//io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber:3
//io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber:2
//io.reactivex.rxjava3.internal.subscribers.StrictSubscriber:1
//io.reactivex.rxjava3.internal.subscribers.SubscriberResourceWrapper:1
//io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription:1
//io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription:1
//io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription:1
//io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription:1
//io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList:1
//io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate:1
//io.reactivex.rxjava3.internal.util.MergerBiFunction:1
//io.reactivex.rxjava3.internal.util.ObservableQueueDrain:2
//io.reactivex.rxjava3.internal.util.OpenHashSet:1
//io.reactivex.rxjava3.internal.util.QueueDrain:2
//io.reactivex.rxjava3.internal.util.SorterFunction:1
//io.reactivex.rxjava3.internal.util.VolatileSizeArrayList:1
//io.reactivex.rxjava3.observables.ConnectableObservable:1
//io.reactivex.rxjava3.observables.GroupedObservable:2
//io.reactivex.rxjava3.observers.BaseTestConsumer:2
//io.reactivex.rxjava3.observers.DefaultObserver:1
//io.reactivex.rxjava3.observers.DisposableMaybeObserver:1
//io.reactivex.rxjava3.observers.DisposableObserver:1
//io.reactivex.rxjava3.observers.DisposableSingleObserver:1
//io.reactivex.rxjava3.observers.ResourceMaybeObserver:1
//io.reactivex.rxjava3.observers.ResourceObserver:1
//io.reactivex.rxjava3.observers.ResourceSingleObserver:1
//io.reactivex.rxjava3.observers.SafeObserver:1
//io.reactivex.rxjava3.observers.SerializedObserver:1
//io.reactivex.rxjava3.observers.TestObserver:1
//io.reactivex.rxjava3.operators.ConditionalSubscriber:1
//io.reactivex.rxjava3.operators.QueueDisposable:1
//io.reactivex.rxjava3.operators.QueueFuseable:1
//io.reactivex.rxjava3.operators.QueueSubscription:1
//io.reactivex.rxjava3.operators.ScalarSupplier:1
//io.reactivex.rxjava3.operators.SimplePlainQueue:1
//io.reactivex.rxjava3.operators.SimpleQueue:1
//io.reactivex.rxjava3.operators.SpscArrayQueue:1
//io.reactivex.rxjava3.operators.SpscLinkedArrayQueue:1
//io.reactivex.rxjava3.parallel.ParallelFlowable:1
//io.reactivex.rxjava3.parallel.ParallelFlowableConverter:2
//io.reactivex.rxjava3.parallel.ParallelTransformer:2
//io.reactivex.rxjava3.processors.AsyncProcessor:1
//io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription:1
//io.reactivex.rxjava3.processors.BehaviorProcessor:1
//io.reactivex.rxjava3.processors.BehaviorProcessor.BehaviorSubscription:1
//io.reactivex.rxjava3.processors.FlowableProcessor:1
//io.reactivex.rxjava3.processors.MulticastProcessor:1
//io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription:1
//io.reactivex.rxjava3.processors.PublishProcessor:1
//io.reactivex.rxjava3.processors.PublishProcessor.PublishSubscription:1
//io.reactivex.rxjava3.processors.ReplayProcessor:1
//io.reactivex.rxjava3.processors.ReplayProcessor.Node:1
//io.reactivex.rxjava3.processors.ReplayProcessor.ReplayBuffer:1
//io.reactivex.rxjava3.processors.ReplayProcessor.ReplaySubscription:1
//io.reactivex.rxjava3.processors.ReplayProcessor.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.processors.ReplayProcessor.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode:1
//io.reactivex.rxjava3.processors.ReplayProcessor.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.processors.SerializedProcessor:1
//io.reactivex.rxjava3.processors.UnicastProcessor:1
//io.reactivex.rxjava3.schedulers.Timed:1
//io.reactivex.rxjava3.subjects.AsyncSubject:1
//io.reactivex.rxjava3.subjects.AsyncSubject.AsyncDisposable:1
//io.reactivex.rxjava3.subjects.BehaviorSubject:1
//io.reactivex.rxjava3.subjects.BehaviorSubject.BehaviorDisposable:1
//io.reactivex.rxjava3.subjects.MaybeSubject:1
//io.reactivex.rxjava3.subjects.MaybeSubject.MaybeDisposable:1
//io.reactivex.rxjava3.subjects.PublishSubject:1
//io.reactivex.rxjava3.subjects.PublishSubject.PublishDisposable:1
//io.reactivex.rxjava3.subjects.ReplaySubject:1
//io.reactivex.rxjava3.subjects.ReplaySubject.Node:1
//io.reactivex.rxjava3.subjects.ReplaySubject.ReplayBuffer:1
//io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable:1
//io.reactivex.rxjava3.subjects.ReplaySubject.SizeAndTimeBoundReplayBuffer:1
//io.reactivex.rxjava3.subjects.ReplaySubject.SizeBoundReplayBuffer:1
//io.reactivex.rxjava3.subjects.ReplaySubject.TimedNode:1
//io.reactivex.rxjava3.subjects.ReplaySubject.UnboundedReplayBuffer:1
//io.reactivex.rxjava3.subjects.SerializedSubject:1
//io.reactivex.rxjava3.subjects.SingleSubject:1
//io.reactivex.rxjava3.subjects.SingleSubject.SingleDisposable:1
//io.reactivex.rxjava3.subjects.Subject:1
//io.reactivex.rxjava3.subjects.UnicastSubject:1
//io.reactivex.rxjava3.subscribers.DefaultSubscriber:1
//io.reactivex.rxjava3.subscribers.DisposableSubscriber:1
//io.reactivex.rxjava3.subscribers.ResourceSubscriber:1
//io.reactivex.rxjava3.subscribers.SafeSubscriber:1
//io.reactivex.rxjava3.subscribers.SerializedSubscriber:1
//io.reactivex.rxjava3.subscribers.TestSubscriber:1

